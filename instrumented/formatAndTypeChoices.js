function cov_1q9v2o2ncu(){var path="/Users/brett/jsoe/src/formatAndTypeChoices.js";var hash="08f971d2a33159bdd98d08ee3e411bf078cd9ab4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/formatAndTypeChoices.js",statementMap:{"0":{start:{line:23,column:41},end:{line:54,column:1}},"1":{start:{line:26,column:20},end:{line:26,column:45}},"2":{start:{line:28,column:2},end:{line:53,column:40}},"3":{start:{line:38,column:8},end:{line:42,column:11}},"4":{start:{line:46,column:4},end:{line:46,column:45}},"5":{start:{line:51,column:4},end:{line:51,column:24}},"6":{start:{line:52,column:4},end:{line:52,column:16}},"7":{start:{line:112,column:17},end:{line:112,column:75}},"8":{start:{line:113,column:54},end:{line:204,column:72}},"9":{start:{line:153,column:8},end:{line:160,column:9}},"10":{start:{line:154,column:22},end:{line:156,column:12}},"11":{start:{line:155,column:12},end:{line:155,column:52}},"12":{start:{line:157,column:10},end:{line:157,column:52}},"13":{start:{line:158,column:15},end:{line:160,column:9}},"14":{start:{line:159,column:10},end:{line:159,column:35}},"15":{start:{line:161,column:8},end:{line:161,column:50}},"16":{start:{line:168,column:8},end:{line:168,column:40}},"17":{start:{line:169,column:25},end:{line:169,column:56}},"18":{start:{line:170,column:8},end:{line:190,column:35}},"19":{start:{line:195,column:8},end:{line:201,column:30}},"20":{start:{line:218,column:4},end:{line:235,column:7}},"21":{start:{line:224,column:8},end:{line:224,column:74}},"22":{start:{line:231,column:8},end:{line:233,column:10}},"23":{start:{line:238,column:17},end:{line:240,column:15}},"24":{start:{line:242,column:2},end:{line:253,column:29}},"25":{start:{line:255,column:2},end:{line:334,column:4}},"26":{start:{line:273,column:82},end:{line:275,column:22}},"27":{start:{line:276,column:6},end:{line:284,column:22}},"28":{start:{line:292,column:82},end:{line:294,column:22}},"29":{start:{line:295,column:6},end:{line:295,column:72}},"30":{start:{line:303,column:82},end:{line:305,column:22}},"31":{start:{line:307,column:31},end:{line:307,column:53}},"32":{start:{line:309,column:6},end:{line:309,column:57}},"33":{start:{line:315,column:8},end:{line:322,column:17}},"34":{start:{line:324,column:19},end:{line:324,column:51}},"35":{start:{line:326,column:85},end:{line:328,column:24}},"36":{start:{line:330,column:106},end:{line:332,column:54}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:23,column:41},end:{line:23,column:42}},loc:{start:{line:25,column:11},end:{line:54,column:1}},line:25},"1":{name:"(anonymous_1)",decl:{start:{line:37,column:20},end:{line:37,column:21}},loc:{start:{line:37,column:37},end:{line:43,column:7}},line:37},"2":{name:"(anonymous_2)",decl:{start:{line:45,column:9},end:{line:45,column:10}},loc:{start:{line:45,column:33},end:{line:47,column:3}},line:45},"3":{name:"(anonymous_3)",decl:{start:{line:47,column:12},end:{line:47,column:13}},loc:{start:{line:50,column:7},end:{line:53,column:3}},line:50},"4":{name:"formatAndTypeChoices",decl:{start:{line:101,column:22},end:{line:101,column:42}},loc:{start:{line:111,column:3},end:{line:335,column:1}},line:111},"5":{name:"(anonymous_5)",decl:{start:{line:152,column:6},end:{line:152,column:7}},loc:{start:{line:152,column:60},end:{line:162,column:7}},line:152},"6":{name:"(anonymous_6)",decl:{start:{line:154,column:50},end:{line:154,column:51}},loc:{start:{line:154,column:62},end:{line:156,column:11}},line:154},"7":{name:"(anonymous_7)",decl:{start:{line:167,column:6},end:{line:167,column:7}},loc:{start:{line:167,column:44},end:{line:191,column:7}},line:167},"8":{name:"(anonymous_8)",decl:{start:{line:194,column:6},end:{line:194,column:7}},loc:{start:{line:194,column:22},end:{line:202,column:7}},line:194},"9":{name:"(anonymous_9)",decl:{start:{line:223,column:6},end:{line:223,column:7}},loc:{start:{line:223,column:22},end:{line:225,column:7}},line:223},"10":{name:"(anonymous_10)",decl:{start:{line:230,column:6},end:{line:230,column:7}},loc:{start:{line:230,column:24},end:{line:234,column:7}},line:230},"11":{name:"(anonymous_11)",decl:{start:{line:271,column:4},end:{line:271,column:5}},loc:{start:{line:271,column:37},end:{line:285,column:5}},line:271},"12":{name:"(anonymous_12)",decl:{start:{line:290,column:4},end:{line:290,column:5}},loc:{start:{line:290,column:15},end:{line:296,column:5}},line:290},"13":{name:"(anonymous_13)",decl:{start:{line:301,column:4},end:{line:301,column:5}},loc:{start:{line:301,column:22},end:{line:310,column:5}},line:301},"14":{name:"(anonymous_14)",decl:{start:{line:313,column:4},end:{line:313,column:5}},loc:{start:{line:313,column:37},end:{line:333,column:5}},line:313}},branchMap:{"0":{loc:{start:{line:23,column:42},end:{line:25,column:6}},type:"default-arg",locations:[{start:{line:25,column:4},end:{line:25,column:6}}],line:23},"1":{loc:{start:{line:26,column:20},end:{line:26,column:45}},type:"binary-expr",locations:[{start:{line:26,column:20},end:{line:26,column:27}},{start:{line:26,column:31},end:{line:26,column:45}}],line:26},"2":{loc:{start:{line:30,column:8},end:{line:32,column:52}},type:"cond-expr",locations:[{start:{line:31,column:8},end:{line:31,column:10}},{start:{line:32,column:8},end:{line:32,column:52}}],line:30},"3":{loc:{start:{line:36,column:8},end:{line:44,column:10}},type:"cond-expr",locations:[{start:{line:37,column:8},end:{line:43,column:8}},{start:{line:44,column:8},end:{line:44,column:10}}],line:36},"4":{loc:{start:{line:41,column:20},end:{line:41,column:74}},type:"cond-expr",locations:[{start:{line:41,column:37},end:{line:41,column:62}},{start:{line:41,column:65},end:{line:41,column:74}}],line:41},"5":{loc:{start:{line:109,column:2},end:{line:109,column:25}},type:"default-arg",locations:[{start:{line:109,column:12},end:{line:109,column:25}}],line:109},"6":{loc:{start:{line:110,column:2},end:{line:110,column:21}},type:"default-arg",locations:[{start:{line:110,column:10},end:{line:110,column:21}}],line:110},"7":{loc:{start:{line:112,column:17},end:{line:112,column:75}},type:"cond-expr",locations:[{start:{line:112,column:45},end:{line:112,column:53}},{start:{line:112,column:56},end:{line:112,column:75}}],line:112},"8":{loc:{start:{line:112,column:17},end:{line:112,column:42}},type:"binary-expr",locations:[{start:{line:112,column:17},end:{line:112,column:24}},{start:{line:112,column:28},end:{line:112,column:42}}],line:112},"9":{loc:{start:{line:153,column:8},end:{line:160,column:9}},type:"if",locations:[{start:{line:153,column:8},end:{line:160,column:9}},{start:{line:158,column:15},end:{line:160,column:9}}],line:153},"10":{loc:{start:{line:157,column:31},end:{line:157,column:51}},type:"cond-expr",locations:[{start:{line:157,column:44},end:{line:157,column:45}},{start:{line:157,column:48},end:{line:157,column:51}}],line:157},"11":{loc:{start:{line:158,column:15},end:{line:160,column:9}},type:"if",locations:[{start:{line:158,column:15},end:{line:160,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:158},"12":{loc:{start:{line:185,column:25},end:{line:189,column:23}},type:"cond-expr",locations:[{start:{line:186,column:14},end:{line:188,column:13}},{start:{line:189,column:14},end:{line:189,column:23}}],line:185},"13":{loc:{start:{line:238,column:17},end:{line:240,column:15}},type:"cond-expr",locations:[{start:{line:239,column:6},end:{line:239,column:53}},{start:{line:240,column:6},end:{line:240,column:15}}],line:238}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0],"6":[0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"08f971d2a33159bdd98d08ee3e411bf078cd9ab4"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1q9v2o2ncu=function(){return actualCoverage;};}return actualCoverage;}cov_1q9v2o2ncu();import{jml}from'./vendor-imports.js';import{buildTypeChoices}from'./typeChoices.js';import Types from'./types.js';import Formats from'./formats.js';import{$e,DOM}from'./utils/templateUtils.js';/**
 * @callback TypeRootGetter
 * @returns {HTMLDivElement|null}
 */ /**
 * Defaults to structured cloning.
 * @todo Compose from format metadata, so can make user customizable.
 * @param {object} cfg
 * @param {string[]} [cfg.schemas]
 * @param {string} [cfg.selectedSchema]
 * @param {boolean} [cfg.hasKeyPath] Whether or not a key path is expected; if
 *   true, an indexedDB key is not allowed here as a key does not support
 *   the object type which is needed for a key path.
 * @returns {DocumentFragment}
 */cov_1q9v2o2ncu().s[0]++;export const getFormatAndSchemaChoices=({schemas,selectedSchema,hasKeyPath}=(cov_1q9v2o2ncu().b[0][0]++,{}))=>{cov_1q9v2o2ncu().f[0]++;const hasSchema=(cov_1q9v2o2ncu().s[1]++,(cov_1q9v2o2ncu().b[1][0]++,schemas)&&(cov_1q9v2o2ncu().b[1][1]++,schemas.length));// eslint-disable-next-line @stylistic/max-len -- Long
cov_1q9v2o2ncu().s[2]++;return/** @type {[optText: string, opts: {value: string, selected?: boolean}][]} */[['JSON only',{value:'json'}],...(hasKeyPath?(cov_1q9v2o2ncu().b[2][0]++,[]):(cov_1q9v2o2ncu().b[2][1]++,[['IndexedDB key',{value:'indexedDBKey'}]])),['Structured Clone (via Typeson JSON)',{value:'structuredCloning',selected:!hasSchema}],...(hasSchema?(cov_1q9v2o2ncu().b[3][0]++,schemas.map((schema,idx)=>{cov_1q9v2o2ncu().f[1]++;cov_1q9v2o2ncu().s[3]++;return[`Schema: ${schema}`,{value:'schema',dataset:{schema},selected:selectedSchema?(cov_1q9v2o2ncu().b[4][0]++,schema===selectedSchema):(cov_1q9v2o2ncu().b[4][1]++,idx===0)}];})):(cov_1q9v2o2ncu().b[3][1]++,[]))].map(([optText,optAtts])=>{cov_1q9v2o2ncu().f[2]++;cov_1q9v2o2ncu().s[4]++;return jml('option',optAtts,[optText]);}).reduce((frag,option)=>{cov_1q9v2o2ncu().f[3]++;cov_1q9v2o2ncu().s[5]++;frag.append(option);cov_1q9v2o2ncu().s[6]++;return frag;},document.createDocumentFragment());};/**
 * @callback SetValue
 * @param {import('./formats.js').StructuredCloneValue} value
 * @param {import('./types.js').StateObject} stateObj
 * @returns {Promise<void>}
 */ /**
 * @typedef {import('./formats/schema.js').ZodexSchema} ZodexSchema
 */ /**
 * Builds a selector and container for types.
 * @param {object} cfg
 * @param {string[]} [cfg.schemas] The schema names
 * @param {(schema: string) => Promise<ZodexSchema>} [cfg.getSchemaContent] The
 *    schema content retriever
 * @param {boolean} [cfg.hasValue] Set to `true` if you are supplying
 *   your own value. If `false` and `hasKeyPath` is `true`,
 *   will initialize with an object.
 * @param {boolean} [cfg.singleValue] (NOT IN USE)
 * @param {boolean} [cfg.hasKeyPath] If this is set (because there is a keyPath
 *   to be found within the object) and `hasValue` is true, an object type
 *   will be set and required at the root level. This option will also
 *   prevent selection of indexedDB key at root (since a key cannot be a
 *   plain object).
 * @param {string} [cfg.typeNamespace] Used to prevent conflicts with other
 *   instances of typeChoices on the page
 * @param {string} [cfg.selectedSchema]
 * @param {import('./formats.js').default} [cfg.formats]
 * @param {import('./types.js').default} [cfg.types]
 * @returns {Promise<{
 *   formatChoices: FormatChoices,
 *   typesHolder: TypesHolder,
 *   domArray: [formatChoices: FormatChoices, typesHolder: TypesHolder],
 *   getValue: (stateObj: import('./types.js').StateObject,
 *     currentPath: string) => import('./formats.js').StructuredCloneValue,
 *   getType: () => string,
 *   validValuesSet: () => boolean,
 *   setValue: SetValue,
 *   formats: import('./formats.js').default,
 *   types: import('./types.js').default
 * }>} The selector for types and the container for them. Both should be
 *   added to the page.
 */export async function formatAndTypeChoices({schemas,getSchemaContent,hasValue,singleValue,hasKeyPath,typeNamespace,selectedSchema,formats=(cov_1q9v2o2ncu().b[5][0]++,new Formats()),types=(cov_1q9v2o2ncu().b[6][0]++,new Types())}){cov_1q9v2o2ncu().f[4]++;const format=(cov_1q9v2o2ncu().s[7]++,(cov_1q9v2o2ncu().b[8][0]++,schemas)&&(cov_1q9v2o2ncu().b[8][1]++,schemas.length)?(cov_1q9v2o2ncu().b[7][0]++,'schema'):(cov_1q9v2o2ncu().b[7][1]++,'structuredCloning'));const formatChoices=(/** @type {FormatChoices} */cov_1q9v2o2ncu().s[8]++,jml('select',{class:'formatChoices',hidden:singleValue,// is: 'main-type-choices',
$custom:{/**
       * Sets the desired format and rebuilds the type choices.
       * @callback SetFormat
       * @param {{
       *   valueFormat?: import('./formats.js').AvailableFormat,
       *   autoTrigger: boolean,
       *   schema?: string
       * }} cfg
       * @this {HTMLSelectElement & {
       *   $buildTypeChoices: TypeChoiceBuilder
       * }}
       * @returns {Promise<void>}
       */ /**
       * Rebuilds the type choices.
       * @callback TypeChoiceBuilder
       * @param {boolean} [autoTrigger]
       * @this {HTMLSelectElement & {
       *   $buildTypeChoices: TypeChoiceBuilder
       * }}
       * @returns {Promise<void>}
       */ /**
       * @typedef {HTMLSelectElement & {
       *   $setFormat: SetFormat,
       *   $buildTypeChoices: TypeChoiceBuilder
       * }} FormatChoices
       */ /**
       * @type {SetFormat}
       */async $setFormat({valueFormat,autoTrigger,schema}){cov_1q9v2o2ncu().f[5]++;cov_1q9v2o2ncu().s[9]++;if(schema){cov_1q9v2o2ncu().b[9][0]++;const idx=(cov_1q9v2o2ncu().s[10]++,[...this.options].findIndex(option=>{cov_1q9v2o2ncu().f[6]++;cov_1q9v2o2ncu().s[11]++;return option.dataset.schema===schema;}));cov_1q9v2o2ncu().s[12]++;this.selectedIndex=idx===-1?(cov_1q9v2o2ncu().b[10][0]++,0):(cov_1q9v2o2ncu().b[10][1]++,idx);}else{cov_1q9v2o2ncu().b[9][1]++;cov_1q9v2o2ncu().s[13]++;if(valueFormat){cov_1q9v2o2ncu().b[11][0]++;cov_1q9v2o2ncu().s[14]++;this.value=valueFormat;}else{cov_1q9v2o2ncu().b[11][1]++;}}cov_1q9v2o2ncu().s[15]++;await this.$buildTypeChoices(autoTrigger);},/**
       * @type {TypeChoiceBuilder}
       */async $buildTypeChoices(autoTrigger){cov_1q9v2o2ncu().f[7]++;cov_1q9v2o2ncu().s[16]++;DOM.removeChildren(typesHolder);const{schema}=(cov_1q9v2o2ncu().s[17]++,this.selectedOptions[0].dataset);cov_1q9v2o2ncu().s[18]++;jml({'#':buildTypeChoices({autoTrigger,topRoot:(/** @type {HTMLDivElement} */$e(typesHolder,'div[data-type]')),// resultType: 'both',
format:(/** @type {import('./formats.js').AvailableFormat} */this.value),formats,types,typeNamespace,requireObject:hasKeyPath,objectHasValue:hasValue,schema,schemaContent:schema?(cov_1q9v2o2ncu().b[12][0]++,await getSchemaContent?.(/** @type {string} */schema)):(cov_1q9v2o2ncu().b[12][1]++,undefined)}).domArray},typesHolder);}},$on:{async change(){cov_1q9v2o2ncu().f[8]++;cov_1q9v2o2ncu().s[19]++;await(/**
         * @type {HTMLSelectElement & {
         *   $buildTypeChoices: TypeChoiceBuilder
         * }}
         */this.$buildTypeChoices());}}},[getFormatAndSchemaChoices({schemas,hasKeyPath,selectedSchema})]));/**
   * @callback TypeSelectGetter
   * @returns {HTMLSelectElement|null}
   */ /**
   * @typedef {HTMLDivElement} TypesHolder
   * @property {TypeRootGetter} $getTypeRoot
   * @property {TypeSelectGetter} $getTypeSelect
   */const typesHolder=(cov_1q9v2o2ncu().s[20]++,jml('div',{class:'typesHolder',$custom:{/**
       * @type {TypeRootGetter}
       * @this {HTMLDivElement}
       */$getTypeRoot(){cov_1q9v2o2ncu().f[9]++;cov_1q9v2o2ncu().s[21]++;return/** @type {HTMLDivElement} */$e(this,'div[data-type]');},/**
       * @type {TypeSelectGetter}
       * @this {HTMLSelectElement}
       */$getTypeSelect(){cov_1q9v2o2ncu().f[10]++;cov_1q9v2o2ncu().s[22]++;return/** @type {HTMLSelectElement} */$e(this,`.typeChoices-${typeNamespace}`);}}}));const schema=(cov_1q9v2o2ncu().s[23]++,format==='schema'?(cov_1q9v2o2ncu().b[13][0]++,formatChoices.selectedOptions[0].dataset.schema):(cov_1q9v2o2ncu().b[13][1]++,undefined));cov_1q9v2o2ncu().s[24]++;jml({'#':buildTypeChoices({// resultType: 'both',
topRoot:(/** @type {HTMLDivElement} */$e(typesHolder,'div[data-type]')),format,formats,types,typeNamespace,requireObject:hasKeyPath,objectHasValue:hasValue,schema,schemaContent:await getSchemaContent?.(/** @type {string} */schema)}).domArray},typesHolder);cov_1q9v2o2ncu().s[25]++;return{formats,types,formatChoices,typesHolder,// Easier for Jamilih
domArray:[formatChoices,typesHolder],// Normal API
/**
     * @param {import('./types.js').StateObject} [stateObj] Will
     *   auto-set `typeNamespace` and `format`
     * @param {string} [currentPath]
     * @returns {import('./formats.js').StructuredCloneValue}
     */getValue(stateObj,currentPath){cov_1q9v2o2ncu().f[11]++;// eslint-disable-next-line @stylistic/max-len -- Long
const root=(/** @type {HTMLDivElement & {$getTypeRoot: TypeRootGetter}} */cov_1q9v2o2ncu().s[26]++,typesHolder.$getTypeRoot());cov_1q9v2o2ncu().s[27]++;return types.getValueForRoot(/** @type {HTMLDivElement} */root,{typeNamespace,format:(/** @type {import('./formats.js').AvailableFormat} */formatChoices.value),formats,types,...stateObj},currentPath);},/**
     * @returns {string}
     */getType(){cov_1q9v2o2ncu().f[12]++;// eslint-disable-next-line @stylistic/max-len -- Long
const root=(/** @type {HTMLDivElement & {$getTypeRoot: TypeRootGetter}} */cov_1q9v2o2ncu().s[28]++,typesHolder.$getTypeRoot());cov_1q9v2o2ncu().s[29]++;return Types.getTypeForRoot(/** @type {HTMLDivElement} */root);},/**
     * @returns {boolean}
     */validValuesSet(){cov_1q9v2o2ncu().f[13]++;// eslint-disable-next-line @stylistic/max-len -- Long
const root=(/** @type {HTMLDivElement & {$getTypeRoot: TypeRootGetter}} */cov_1q9v2o2ncu().s[30]++,typesHolder.$getTypeRoot());const form=(/** @type {HTMLFormElement} */ /** @type {Element} */cov_1q9v2o2ncu().s[31]++,root.closest('form'));cov_1q9v2o2ncu().s[32]++;return Types.validValuesSet({form,typeNamespace});},/** @type {SetValue} */async setValue(value,stateObj){cov_1q9v2o2ncu().f[14]++;const rootEditUI=(/** @type {HTMLDivElement} */cov_1q9v2o2ncu().s[33]++,(await formats.getControlsForFormatAndValue(types,/** @type {import('./formats.js').AvailableFormat} */formatChoices.value,value,stateObj)).rootUI);const type=(cov_1q9v2o2ncu().s[34]++,Types.getTypeForRoot(rootEditUI));// eslint-disable-next-line @stylistic/max-len -- Long
const sel=(/** @type {HTMLDivElement & {$getTypeSelect: TypeSelectGetter}} */cov_1q9v2o2ncu().s[35]++,typesHolder.$getTypeSelect());// eslint-disable-next-line @stylistic/max-len -- Long
/** @type {HTMLSelectElement & {$addTypeAndEditUI: import('./typeChoices.js').AddTypeAndEditUI}} */cov_1q9v2o2ncu().s[36]++;sel.$addTypeAndEditUI({type,editUI:rootEditUI});}};}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,