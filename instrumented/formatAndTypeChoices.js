function cov_1q9v2o2ncu(){var path="/Users/brett/jsoe/src/formatAndTypeChoices.js";var hash="befa60a09ff66524f94c637d070100f47b8a7151";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/formatAndTypeChoices.js",statementMap:{"0":{start:{line:26,column:41},end:{line:66,column:1}},"1":{start:{line:29,column:20},end:{line:29,column:45}},"2":{start:{line:31,column:2},end:{line:65,column:40}},"3":{start:{line:48,column:8},end:{line:54,column:11}},"4":{start:{line:58,column:4},end:{line:58,column:45}},"5":{start:{line:63,column:4},end:{line:63,column:24}},"6":{start:{line:64,column:4},end:{line:64,column:16}},"7":{start:{line:129,column:17},end:{line:133,column:27}},"8":{start:{line:134,column:54},end:{line:227,column:6}},"9":{start:{line:174,column:8},end:{line:181,column:9}},"10":{start:{line:175,column:22},end:{line:177,column:12}},"11":{start:{line:176,column:12},end:{line:176,column:52}},"12":{start:{line:178,column:10},end:{line:178,column:52}},"13":{start:{line:179,column:15},end:{line:181,column:9}},"14":{start:{line:180,column:10},end:{line:180,column:35}},"15":{start:{line:182,column:8},end:{line:182,column:50}},"16":{start:{line:189,column:8},end:{line:189,column:40}},"17":{start:{line:190,column:25},end:{line:190,column:56}},"18":{start:{line:191,column:8},end:{line:211,column:35}},"19":{start:{line:216,column:8},end:{line:222,column:30}},"20":{start:{line:241,column:4},end:{line:258,column:7}},"21":{start:{line:247,column:8},end:{line:247,column:74}},"22":{start:{line:254,column:8},end:{line:256,column:10}},"23":{start:{line:261,column:17},end:{line:263,column:15}},"24":{start:{line:265,column:2},end:{line:278,column:29}},"25":{start:{line:280,column:2},end:{line:359,column:4}},"26":{start:{line:298,column:82},end:{line:300,column:22}},"27":{start:{line:301,column:6},end:{line:309,column:22}},"28":{start:{line:317,column:82},end:{line:319,column:22}},"29":{start:{line:320,column:6},end:{line:320,column:72}},"30":{start:{line:328,column:82},end:{line:330,column:22}},"31":{start:{line:332,column:31},end:{line:332,column:53}},"32":{start:{line:334,column:6},end:{line:334,column:57}},"33":{start:{line:340,column:8},end:{line:347,column:17}},"34":{start:{line:349,column:19},end:{line:349,column:51}},"35":{start:{line:351,column:85},end:{line:353,column:24}},"36":{start:{line:355,column:106},end:{line:357,column:54}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:26,column:41},end:{line:26,column:42}},loc:{start:{line:28,column:11},end:{line:66,column:1}},line:28},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:20},end:{line:47,column:21}},loc:{start:{line:47,column:37},end:{line:55,column:7}},line:47},"2":{name:"(anonymous_2)",decl:{start:{line:57,column:9},end:{line:57,column:10}},loc:{start:{line:57,column:33},end:{line:59,column:3}},line:57},"3":{name:"(anonymous_3)",decl:{start:{line:59,column:12},end:{line:59,column:13}},loc:{start:{line:62,column:7},end:{line:65,column:3}},line:62},"4":{name:"formatAndTypeChoices",decl:{start:{line:116,column:22},end:{line:116,column:42}},loc:{start:{line:128,column:3},end:{line:360,column:1}},line:128},"5":{name:"(anonymous_5)",decl:{start:{line:173,column:6},end:{line:173,column:7}},loc:{start:{line:173,column:60},end:{line:183,column:7}},line:173},"6":{name:"(anonymous_6)",decl:{start:{line:175,column:50},end:{line:175,column:51}},loc:{start:{line:175,column:62},end:{line:177,column:11}},line:175},"7":{name:"(anonymous_7)",decl:{start:{line:188,column:6},end:{line:188,column:7}},loc:{start:{line:188,column:44},end:{line:212,column:7}},line:188},"8":{name:"(anonymous_8)",decl:{start:{line:215,column:6},end:{line:215,column:7}},loc:{start:{line:215,column:22},end:{line:223,column:7}},line:215},"9":{name:"(anonymous_9)",decl:{start:{line:246,column:6},end:{line:246,column:7}},loc:{start:{line:246,column:22},end:{line:248,column:7}},line:246},"10":{name:"(anonymous_10)",decl:{start:{line:253,column:6},end:{line:253,column:7}},loc:{start:{line:253,column:24},end:{line:257,column:7}},line:253},"11":{name:"(anonymous_11)",decl:{start:{line:296,column:4},end:{line:296,column:5}},loc:{start:{line:296,column:37},end:{line:310,column:5}},line:296},"12":{name:"(anonymous_12)",decl:{start:{line:315,column:4},end:{line:315,column:5}},loc:{start:{line:315,column:15},end:{line:321,column:5}},line:315},"13":{name:"(anonymous_13)",decl:{start:{line:326,column:4},end:{line:326,column:5}},loc:{start:{line:326,column:22},end:{line:335,column:5}},line:326},"14":{name:"(anonymous_14)",decl:{start:{line:338,column:4},end:{line:338,column:5}},loc:{start:{line:338,column:37},end:{line:358,column:5}},line:338}},branchMap:{"0":{loc:{start:{line:26,column:42},end:{line:28,column:6}},type:"default-arg",locations:[{start:{line:28,column:4},end:{line:28,column:6}}],line:26},"1":{loc:{start:{line:27,column:56},end:{line:27,column:75}},type:"default-arg",locations:[{start:{line:27,column:70},end:{line:27,column:75}}],line:27},"2":{loc:{start:{line:29,column:20},end:{line:29,column:45}},type:"binary-expr",locations:[{start:{line:29,column:20},end:{line:29,column:27}},{start:{line:29,column:31},end:{line:29,column:45}}],line:29},"3":{loc:{start:{line:33,column:8},end:{line:35,column:52}},type:"cond-expr",locations:[{start:{line:34,column:8},end:{line:34,column:10}},{start:{line:35,column:8},end:{line:35,column:52}}],line:33},"4":{loc:{start:{line:38,column:16},end:{line:38,column:64}},type:"binary-expr",locations:[{start:{line:38,column:17},end:{line:38,column:33}},{start:{line:38,column:37},end:{line:38,column:47}},{start:{line:38,column:52},end:{line:38,column:64}}],line:38},"5":{loc:{start:{line:40,column:8},end:{line:45,column:10}},type:"cond-expr",locations:[{start:{line:41,column:8},end:{line:44,column:9}},{start:{line:45,column:8},end:{line:45,column:10}}],line:40},"6":{loc:{start:{line:43,column:18},end:{line:43,column:48}},type:"binary-expr",locations:[{start:{line:43,column:18},end:{line:43,column:34}},{start:{line:43,column:38},end:{line:43,column:48}}],line:43},"7":{loc:{start:{line:46,column:8},end:{line:56,column:10}},type:"cond-expr",locations:[{start:{line:47,column:8},end:{line:55,column:8}},{start:{line:56,column:8},end:{line:56,column:10}}],line:46},"8":{loc:{start:{line:51,column:20},end:{line:53,column:23}},type:"cond-expr",locations:[{start:{line:52,column:14},end:{line:52,column:68}},{start:{line:53,column:14},end:{line:53,column:23}}],line:51},"9":{loc:{start:{line:52,column:14},end:{line:52,column:68}},type:"cond-expr",locations:[{start:{line:52,column:31},end:{line:52,column:56}},{start:{line:52,column:59},end:{line:52,column:68}}],line:52},"10":{loc:{start:{line:122,column:2},end:{line:122,column:21}},type:"default-arg",locations:[{start:{line:122,column:16},end:{line:122,column:21}}],line:122},"11":{loc:{start:{line:123,column:2},end:{line:123,column:24}},type:"default-arg",locations:[{start:{line:123,column:20},end:{line:123,column:24}}],line:123},"12":{loc:{start:{line:126,column:2},end:{line:126,column:25}},type:"default-arg",locations:[{start:{line:126,column:12},end:{line:126,column:25}}],line:126},"13":{loc:{start:{line:127,column:2},end:{line:127,column:21}},type:"default-arg",locations:[{start:{line:127,column:10},end:{line:127,column:21}}],line:127},"14":{loc:{start:{line:129,column:17},end:{line:133,column:27}},type:"cond-expr",locations:[{start:{line:130,column:6},end:{line:130,column:14}},{start:{line:131,column:6},end:{line:133,column:27}}],line:129},"15":{loc:{start:{line:129,column:17},end:{line:129,column:61}},type:"binary-expr",locations:[{start:{line:129,column:17},end:{line:129,column:32}},{start:{line:129,column:36},end:{line:129,column:43}},{start:{line:129,column:47},end:{line:129,column:61}}],line:129},"16":{loc:{start:{line:131,column:6},end:{line:133,column:27}},type:"cond-expr",locations:[{start:{line:132,column:8},end:{line:132,column:21}},{start:{line:133,column:8},end:{line:133,column:27}}],line:131},"17":{loc:{start:{line:174,column:8},end:{line:181,column:9}},type:"if",locations:[{start:{line:174,column:8},end:{line:181,column:9}},{start:{line:179,column:15},end:{line:181,column:9}}],line:174},"18":{loc:{start:{line:178,column:31},end:{line:178,column:51}},type:"cond-expr",locations:[{start:{line:178,column:44},end:{line:178,column:45}},{start:{line:178,column:48},end:{line:178,column:51}}],line:178},"19":{loc:{start:{line:179,column:15},end:{line:181,column:9}},type:"if",locations:[{start:{line:179,column:15},end:{line:181,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:179},"20":{loc:{start:{line:206,column:25},end:{line:210,column:23}},type:"cond-expr",locations:[{start:{line:207,column:14},end:{line:209,column:13}},{start:{line:210,column:14},end:{line:210,column:23}}],line:206},"21":{loc:{start:{line:261,column:17},end:{line:263,column:15}},type:"cond-expr",locations:[{start:{line:262,column:6},end:{line:262,column:53}},{start:{line:263,column:6},end:{line:263,column:15}}],line:261},"22":{loc:{start:{line:275,column:19},end:{line:277,column:64}},type:"cond-expr",locations:[{start:{line:276,column:8},end:{line:276,column:17}},{start:{line:277,column:8},end:{line:277,column:64}}],line:275}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},b:{"0":[0],"1":[0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0],"11":[0],"12":[0],"13":[0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"befa60a09ff66524f94c637d070100f47b8a7151"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1q9v2o2ncu=function(){return actualCoverage;};}return actualCoverage;}cov_1q9v2o2ncu();import{jml}from'./vendor-imports.js';import{buildTypeChoices}from'./typeChoices.js';import Types from'./types.js';import Formats from'./formats.js';import{$e,DOM}from'./utils/templateUtils.js';/**
 * @callback TypeRootGetter
 * @returns {HTMLDivElement|null}
 */ /**
 * Defaults to structured cloning.
 * @todo Compose from format metadata, so can make user customizable.
 * @param {object} cfg
 * @param {string[]} [cfg.schemas]
 * @param {string} [cfg.selectedSchema]
 * @param {boolean} [cfg.hasKeyPath] Whether or not a key path is expected; if
 *   true, an indexedDB key is not allowed here as a key does not support
 *   the object type which is needed for a key path.
 * @param {boolean} [cfg.arbitraryJS] Whether to allow the choice of
 *   arbitrary JavaScript
 * @param {boolean} [cfg.preselectSchema] Whether to preselect schema
 * @returns {DocumentFragment}
 */cov_1q9v2o2ncu().s[0]++;export const getFormatAndSchemaChoices=({schemas,selectedSchema,hasKeyPath,preselectSchema,arbitraryJS=(cov_1q9v2o2ncu().b[1][0]++,false)}=(cov_1q9v2o2ncu().b[0][0]++,{}))=>{cov_1q9v2o2ncu().f[0]++;const hasSchema=(cov_1q9v2o2ncu().s[1]++,(cov_1q9v2o2ncu().b[2][0]++,schemas)&&(cov_1q9v2o2ncu().b[2][1]++,schemas.length));// eslint-disable-next-line @stylistic/max-len -- Long
cov_1q9v2o2ncu().s[2]++;return/** @type {[optText: string, opts: {value: import('./formats.js').AvailableFormat, selected?: boolean}][]} */[['JSON only',{value:'json'}],...(hasKeyPath?(cov_1q9v2o2ncu().b[3][0]++,[]):(cov_1q9v2o2ncu().b[3][1]++,[['IndexedDB key',{value:'indexedDBKey'}]])),['Structured Clone (via Typeson JSON)',{value:'structuredCloning',selected:((cov_1q9v2o2ncu().b[4][0]++,!preselectSchema)||(cov_1q9v2o2ncu().b[4][1]++,!hasSchema))&&(cov_1q9v2o2ncu().b[4][2]++,!arbitraryJS)}],...(arbitraryJS?(cov_1q9v2o2ncu().b[5][0]++,[['Arbitrary JavaScript Object',{value:'arbitraryJS',selected:(cov_1q9v2o2ncu().b[6][0]++,!preselectSchema)||(cov_1q9v2o2ncu().b[6][1]++,!hasSchema)}]]):(cov_1q9v2o2ncu().b[5][1]++,[])),...(hasSchema?(cov_1q9v2o2ncu().b[7][0]++,schemas.map((schema,idx)=>{cov_1q9v2o2ncu().f[1]++;cov_1q9v2o2ncu().s[3]++;return[`Schema: ${schema}`,{value:'schema',dataset:{schema},selected:preselectSchema?(cov_1q9v2o2ncu().b[8][0]++,selectedSchema?(cov_1q9v2o2ncu().b[9][0]++,schema===selectedSchema):(cov_1q9v2o2ncu().b[9][1]++,idx===0)):(cov_1q9v2o2ncu().b[8][1]++,undefined)}];})):(cov_1q9v2o2ncu().b[7][1]++,[]))].map(([optText,optAtts])=>{cov_1q9v2o2ncu().f[2]++;cov_1q9v2o2ncu().s[4]++;return jml('option',optAtts,[optText]);}).reduce((frag,option)=>{cov_1q9v2o2ncu().f[3]++;cov_1q9v2o2ncu().s[5]++;frag.append(option);cov_1q9v2o2ncu().s[6]++;return frag;},document.createDocumentFragment());};/**
 * @callback SetValue
 * @param {import('./formats.js').StructuredCloneValue} value
 * @param {import('./types.js').StateObject} stateObj
 * @returns {Promise<void>}
 */ /**
 * @typedef {import('./formats/schema.js').ZodexSchema} ZodexSchema
 */ /**
 * Builds a selector and container for types.
 * @param {object} cfg
 * @param {string[]} [cfg.schemas] The schema names
 * @param {(schema: string) => Promise<ZodexSchema>} [cfg.getSchemaContent] The
 *    schema content retriever
 * @param {boolean} [cfg.hasValue] Set to `true` if you are supplying
 *   your own value. If `false` and `hasKeyPath` is `true`,
 *   will initialize with an object.
 * @param {boolean} [cfg.singleValue] (NOT IN USE)
 * @param {boolean} [cfg.hasKeyPath] If this is set (because there is a keyPath
 *   to be found within the object) and `hasValue` is true, an object type
 *   will be set and required at the root level. This option will also
 *   prevent selection of indexedDB key at root (since a key cannot be a
 *   plain object).
 * @param {boolean} [cfg.arbitraryJS] Whether to allow the choice of
 *   arbitrary JavaScript
 * @param {string} [cfg.typeNamespace] Used to prevent conflicts with other
 *   instances of typeChoices on the page
 * @param {string} [cfg.selectedSchema]
 * @param {import('./formats.js').default} [cfg.formats]
 * @param {import('./types.js').default} [cfg.types]
 * @param {boolean} [cfg.preselectSchema]
 * @returns {Promise<{
 *   formatChoices: FormatChoices,
 *   typesHolder: TypesHolder,
 *   domArray: [formatChoices: FormatChoices, typesHolder: TypesHolder],
 *   getValue: (stateObj: import('./types.js').StateObject,
 *     currentPath: string) => import('./formats.js').StructuredCloneValue,
 *   getType: () => string,
 *   validValuesSet: () => boolean,
 *   setValue: SetValue,
 *   formats: import('./formats.js').default,
 *   types: import('./types.js').default
 * }>} The selector for types and the container for them. Both should be
 *   added to the page.
 */export async function formatAndTypeChoices({schemas,getSchemaContent,hasValue,singleValue,hasKeyPath,arbitraryJS=(cov_1q9v2o2ncu().b[10][0]++,false),preselectSchema=(cov_1q9v2o2ncu().b[11][0]++,true),typeNamespace,selectedSchema,formats=(cov_1q9v2o2ncu().b[12][0]++,new Formats()),types=(cov_1q9v2o2ncu().b[13][0]++,new Types())}){cov_1q9v2o2ncu().f[4]++;const format=(cov_1q9v2o2ncu().s[7]++,(cov_1q9v2o2ncu().b[15][0]++,preselectSchema)&&(cov_1q9v2o2ncu().b[15][1]++,schemas)&&(cov_1q9v2o2ncu().b[15][2]++,schemas.length)?(cov_1q9v2o2ncu().b[14][0]++,'schema'):(cov_1q9v2o2ncu().b[14][1]++,arbitraryJS?(cov_1q9v2o2ncu().b[16][0]++,'arbitraryJS'):(cov_1q9v2o2ncu().b[16][1]++,'structuredCloning')));const formatChoices=(/** @type {FormatChoices} */cov_1q9v2o2ncu().s[8]++,jml('select',{class:'formatChoices',hidden:singleValue,// is: 'main-type-choices',
$custom:{/**
       * Sets the desired format and rebuilds the type choices.
       * @callback SetFormat
       * @param {{
       *   valueFormat?: import('./formats.js').AvailableFormat,
       *   autoTrigger: boolean,
       *   schema?: string
       * }} cfg
       * @this {HTMLSelectElement & {
       *   $buildTypeChoices: TypeChoiceBuilder
       * }}
       * @returns {Promise<void>}
       */ /**
       * Rebuilds the type choices.
       * @callback TypeChoiceBuilder
       * @param {boolean} [autoTrigger]
       * @this {HTMLSelectElement & {
       *   $buildTypeChoices: TypeChoiceBuilder
       * }}
       * @returns {Promise<void>}
       */ /**
       * @typedef {HTMLSelectElement & {
       *   $setFormat: SetFormat,
       *   $buildTypeChoices: TypeChoiceBuilder
       * }} FormatChoices
       */ /**
       * @type {SetFormat}
       */async $setFormat({valueFormat,autoTrigger,schema}){cov_1q9v2o2ncu().f[5]++;cov_1q9v2o2ncu().s[9]++;if(schema){cov_1q9v2o2ncu().b[17][0]++;const idx=(cov_1q9v2o2ncu().s[10]++,[...this.options].findIndex(option=>{cov_1q9v2o2ncu().f[6]++;cov_1q9v2o2ncu().s[11]++;return option.dataset.schema===schema;}));cov_1q9v2o2ncu().s[12]++;this.selectedIndex=idx===-1?(cov_1q9v2o2ncu().b[18][0]++,0):(cov_1q9v2o2ncu().b[18][1]++,idx);}else{cov_1q9v2o2ncu().b[17][1]++;cov_1q9v2o2ncu().s[13]++;if(valueFormat){cov_1q9v2o2ncu().b[19][0]++;cov_1q9v2o2ncu().s[14]++;this.value=valueFormat;}else{cov_1q9v2o2ncu().b[19][1]++;}}cov_1q9v2o2ncu().s[15]++;await this.$buildTypeChoices(autoTrigger);},/**
       * @type {TypeChoiceBuilder}
       */async $buildTypeChoices(autoTrigger){cov_1q9v2o2ncu().f[7]++;cov_1q9v2o2ncu().s[16]++;DOM.removeChildren(typesHolder);const{schema}=(cov_1q9v2o2ncu().s[17]++,this.selectedOptions[0].dataset);cov_1q9v2o2ncu().s[18]++;jml({'#':buildTypeChoices({autoTrigger,topRoot:(/** @type {HTMLDivElement} */$e(typesHolder,'div[data-type]')),// resultType: 'both',
format:(/** @type {import('./formats.js').AvailableFormat} */this.value),formats,types,typeNamespace,requireObject:hasKeyPath,objectHasValue:hasValue,schema,schemaContent:schema?(cov_1q9v2o2ncu().b[20][0]++,await getSchemaContent?.(/** @type {string} */schema)):(cov_1q9v2o2ncu().b[20][1]++,undefined)}).domArray},typesHolder);}},$on:{async change(){cov_1q9v2o2ncu().f[8]++;cov_1q9v2o2ncu().s[19]++;await(/**
         * @type {HTMLSelectElement & {
         *   $buildTypeChoices: TypeChoiceBuilder
         * }}
         */this.$buildTypeChoices());}}},[getFormatAndSchemaChoices({schemas,hasKeyPath,selectedSchema,arbitraryJS,preselectSchema})]));/**
   * @callback TypeSelectGetter
   * @returns {HTMLSelectElement|null}
   */ /**
   * @typedef {HTMLDivElement} TypesHolder
   * @property {TypeRootGetter} $getTypeRoot
   * @property {TypeSelectGetter} $getTypeSelect
   */const typesHolder=(cov_1q9v2o2ncu().s[20]++,jml('div',{class:'typesHolder',$custom:{/**
       * @type {TypeRootGetter}
       * @this {HTMLDivElement}
       */$getTypeRoot(){cov_1q9v2o2ncu().f[9]++;cov_1q9v2o2ncu().s[21]++;return/** @type {HTMLDivElement} */$e(this,'div[data-type]');},/**
       * @type {TypeSelectGetter}
       * @this {HTMLSelectElement}
       */$getTypeSelect(){cov_1q9v2o2ncu().f[10]++;cov_1q9v2o2ncu().s[22]++;return/** @type {HTMLSelectElement} */$e(this,`.typeChoices-${typeNamespace}`);}}}));const schema=(cov_1q9v2o2ncu().s[23]++,format==='schema'?(cov_1q9v2o2ncu().b[21][0]++,formatChoices.selectedOptions[0].dataset.schema):(cov_1q9v2o2ncu().b[21][1]++,undefined));cov_1q9v2o2ncu().s[24]++;jml({'#':buildTypeChoices({// resultType: 'both',
topRoot:(/** @type {HTMLDivElement} */$e(typesHolder,'div[data-type]')),format,formats,types,typeNamespace,requireObject:hasKeyPath,objectHasValue:hasValue,schema,schemaContent:schema===undefined?(cov_1q9v2o2ncu().b[22][0]++,undefined):(cov_1q9v2o2ncu().b[22][1]++,await getSchemaContent?.(/** @type {string} */schema))}).domArray},typesHolder);cov_1q9v2o2ncu().s[25]++;return{formats,types,formatChoices,typesHolder,// Easier for Jamilih
domArray:[formatChoices,typesHolder],// Normal API
/**
     * @param {import('./types.js').StateObject} [stateObj] Will
     *   auto-set `typeNamespace` and `format`
     * @param {string} [currentPath]
     * @returns {import('./formats.js').StructuredCloneValue}
     */getValue(stateObj,currentPath){cov_1q9v2o2ncu().f[11]++;// eslint-disable-next-line @stylistic/max-len -- Long
const root=(/** @type {HTMLDivElement & {$getTypeRoot: TypeRootGetter}} */cov_1q9v2o2ncu().s[26]++,typesHolder.$getTypeRoot());cov_1q9v2o2ncu().s[27]++;return types.getValueForRoot(/** @type {HTMLDivElement} */root,{typeNamespace,format:(/** @type {import('./formats.js').AvailableFormat} */formatChoices.value),formats,types,...stateObj},currentPath);},/**
     * @returns {string}
     */getType(){cov_1q9v2o2ncu().f[12]++;// eslint-disable-next-line @stylistic/max-len -- Long
const root=(/** @type {HTMLDivElement & {$getTypeRoot: TypeRootGetter}} */cov_1q9v2o2ncu().s[28]++,typesHolder.$getTypeRoot());cov_1q9v2o2ncu().s[29]++;return Types.getTypeForRoot(/** @type {HTMLDivElement} */root);},/**
     * @returns {boolean}
     */validValuesSet(){cov_1q9v2o2ncu().f[13]++;// eslint-disable-next-line @stylistic/max-len -- Long
const root=(/** @type {HTMLDivElement & {$getTypeRoot: TypeRootGetter}} */cov_1q9v2o2ncu().s[30]++,typesHolder.$getTypeRoot());const form=(/** @type {HTMLFormElement} */ /** @type {Element} */cov_1q9v2o2ncu().s[31]++,root.closest('form'));cov_1q9v2o2ncu().s[32]++;return Types.validValuesSet({form,typeNamespace});},/** @type {SetValue} */async setValue(value,stateObj){cov_1q9v2o2ncu().f[14]++;const rootEditUI=(/** @type {HTMLDivElement} */cov_1q9v2o2ncu().s[33]++,(await formats.getControlsForFormatAndValue(types,/** @type {import('./formats.js').AvailableFormat} */formatChoices.value,value,stateObj)).rootUI);const type=(cov_1q9v2o2ncu().s[34]++,Types.getTypeForRoot(rootEditUI));// eslint-disable-next-line @stylistic/max-len -- Long
const sel=(/** @type {HTMLDivElement & {$getTypeSelect: TypeSelectGetter}} */cov_1q9v2o2ncu().s[35]++,typesHolder.$getTypeSelect());// eslint-disable-next-line @stylistic/max-len -- Long
/** @type {HTMLSelectElement & {$addTypeAndEditUI: import('./typeChoices.js').AddTypeAndEditUI}} */cov_1q9v2o2ncu().s[36]++;sel.$addTypeAndEditUI({type,editUI:rootEditUI});}};}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,