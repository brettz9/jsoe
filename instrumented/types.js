function cov_pmr8wb3j7(){var path="/Users/brett/jsoe/src/types.js";var hash="3d0c3570bb12ed9f3a9dbe9060c7353152c5844c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/types.js",statementMap:{"0":{start:{line:68,column:42},end:{line:85,column:1}},"1":{start:{line:69,column:19},end:{line:69,column:52}},"2":{start:{line:70,column:2},end:{line:74,column:3}},"3":{start:{line:71,column:4},end:{line:73,column:6}},"4":{start:{line:75,column:2},end:{line:77,column:3}},"5":{start:{line:76,column:4},end:{line:76,column:60}},"6":{start:{line:78,column:2},end:{line:82,column:3}},"7":{start:{line:79,column:4},end:{line:81,column:6}},"8":{start:{line:84,column:2},end:{line:84,column:59}},"9":{start:{line:442,column:4},end:{line:442,column:33}},"10":{start:{line:445,column:4},end:{line:445,column:49}},"11":{start:{line:451,column:4},end:{line:571,column:6}},"12":{start:{line:579,column:25},end:{line:589,column:5}},"13":{start:{line:580,column:6},end:{line:588,column:9}},"14":{start:{line:581,column:8},end:{line:587,column:11}},"15":{start:{line:591,column:4},end:{line:601,column:6}},"16":{start:{line:610,column:4},end:{line:610,column:23}},"17":{start:{line:611,column:4},end:{line:630,column:7}},"18":{start:{line:612,column:49},end:{line:612,column:52}},"19":{start:{line:613,column:58},end:{line:613,column:65}},"20":{start:{line:614,column:6},end:{line:629,column:7}},"21":{start:{line:615,column:8},end:{line:628,column:11}},"22":{start:{line:618,column:10},end:{line:620,column:11}},"23":{start:{line:619,column:12},end:{line:619,column:39}},"24":{start:{line:621,column:36},end:{line:621,column:56}},"25":{start:{line:622,column:10},end:{line:627,column:13}},"26":{start:{line:623,column:12},end:{line:625,column:13}},"27":{start:{line:624,column:14},end:{line:624,column:50}},"28":{start:{line:626,column:12},end:{line:626,column:63}},"29":{start:{line:642,column:4},end:{line:644,column:14}},"30":{start:{line:656,column:4},end:{line:656,column:42}},"31":{start:{line:662,column:6},end:{line:665,column:7}},"32":{start:{line:681,column:47},end:{line:684,column:5}},"33":{start:{line:686,column:4},end:{line:688,column:5}},"34":{start:{line:689,column:4},end:{line:689,column:36}},"35":{start:{line:694,column:4},end:{line:702,column:6}},"36":{start:{line:707,column:45},end:{line:707,column:74}},"37":{start:{line:708,column:4},end:{line:710,column:5}},"38":{start:{line:709,column:6},end:{line:709,column:18}},"39":{start:{line:711,column:4},end:{line:711,column:44}},"40":{start:{line:717,column:6},end:{line:717,column:31}},"41":{start:{line:720,column:20},end:{line:722,column:5}},"42":{start:{line:724,column:4},end:{line:726,column:5}},"43":{start:{line:725,column:6},end:{line:725,column:66}},"44":{start:{line:728,column:4},end:{line:731,column:6}},"45":{start:{line:732,column:4},end:{line:734,column:6}},"46":{start:{line:742,column:6},end:{line:744,column:7}},"47":{start:{line:745,column:4},end:{line:747,column:5}},"48":{start:{line:746,column:6},end:{line:746,column:62}},"49":{start:{line:749,column:4},end:{line:756,column:6}},"50":{start:{line:751,column:8},end:{line:753,column:10}},"51":{start:{line:765,column:47},end:{line:765,column:72}},"52":{start:{line:766,column:16},end:{line:782,column:7}},"53":{start:{line:783,column:48},end:{line:787,column:5}},"54":{start:{line:788,column:4},end:{line:793,column:5}},"55":{start:{line:789,column:26},end:{line:789,column:50}},"56":{start:{line:790,column:6},end:{line:792,column:9}},"57":{start:{line:791,column:8},end:{line:791,column:45}},"58":{start:{line:794,column:4},end:{line:794,column:16}},"59":{start:{line:800,column:4},end:{line:803,column:5}},"60":{start:{line:807,column:4},end:{line:812,column:7}},"61":{start:{line:808,column:52},end:{line:808,column:59}},"62":{start:{line:809,column:6},end:{line:811,column:7}},"63":{start:{line:810,column:8},end:{line:810,column:55}},"64":{start:{line:814,column:4},end:{line:816,column:5}},"65":{start:{line:815,column:6},end:{line:815,column:50}},"66":{start:{line:821,column:47},end:{line:821,column:72}},"67":{start:{line:823,column:4},end:{line:840,column:5}},"68":{start:{line:824,column:31},end:{line:824,column:64}},"69":{start:{line:825,column:26},end:{line:825,column:50}},"70":{start:{line:826,column:6},end:{line:831,column:8}},"71":{start:{line:836,column:6},end:{line:838,column:7}},"72":{start:{line:837,column:8},end:{line:837,column:37}},"73":{start:{line:839,column:6},end:{line:839,column:19}},"74":{start:{line:841,column:4},end:{line:841,column:16}},"75":{start:{line:846,column:47},end:{line:846,column:72}},"76":{start:{line:847,column:4},end:{line:849,column:5}},"77":{start:{line:848,column:6},end:{line:848,column:38}},"78":{start:{line:866,column:25},end:{line:868,column:12}},"79":{start:{line:869,column:4},end:{line:871,column:5}},"80":{start:{line:870,column:6},end:{line:870,column:66}},"81":{start:{line:872,column:28},end:{line:876,column:6}},"82":{start:{line:875,column:6},end:{line:875,column:72}},"83":{start:{line:877,column:32},end:{line:877,column:69}},"84":{start:{line:877,column:65},end:{line:877,column:68}},"85":{start:{line:879,column:20},end:{line:887,column:10}},"86":{start:{line:880,column:49},end:{line:880,column:55}},"87":{start:{line:881,column:41},end:{line:881,column:46}},"88":{start:{line:882,column:6},end:{line:885,column:7}},"89":{start:{line:883,column:8},end:{line:883,column:42}},"90":{start:{line:884,column:8},end:{line:884,column:32}},"91":{start:{line:886,column:6},end:{line:886,column:17}},"92":{start:{line:888,column:20},end:{line:890,column:46}},"93":{start:{line:890,column:19},end:{line:890,column:35}},"94":{start:{line:895,column:16},end:{line:895,column:20}},"95":{start:{line:896,column:16},end:{line:915,column:6}},"96":{start:{line:897,column:49},end:{line:897,column:55}},"97":{start:{line:898,column:26},end:{line:898,column:33}},"98":{start:{line:899,column:6},end:{line:901,column:7}},"99":{start:{line:900,column:8},end:{line:900,column:48}},"100":{start:{line:902,column:6},end:{line:910,column:22}},"101":{start:{line:911,column:6},end:{line:913,column:8}},"102":{start:{line:914,column:6},end:{line:914,column:19}},"103":{start:{line:917,column:20},end:{line:917,column:25}},"104":{start:{line:918,column:4},end:{line:931,column:5}},"105":{start:{line:919,column:6},end:{line:930,column:9}},"106":{start:{line:920,column:51},end:{line:920,column:57}},"107":{start:{line:921,column:35},end:{line:921,column:42}},"108":{start:{line:922,column:8},end:{line:924,column:10}},"109":{start:{line:925,column:8},end:{line:928,column:9}},"110":{start:{line:926,column:10},end:{line:926,column:27}},"111":{start:{line:927,column:10},end:{line:927,column:41}},"112":{start:{line:929,column:8},end:{line:929,column:21}},"113":{start:{line:932,column:17},end:{line:932,column:21}},"114":{start:{line:933,column:4},end:{line:1018,column:5}},"115":{start:{line:936,column:32},end:{line:936,column:37}},"116":{start:{line:938,column:38},end:{line:938,column:42}},"117":{start:{line:939,column:20},end:{line:939,column:43}},"118":{start:{line:940,column:6},end:{line:940,column:37}},"119":{start:{line:943,column:6},end:{line:968,column:7}},"120":{start:{line:944,column:51},end:{line:944,column:59}},"121":{start:{line:946,column:8},end:{line:948,column:9}},"122":{start:{line:949,column:8},end:{line:961,column:10}},"123":{start:{line:969,column:6},end:{line:971,column:7}},"124":{start:{line:970,column:8},end:{line:970,column:23}},"125":{start:{line:972,column:22},end:{line:972,column:28}},"126":{start:{line:973,column:6},end:{line:975,column:7}},"127":{start:{line:974,column:8},end:{line:974,column:29}},"128":{start:{line:977,column:6},end:{line:987,column:7}},"129":{start:{line:978,column:25},end:{line:982,column:9}},"130":{start:{line:983,column:8},end:{line:986,column:9}},"131":{start:{line:984,column:10},end:{line:984,column:33}},"132":{start:{line:985,column:10},end:{line:985,column:54}},"133":{start:{line:988,column:6},end:{line:1016,column:7}},"134":{start:{line:989,column:24},end:{line:991,column:9}},"135":{start:{line:992,column:8},end:{line:1015,column:9}},"136":{start:{line:993,column:26},end:{line:993,column:47}},"137":{start:{line:994,column:10},end:{line:1011,column:13}},"138":{start:{line:995,column:31},end:{line:997,column:13}},"139":{start:{line:1000,column:24},end:{line:1000,column:66}},"140":{start:{line:1001,column:30},end:{line:1001,column:46}},"141":{start:{line:1004,column:12},end:{line:1010,column:13}},"142":{start:{line:1007,column:50},end:{line:1009,column:65}},"143":{start:{line:1012,column:10},end:{line:1012,column:55}},"144":{start:{line:1014,column:10},end:{line:1014,column:53}},"145":{start:{line:1017,column:6},end:{line:1017,column:49}},"146":{start:{line:1019,column:4},end:{line:1019,column:40}},"147":{start:{line:1027,column:4},end:{line:1027,column:37}},"148":{start:{line:1032,column:0},end:{line:1034,column:2}},"149":{start:{line:1033,column:2},end:{line:1033,column:49}},"150":{start:{line:1037,column:0},end:{line:1068,column:2}},"151":{start:{line:1039,column:2},end:{line:1045,column:3}},"152":{start:{line:1044,column:4},end:{line:1044,column:17}},"153":{start:{line:1049,column:6},end:{line:1052,column:7}},"154":{start:{line:1054,column:2},end:{line:1067,column:4}},"155":{start:{line:1060,column:6},end:{line:1062,column:46}},"156":{start:{line:1076,column:2},end:{line:1077,column:62}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:68,column:42},end:{line:68,column:43}},loc:{start:{line:68,column:54},end:{line:85,column:1}},line:68},"1":{name:"(anonymous_1)",decl:{start:{line:441,column:2},end:{line:441,column:3}},loc:{start:{line:441,column:17},end:{line:631,column:3}},line:441},"2":{name:"(anonymous_2)",decl:{start:{line:579,column:25},end:{line:579,column:26}},loc:{start:{line:579,column:43},end:{line:589,column:5}},line:579},"3":{name:"(anonymous_3)",decl:{start:{line:580,column:27},end:{line:580,column:28}},loc:{start:{line:580,column:51},end:{line:588,column:7}},line:580},"4":{name:"(anonymous_4)",decl:{start:{line:611,column:48},end:{line:611,column:49}},loc:{start:{line:611,column:68},end:{line:630,column:5}},line:611},"5":{name:"(anonymous_5)",decl:{start:{line:615,column:47},end:{line:615,column:48}},loc:{start:{line:617,column:14},end:{line:628,column:9}},line:617},"6":{name:"(anonymous_6)",decl:{start:{line:622,column:27},end:{line:622,column:28}},loc:{start:{line:622,column:40},end:{line:627,column:11}},line:622},"7":{name:"(anonymous_7)",decl:{start:{line:639,column:2},end:{line:639,column:3}},loc:{start:{line:641,column:4},end:{line:645,column:3}},line:641},"8":{name:"(anonymous_8)",decl:{start:{line:655,column:2},end:{line:655,column:3}},loc:{start:{line:655,column:35},end:{line:657,column:3}},line:655},"9":{name:"(anonymous_9)",decl:{start:{line:660,column:2},end:{line:660,column:3}},loc:{start:{line:660,column:48},end:{line:677,column:3}},line:660},"10":{name:"(anonymous_10)",decl:{start:{line:680,column:2},end:{line:680,column:3}},loc:{start:{line:680,column:31},end:{line:690,column:3}},line:680},"11":{name:"(anonymous_11)",decl:{start:{line:693,column:2},end:{line:693,column:3}},loc:{start:{line:693,column:47},end:{line:703,column:3}},line:693},"12":{name:"(anonymous_12)",decl:{start:{line:706,column:2},end:{line:706,column:3}},loc:{start:{line:706,column:43},end:{line:712,column:3}},line:706},"13":{name:"(anonymous_13)",decl:{start:{line:715,column:2},end:{line:715,column:3}},loc:{start:{line:715,column:53},end:{line:735,column:3}},line:715},"14":{name:"(anonymous_14)",decl:{start:{line:738,column:2},end:{line:738,column:3}},loc:{start:{line:740,column:4},end:{line:757,column:3}},line:740},"15":{name:"(anonymous_15)",decl:{start:{line:750,column:52},end:{line:750,column:53}},loc:{start:{line:750,column:67},end:{line:754,column:7}},line:750},"16":{name:"(anonymous_16)",decl:{start:{line:760,column:2},end:{line:760,column:3}},loc:{start:{line:764,column:5},end:{line:795,column:3}},line:764},"17":{name:"(anonymous_17)",decl:{start:{line:790,column:44},end:{line:790,column:45}},loc:{start:{line:790,column:50},end:{line:792,column:7}},line:790},"18":{name:"(anonymous_18)",decl:{start:{line:798,column:2},end:{line:798,column:3}},loc:{start:{line:798,column:36},end:{line:817,column:3}},line:798},"19":{name:"(anonymous_19)",decl:{start:{line:807,column:47},end:{line:807,column:48}},loc:{start:{line:807,column:60},end:{line:812,column:5}},line:807},"20":{name:"(anonymous_20)",decl:{start:{line:820,column:2},end:{line:820,column:3}},loc:{start:{line:820,column:48},end:{line:842,column:3}},line:820},"21":{name:"(anonymous_21)",decl:{start:{line:845,column:2},end:{line:845,column:3}},loc:{start:{line:845,column:33},end:{line:850,column:3}},line:845},"22":{name:"(anonymous_22)",decl:{start:{line:862,column:2},end:{line:862,column:3}},loc:{start:{line:865,column:5},end:{line:1020,column:3}},line:865},"23":{name:"(anonymous_23)",decl:{start:{line:874,column:13},end:{line:874,column:14}},loc:{start:{line:874,column:25},end:{line:876,column:5}},line:874},"24":{name:"(anonymous_24)",decl:{start:{line:877,column:52},end:{line:877,column:53}},loc:{start:{line:877,column:65},end:{line:877,column:68}},line:877},"25":{name:"(anonymous_25)",decl:{start:{line:879,column:47},end:{line:879,column:48}},loc:{start:{line:879,column:66},end:{line:887,column:5}},line:879},"26":{name:"(anonymous_26)",decl:{start:{line:890,column:10},end:{line:890,column:11}},loc:{start:{line:890,column:19},end:{line:890,column:35}},line:890},"27":{name:"(anonymous_27)",decl:{start:{line:896,column:37},end:{line:896,column:38}},loc:{start:{line:896,column:64},end:{line:915,column:5}},line:896},"28":{name:"(anonymous_28)",decl:{start:{line:919,column:35},end:{line:919,column:36}},loc:{start:{line:919,column:62},end:{line:930,column:7}},line:919},"29":{name:"(anonymous_29)",decl:{start:{line:994,column:29},end:{line:994,column:30}},loc:{start:{line:994,column:67},end:{line:1011,column:11}},line:994},"30":{name:"(anonymous_30)",decl:{start:{line:1026,column:2},end:{line:1026,column:3}},loc:{start:{line:1026,column:23},end:{line:1028,column:3}},line:1026},"31":{name:"(anonymous_31)",decl:{start:{line:1032,column:23},end:{line:1032,column:24}},loc:{start:{line:1032,column:33},end:{line:1034,column:1}},line:1032},"32":{name:"(anonymous_32)",decl:{start:{line:1037,column:23},end:{line:1037,column:24}},loc:{start:{line:1037,column:66},end:{line:1068,column:1}},line:1037},"33":{name:"(anonymous_33)",decl:{start:{line:1057,column:22},end:{line:1057,column:23}},loc:{start:{line:1057,column:31},end:{line:1063,column:5}},line:1057},"34":{name:"escapeRegex",decl:{start:{line:1075,column:16},end:{line:1075,column:27}},loc:{start:{line:1075,column:34},end:{line:1078,column:1}},line:1075}},branchMap:{"0":{loc:{start:{line:70,column:2},end:{line:74,column:3}},type:"if",locations:[{start:{line:70,column:2},end:{line:74,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:70},"1":{loc:{start:{line:75,column:2},end:{line:77,column:3}},type:"if",locations:[{start:{line:75,column:2},end:{line:77,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:75},"2":{loc:{start:{line:78,column:2},end:{line:82,column:3}},type:"if",locations:[{start:{line:78,column:2},end:{line:82,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:78},"3":{loc:{start:{line:614,column:6},end:{line:629,column:7}},type:"if",locations:[{start:{line:614,column:6},end:{line:629,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:614},"4":{loc:{start:{line:618,column:10},end:{line:620,column:11}},type:"if",locations:[{start:{line:618,column:10},end:{line:620,column:11}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:618},"5":{loc:{start:{line:623,column:12},end:{line:625,column:13}},type:"if",locations:[{start:{line:623,column:12},end:{line:625,column:13}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:623},"6":{loc:{start:{line:686,column:4},end:{line:688,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:686},"7":{loc:{start:{line:708,column:4},end:{line:710,column:5}},type:"if",locations:[{start:{line:708,column:4},end:{line:710,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:708},"8":{loc:{start:{line:715,column:26},end:{line:715,column:51}},type:"default-arg",locations:[{start:{line:715,column:42},end:{line:715,column:51}}],line:715},"9":{loc:{start:{line:724,column:4},end:{line:726,column:5}},type:"if",locations:[{start:{line:724,column:4},end:{line:726,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:724},"10":{loc:{start:{line:724,column:8},end:{line:724,column:50}},type:"binary-expr",locations:[{start:{line:724,column:8},end:{line:724,column:21}},{start:{line:724,column:25},end:{line:724,column:50}}],line:724},"11":{loc:{start:{line:745,column:4},end:{line:747,column:5}},type:"if",locations:[{start:{line:745,column:4},end:{line:747,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:745},"12":{loc:{start:{line:766,column:16},end:{line:782,column:7}},type:"cond-expr",locations:[{start:{line:767,column:8},end:{line:774,column:7}},{start:{line:775,column:8},end:{line:782,column:7}}],line:766},"13":{loc:{start:{line:784,column:10},end:{line:786,column:29}},type:"cond-expr",locations:[{start:{line:785,column:10},end:{line:785,column:29}},{start:{line:786,column:10},end:{line:786,column:29}}],line:784},"14":{loc:{start:{line:788,column:4},end:{line:793,column:5}},type:"if",locations:[{start:{line:788,column:4},end:{line:793,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:788},"15":{loc:{start:{line:788,column:8},end:{line:788,column:37}},type:"binary-expr",locations:[{start:{line:788,column:8},end:{line:788,column:17}},{start:{line:788,column:21},end:{line:788,column:37}}],line:788},"16":{loc:{start:{line:800,column:4},end:{line:803,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:800},"17":{loc:{start:{line:809,column:6},end:{line:811,column:7}},type:"if",locations:[{start:{line:809,column:6},end:{line:811,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:809},"18":{loc:{start:{line:814,column:4},end:{line:816,column:5}},type:"if",locations:[{start:{line:814,column:4},end:{line:816,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:814},"19":{loc:{start:{line:823,column:4},end:{line:840,column:5}},type:"if",locations:[{start:{line:823,column:4},end:{line:840,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:823},"20":{loc:{start:{line:827,column:8},end:{line:830,column:32}},type:"cond-expr",locations:[{start:{line:828,column:12},end:{line:828,column:14}},{start:{line:830,column:12},end:{line:830,column:32}}],line:827},"21":{loc:{start:{line:830,column:12},end:{line:830,column:32}},type:"binary-expr",locations:[{start:{line:830,column:12},end:{line:830,column:19}},{start:{line:830,column:23},end:{line:830,column:32}}],line:830},"22":{loc:{start:{line:836,column:6},end:{line:838,column:7}},type:"if",locations:[{start:{line:836,column:6},end:{line:838,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:836},"23":{loc:{start:{line:847,column:4},end:{line:849,column:5}},type:"if",locations:[{start:{line:847,column:4},end:{line:849,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:847},"24":{loc:{start:{line:863,column:19},end:{line:863,column:40}},type:"default-arg",locations:[{start:{line:863,column:38},end:{line:863,column:40}}],line:863},"25":{loc:{start:{line:863,column:42},end:{line:863,column:57}},type:"default-arg",locations:[{start:{line:863,column:53},end:{line:863,column:57}}],line:863},"26":{loc:{start:{line:864,column:4},end:{line:864,column:19}},type:"default-arg",locations:[{start:{line:864,column:17},end:{line:864,column:19}}],line:864},"27":{loc:{start:{line:869,column:4},end:{line:871,column:5}},type:"if",locations:[{start:{line:869,column:4},end:{line:871,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:869},"28":{loc:{start:{line:882,column:6},end:{line:885,column:7}},type:"if",locations:[{start:{line:882,column:6},end:{line:885,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:882},"29":{loc:{start:{line:899,column:6},end:{line:901,column:7}},type:"if",locations:[{start:{line:899,column:6},end:{line:901,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:899},"30":{loc:{start:{line:902,column:20},end:{line:910,column:21}},type:"cond-expr",locations:[{start:{line:904,column:10},end:{line:909,column:9}},{start:{line:910,column:10},end:{line:910,column:21}}],line:902},"31":{loc:{start:{line:911,column:14},end:{line:913,column:7}},type:"binary-expr",locations:[{start:{line:911,column:14},end:{line:911,column:39}},{start:{line:911,column:43},end:{line:913,column:7}}],line:911},"32":{loc:{start:{line:911,column:22},end:{line:911,column:38}},type:"binary-expr",locations:[{start:{line:911,column:22},end:{line:911,column:33}},{start:{line:911,column:37},end:{line:911,column:38}}],line:911},"33":{loc:{start:{line:918,column:4},end:{line:931,column:5}},type:"if",locations:[{start:{line:918,column:4},end:{line:931,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:918},"34":{loc:{start:{line:922,column:16},end:{line:924,column:9}},type:"binary-expr",locations:[{start:{line:922,column:16},end:{line:922,column:46}},{start:{line:922,column:50},end:{line:924,column:9}}],line:922},"35":{loc:{start:{line:922,column:24},end:{line:922,column:45}},type:"binary-expr",locations:[{start:{line:922,column:24},end:{line:922,column:40}},{start:{line:922,column:44},end:{line:922,column:45}}],line:922},"36":{loc:{start:{line:925,column:8},end:{line:928,column:9}},type:"if",locations:[{start:{line:925,column:8},end:{line:928,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:925},"37":{loc:{start:{line:933,column:4},end:{line:1018,column:5}},type:"if",locations:[{start:{line:933,column:4},end:{line:1018,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:933},"38":{loc:{start:{line:946,column:8},end:{line:948,column:9}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:946},"39":{loc:{start:{line:950,column:10},end:{line:950,column:56}},type:"binary-expr",locations:[{start:{line:950,column:10},end:{line:950,column:35}},{start:{line:950,column:39},end:{line:950,column:51}},{start:{line:950,column:55},end:{line:950,column:56}}],line:950},"40":{loc:{start:{line:969,column:6},end:{line:971,column:7}},type:"if",locations:[{start:{line:969,column:6},end:{line:971,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:969},"41":{loc:{start:{line:973,column:6},end:{line:975,column:7}},type:"if",locations:[{start:{line:973,column:6},end:{line:975,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:973},"42":{loc:{start:{line:977,column:6},end:{line:987,column:7}},type:"if",locations:[{start:{line:977,column:6},end:{line:987,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:977},"43":{loc:{start:{line:977,column:10},end:{line:977,column:46}},type:"binary-expr",locations:[{start:{line:977,column:10},end:{line:977,column:19}},{start:{line:977,column:23},end:{line:977,column:46}}],line:977},"44":{loc:{start:{line:983,column:8},end:{line:986,column:9}},type:"if",locations:[{start:{line:983,column:8},end:{line:986,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:983},"45":{loc:{start:{line:988,column:6},end:{line:1016,column:7}},type:"if",locations:[{start:{line:988,column:6},end:{line:1016,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:988},"46":{loc:{start:{line:1004,column:12},end:{line:1010,column:13}},type:"if",locations:[{start:{line:1004,column:12},end:{line:1010,column:13}}],line:1004},"47":{loc:{start:{line:1005,column:14},end:{line:1005,column:70}},type:"binary-expr",locations:[{start:{line:1005,column:14},end:{line:1005,column:48}},{start:{line:1005,column:52},end:{line:1005,column:70}}],line:1005},"48":{loc:{start:{line:1033,column:16},end:{line:1033,column:47}},type:"cond-expr",locations:[{start:{line:1033,column:23},end:{line:1033,column:40}},{start:{line:1033,column:43},end:{line:1033,column:47}}],line:1033},"49":{loc:{start:{line:1039,column:2},end:{line:1045,column:3}},type:"if",locations:[{start:{line:1039,column:2},end:{line:1045,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:1039},"50":{loc:{start:{line:1039,column:6},end:{line:1042,column:29}},type:"binary-expr",locations:[{start:{line:1039,column:6},end:{line:1039,column:24}},{start:{line:1042,column:8},end:{line:1042,column:29}}],line:1039},"51":{loc:{start:{line:1051,column:8},end:{line:1051,column:79}},type:"cond-expr",locations:[{start:{line:1051,column:25},end:{line:1051,column:45}},{start:{line:1051,column:48},end:{line:1051,column:79}}],line:1051},"52":{loc:{start:{line:1060,column:13},end:{line:1062,column:45}},type:"binary-expr",locations:[{start:{line:1060,column:13},end:{line:1060,column:30}},{start:{line:1062,column:9},end:{line:1062,column:25}},{start:{line:1062,column:29},end:{line:1062,column:44}}],line:1060}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0],"7":[0,0],"8":[0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0],"25":[0],"26":[0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0],"39":[0,0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3d0c3570bb12ed9f3a9dbe9060c7353152c5844c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_pmr8wb3j7=function(){return actualCoverage;};}return actualCoverage;}cov_pmr8wb3j7();import Formats from'./formats.js';import{// jamilih
jml,// typeson-registry
Typeson,getJSONType,structuredCloningThrowing}from'./vendor-imports.js';import{$e,$$e}from'./utils/templateUtils.js';import nullType from'./fundamentalTypes/nullType.js';import trueType from'./subTypes/trueType.js';import falseType from'./subTypes/falseType.js';import nanType from'./fundamentalTypes/nanType.js';import blobHTMLType from'./subTypes/blobHTMLType.js';import booleanType from'./fundamentalTypes/booleanType.js';import numberType from'./fundamentalTypes/numberType.js';import bigintType from'./fundamentalTypes/bigintType.js';import bigintObjectType from'./fundamentalTypes/bigintObjectType.js';import stringType from'./fundamentalTypes/stringType.js';import arrayReferenceType from'./fundamentalTypes/arrayReferenceType.js';import objectReferenceType from'./fundamentalTypes/objectReferenceType.js';import arrayType from'./fundamentalTypes/arrayType.js';import tupleType from'./fundamentalTypes/tupleType.js';import objectType from'./fundamentalTypes/objectType.js';import recordType from'./fundamentalTypes/recordType.js';import dateType from'./fundamentalTypes/dateType.js';import enumType from'./fundamentalTypes/enumType.js';import setType from'./fundamentalTypes/setType.js';import mapType from'./fundamentalTypes/mapType.js';import literalType from'./fundamentalTypes/literalType.js';import undefinedType from'./fundamentalTypes/undefinedType.js';import voidType from'./fundamentalTypes/voidType.js';import regexpType from'./fundamentalTypes/regexpType.js';import BooleanObjectType from'./fundamentalTypes/BooleanObjectType.js';import NumberObjectType from'./fundamentalTypes/NumberObjectType.js';import StringObjectType from'./fundamentalTypes/StringObjectType.js';// import sparseUndefinedType from './fundamentalTypes/sparseUndefinedType.js';
import SpecialRealNumberSuperType from'./superTypes/SpecialRealNumberType.js';import SpecialNumberSuperType from'./superTypes/SpecialNumberType.js';import errorType from'./fundamentalTypes/errorType.js';import errorsSpecialType from'./superTypes/errorsSpecialType.js';import fileType from'./fundamentalTypes/fileType.js';import filelistType from'./fundamentalTypes/filelistType.js';import blobType from'./fundamentalTypes/blobType.js';import domexceptionType from'./fundamentalTypes/domexceptionType.js';import domrectType from'./superTypes/domrectType.js';import dompointType from'./superTypes/dompointType.js';import dommatrixType from'./superTypes/dommatrixType.js';import buffersourceType from'./superTypes/buffersourceType.js';import noneditableType from'./fundamentalTypes/noneditableType.js';import neverType from'./fundamentalTypes/neverType.js';import catchType from'./fundamentalTypes/catchType.js';import nativeEnumType from'./fundamentalTypes/nativeEnumType.js';// Todo: Reenable
// import symbolType from './fundamentalTypes/symbolType.js';
// import promiseType from './fundamentalTypes/promiseType.js';
// import functionType from './fundamentalTypes/functionType.js';
/**
 * Utility to retrieve the property value given a legend element.
 * @param {HTMLLegendElement} legend
 * @returns {string}
 */cov_pmr8wb3j7().s[0]++;export const getPropertyValueFromLegend=legend=>{cov_pmr8wb3j7().f[0]++;const propElem=(cov_pmr8wb3j7().s[1]++,$e(legend,'*[data-prop="true"]'));cov_pmr8wb3j7().s[2]++;if(!propElem){cov_pmr8wb3j7().b[0][0]++;cov_pmr8wb3j7().s[3]++;throw new Error('No property on the supplied legend element');}else{cov_pmr8wb3j7().b[0][1]++;}cov_pmr8wb3j7().s[4]++;if(propElem.nodeName.toLowerCase()==='input'){cov_pmr8wb3j7().b[1][0]++;cov_pmr8wb3j7().s[5]++;return/** @type {HTMLInputElement} */propElem.value;}else{cov_pmr8wb3j7().b[1][1]++;}cov_pmr8wb3j7().s[6]++;if(!propElem.textContent){cov_pmr8wb3j7().b[2][0]++;cov_pmr8wb3j7().s[7]++;throw new Error('No property with text present on the supplied legend element');}else{cov_pmr8wb3j7().b[2][1]++;}// 1-based to 0-based
cov_pmr8wb3j7().s[8]++;return String(Number.parseInt(propElem.textContent)-1);};/**
 * Any other possibilities than `div`?
 * @typedef {HTMLDivElement} RootElement
 */ /**
 * Utility to retrieve the type out of a type root element.
 * @callback GetTypeForRoot
 * @param {?RootElement} root
 * @returns {string} Why would it not exist?
 */ /**
 * Utility to get the value out of a type root element with a given
 *   state and path.
 * @callback GetValueForRoot
 * @param {RootElement} root
 * @param {StateObject} [stateObj]
 * @param {string} [currentPath]
 * @returns {StructuredCloneValue}
 */ /**
 * Utility to get the form control (e.g., input element) for a root.
 * @callback GetFormControlForRoot
 * @param {RootElement} root
 * @returns {null|
 *   HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|HTMLButtonElement}
 */ /**
 * Utility to get the value for a root using its ancestor and state.
 * @callback GetValueFromRootAncestor
 * @param {string|HTMLElement} selOrEl
 * @param {StateObject} [stateObj]
 * @returns {StructuredCloneValue}
 */ /**
 * @callback GetFormControlFromRootAncestor
 * @param {string|HTMLElement} selOrEl
 * @returns {null|HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|
 *   HTMLButtonElement}
 */ /**
 * @typedef {number} Integer
 */ /**
 * @callback GetOptionForType
 * @param {AvailableType} type
 * @param {import('./formatAndTypeChoices.js').ZodexSchema|
 *   undefined} [schemaContent]
 * @returns {[string, {value: AvailableType, title?: string}]}
 */ /**
 * @callback GetTypeOptionsForFormatAndState
 * @param {import('./formats.js').AvailableFormat} format
 * @param {string} [parserState]
 * @param {import('./formatAndTypeChoices.js').ZodexSchema|
 *   undefined} [schemaContent]
 * @param {import('./formatAndTypeChoices.js').ZodexSchema|
 *   undefined} [schemaOriginal]
 * @returns {{
 *   typeOptions: [string, {value: AvailableType, title?: string}][],
 *   schemaObjects: import('./formats/schema.js').ZodexSchema[]
 * }}
 */ /**
* @typedef {{
*   typeNamespace?: string,
*   "readonly"?: boolean,
*   format?: import('./formats.js').AvailableFormat,
*   formats?: import('./formats.js').default,
*   types?: Types,
*   error?: Error,
*   rootUI?: Element,
*   schema?: string,
*   schemaParent?: import('./formats/schema.js').ZodexSchema,
*   schemaContent?: import('./formats/schema.js').ZodexSchema,
*   specificSchema?: import('./formats/schema.js').ZodexSchema,
*   specificSchemas?: import('./formats/schema.js').ZodexSchema[],
*   paths?: {[currentPath: string]: {
*     referentPath: string,
*     expectArrayReferent: boolean
*   }},
*   handlingReference?: boolean
* }} StateObject
*/ /* eslint-disable jsdoc/valid-types -- readonly reserved */ /**
 * @typedef {(cfg: {
 *   readonly?: boolean,
 *   resultType?: "both"|"keys"|"values",
 *   typeNamespace?: string,
 *   type: AvailableType,
 *   topRoot?: RootElement,
 *   bringIntoFocus?: boolean|undefined,
 *   buildTypeChoices?: import('./typeChoices.js').BuildTypeChoices,
 *   format: import('./formats.js').AvailableFormat,
 *   schemaContent?: import('./formats/schema.js').ZodexSchema
 *   specificSchemaObject?: import('./formats/schema.js').ZodexSchema
 *   value: StructuredCloneValue,
 *   hasValue: boolean,
 *   replaced?: StructuredCloneValue,
 *   schemaFallingBack?: boolean
 * }) => HTMLElement} GetUIForModeAndType
 */ /* eslint-enable jsdoc/valid-types -- readonly reserved */ /**
 * @typedef {(cfg: {
 *   form: HTMLFormElement,
 *   typeNamespace?: string,
 *   keySelectClass?: string,
 * }) => boolean} ValidValuesSet
 */ /**
 * @typedef {(cfg: {
 *   topRoot: RootElement
 * }) => void} ValidateAllReferences
 */ /**
 * @typedef {(cfg: {
 *   type: AvailableType,
 *   root: RootElement,
 *   topRoot?: RootElement,
 *   avoidReport?: boolean
 * }) => boolean} Validate
 */ /**
 * @typedef {(cfg: {
 *   type: AvailableType,
 *   root: RootElement,
 *   value: StructuredCloneValue,
 * }) => void} SetValue
 */ /**
 * @typedef {(s: string, cfg: {
 *   format: import('./formats.js').AvailableFormat,
 *   state?: string,
 *   endMatchTypeObjs?: TypeObject[]
 *   firstRun?: boolean,
 *   rootHolder?: [
 *     type: string,
 *     parent: {[key: string]: any}|undefined,
 *     parentPath: string|number|undefined,
 *     path: string
 *   ][],
 *   parent?: {[key: string]: any},
 *   parentPath?: string|number,
 *   schemaObject?: import('./formatAndTypeChoices.js').ZodexSchema|undefined
 *   schemaOriginal?: import('./formatAndTypeChoices.js').ZodexSchema|undefined
 * }) => [
*   value: StructuredCloneValue,
*   remnant: string,
*   beginOnly: boolean,
*   assign: boolean
* ]} GetValueForString
*/ /**
 * @typedef {(
 *   info: {topRoot: HTMLDivElement}
 * ) => void} CustomValidateAllReferences
 */ /**
 * @typedef {import('./formats.js').StructuredCloneValue} StructuredCloneValue
 */ /**
 * @typedef {import('jamilih').JamilihArray} JamilihArray
 */ /**
 * @typedef {{
 *   format: import('./formats.js').AvailableFormat,
 *   match: boolean|RegExpMatchArray|null
 *   endMatchTypeObjs: TypeObject[],
 *   remnant: string,
 *   rootHolder: [
 *     type: string,
 *     parent: object|undefined,
 *     parentPath: string|number|undefined,
 *     path: string
 *   ][],
 *   parent?: object,
 *   parentPath?: string|number,
 *   types?: Types
 *   schemaObject?: import('./formatAndTypeChoices.js').ZodexSchema|undefined
 * }} RootInfo
 */ /**
 * @typedef {(
 *   info: {
*     root: HTMLDivElement,
*     value: StructuredCloneValue
*   }
* ) => void} TypeObjectSetValue
 */ /**
 * @typedef {(
 *   s: string, info?: RootInfo
 * ) => {
 *   value?: StructuredCloneValue,
 *   remnant?: string,
 *   assign?: false
 * }} ToValue
 */ /**
 * @typedef {object} TypeObject
 * @property {[
 *   string, {value?: AvailableType, title?: string}?
 * ]} option Creates the option HTML. May set an option `title` or `value`
 * @property {boolean} [array] Private context variable. Whether or not
 *   it is an array. Do not use in other types.
 * @property {boolean} [map] Private context variable. Whether or not
 *   it is a `Map`. Do not use in other types.
 * @property {boolean} [set] Private context variable. Whether or not
 *   it is a `Set`. Do not use in other types.
 * @property {boolean} [record] Private context variable. Whether or not
 *   it is a `Record`. Do not use in other types.
 * @property {boolean} [tuple] Private context variable. Whether or not
 *   it is a tuple type. Do not use in other types.
 * @property {boolean} [filelist] Private context variable. Whether or not
 *   it is a `FileList` type. Do not use in other types.
 * @property {boolean} [sparse] Private context variable. Whether or not
 *   it is a sparse array. Do not use in other types.
 * @property {boolean} [valid] Private context variable. Whether or not
 *   it is a valid date. Do not use in other types.
 * @property {string[]} [regexEndings] Used for string parsing.
 * @property {RegExp|((nonGrouping?: boolean) => RegExp)} [stringRegex] Used
 *   for string parsing. If not present, use `stringRegexBegin` and
 *   `stringRegexEnd`.
 * @property {RegExp} [stringRegexBegin] Used for string parsing. If not
 *   present, use `stringRegex`
 * @property {RegExp} [stringRegexEnd] Used for string parsing. If not
 *   present, use `stringRegex`
 * @property {(
 *   v: StructuredCloneValue
 * ) => boolean} [valueMatch] Function to check whether this type or subtype
 *   matches
 * @property {string} [superType] The greater fundamental type to which
 *   the type belongs
 * @property {ToValue} [toValue] Converts from string to value. May use
 *   `stringRegex` to find components.
 * @property {(info: {
 *   root: HTMLDivElement,
 *   stateObj?: StateObject,
 *   currentPath?: string
 * }) =>
 *  StructuredCloneValue
 * } getValue Gets the value for the type
 * @property {TypeObjectSetValue} [setValue] Should set the value of the
 *   form's `getInput` element
 * @property {(info: {
 *   value?: StructuredCloneValue,
 *   typeNamespace?: string,
 *   type?: AvailableType,
 *   topRoot?: HTMLDivElement,
 *   resultType?: "keys"|"values"|"both",
 *   format: import('./formats.js').AvailableFormat,
 *   specificSchemaObject?: import('./formats/schema.js').ZodexSchema,
 *   types: Types
 *   bringIntoFocus?: boolean|undefined,
 *   buildTypeChoices?: import('./typeChoices.js').BuildTypeChoices,
 *   schemaContent?: import('./formats/schema.js').ZodexSchema
 *   replaced?: any
 * }) => JamilihArray} viewUI
 * @property {(info: {
 *   value?: StructuredCloneValue,
 *   typeNamespace?: string,
 *   bringIntoFocus?: boolean,
 *   format?: import('./formats.js').AvailableFormat,
 *   formats?: import('./formats.js').default,
 *   types: Types,
 *   resultType?: "keys"|"values"|"both",
 *   type?: AvailableType,
 *   forcedState?: string,
 *   buildTypeChoices?: import('./typeChoices.js').BuildTypeChoices,
 *   topRoot?: HTMLDivElement
 *   schemaContent?: import('./formats/schema.js').ZodexSchema,
 *   specificSchemaObject?: import('./formats/schema.js').ZodexSchema,
 *   schemaFallingBack?: boolean
 * }) => JamilihArray} editUI
 * @property {(info: {root: HTMLDivElement}) =>
 *   HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|
 *   HTMLButtonElement} getInput Gets the form control (with `value`)
 * @property {(
 *   info: {root: HTMLDivElement}
 * ) => HTMLSelectElement} [getSelect]
 * @property {(path: string, value: StructuredCloneValue) =>
 *   StructuredCloneValue} [resolveReference] Gets the reference. For array
 *   and object references types only
 * @property {(info: {root: HTMLDivElement, topRoot?: HTMLDivElement}) => {
 *   message?: string,
 *   valid: boolean
 * }} [validate] Message will be used if validity is false.
 * @property {(info: {
 *   topRoot: HTMLDivElement,
 *   types: Types
 * }) => void} [validateAll] For
 *   validation of array and object references only.
 * @property {{
 *   structuredCloning: {
 *     after: AvailableType,
 *     contexts: string[]
 *   }
 * }} [stateDependent] The type after which it should be placed and its
 *   context types
 */ /**
 * @typedef {"null"|"true"|"false"|"number"|"bigint"|"bigintObject"|
 *   "string"|"arrayReference"|
 *   "objectReference"|"array"|"object"|"date"|"userObject"|"undef"|
 *   "SpecialRealNumber"|"SpecialNumber"|"regexp"|"BooleanObject"|
 *   "NumberObject"|"StringObject"|"map"|"set"|"file"|"filelist"|"blobHTML"|
 *   "buffersource"|"dataview"|"imagedata"|"imagebitmap"|
 *   "int8array"|"uint8array"|"uint8clampedarray"|"int16array"|"uint16array"|
 *   "int32array"|"uint32array"|"float32array"|"float64array"|"ValidDate"|
 *   "arrayNonindexKeys"|"error"|"errors"|"blob"|"domexception"|"domrect"|
 *   "dompoint"|"dommatrix"|"resurrectable"|"boolean"|"nan"|"tuple"|
 *   "record"|"void"|"enum"|"literal"|"never"|"catch"|"nativeEnum"
 * } AvailableType
 */ // Todo: Add to own section when ready for these non-structured-cloning:
// "symbol"|"promise"|"function"
/**
 * @typedef {TypeObject & {
*   childTypes: string[]
* }} SuperTypeObject
*/ /**
 *
 */class Types{/**
   *
   */constructor(){cov_pmr8wb3j7().f[1]++;cov_pmr8wb3j7().s[9]++;this.formats=new Formats();// Todo: Make customizable and test
/** @type {CustomValidateAllReferences|undefined} */cov_pmr8wb3j7().s[10]++;this.customValidateAllReferences=undefined;/**
     * @type {{
     *   [key in AvailableType]: Partial<TypeObject>|string[]
     * }}
     */cov_pmr8wb3j7().s[11]++;this.availableTypes={null:nullType,true:trueType,false:falseType,nan:nanType,// Schema type
boolean:booleanType,// Schema type
number:numberType,bigint:bigintType,bigintObject:bigintObjectType,string:stringType,arrayReference:arrayReferenceType,objectReference:objectReferenceType,array:arrayType,tuple:tupleType,// Schema type
// Note: We don't do for BooleanObject/NumberObject/StringObject, date,
//   regexp, as added properties on them are not being cloned (in Chrome
//   at least)
object:objectType,record:recordType,// Schema type
date:dateType,enum:enumType,// This type is only for throwing upon cloning errors:
// 'checkDataCloneException'
// This type might be supported by evaluable JS or config
//   passed in:
userObject:['User objects'],undef:undefinedType,void:voidType,SpecialRealNumber:SpecialRealNumberSuperType,SpecialNumber:SpecialNumberSuperType,error:errorType,errors:errorsSpecialType,regexp:regexpType,BooleanObject:BooleanObjectType,NumberObject:NumberObjectType,StringObject:StringObjectType,literal:literalType,map:mapType,set:setType,file:fileType,filelist:filelistType,blob:blobType,blobHTML:blobHTMLType,domexception:domexceptionType,domrect:domrectType,dompoint:dompointType,dommatrix:dommatrixType,resurrectable:noneditableType,never:neverType,// Todo: Reenable
// symbol: symbolType, // Non-cloning type
// promise: promiseType,
// function: functionType,
catch:catchType,nativeEnum:nativeEnumType,buffersource:buffersourceType,dataview:{option:['DataView']},imagedata:{option:['ImageData']},imagebitmap:{option:['ImageBitmap']},// Typed Arrays
int8array:{option:['Int8Array']},uint8array:{option:['Uint8Array']},uint8clampedarray:{option:['Uint8ClampedArray']},int16array:{option:['Int16Array']},uint16array:{option:['Uint16Array']},int32array:{option:['Int32Array']},uint32array:{option:['Uint32Array']},float32array:{option:['Float32Array']},float64array:{option:['Float64Array']},// We're catching this instead of using this
// sparseUndefined: sparseUndefinedType,
ValidDate:{valid:true},/*
      sparseArrays: {
          sparse: true
      },
      */arrayNonindexKeys:{sparse:true}};/**
     * @param {[
     *   copyFrom: AvailableType, copyTo: AvailableType
     * ][]} replacements
     * @returns {void}
     */cov_pmr8wb3j7().s[12]++;const copyTypeObjs=replacements=>{cov_pmr8wb3j7().f[2]++;cov_pmr8wb3j7().s[13]++;replacements.forEach(([copyFrom,copyTo])=>{cov_pmr8wb3j7().f[3]++;cov_pmr8wb3j7().s[14]++;Object.assign(this.availableTypes[(/** @type {AvailableType} */copyTo)],this.availableTypes[(/** @type {AvailableType} */copyFrom)]);});};cov_pmr8wb3j7().s[15]++;copyTypeObjs([(/** @type {[AvailableType, AvailableType]} */['date','ValidDate']),// 'sparseArrays'
/** @type {[AvailableType, AvailableType]} */['array','arrayNonindexKeys']]);/**
     * @type {{
     *   [key: string]: {
     *     [key: string]: {type: AvailableType, after: AvailableType}[]
     *   }
     * }}
     */cov_pmr8wb3j7().s[16]++;this.contexts={};cov_pmr8wb3j7().s[17]++;Object.entries(this.availableTypes).forEach(([typ,typeObj])=>{cov_pmr8wb3j7().f[4]++;const type=(/** @type {AvailableType} */cov_pmr8wb3j7().s[18]++,typ);const{stateDependent}=(/** @type {TypeObject} */cov_pmr8wb3j7().s[19]++,typeObj);cov_pmr8wb3j7().s[20]++;if(stateDependent){cov_pmr8wb3j7().b[3][0]++;cov_pmr8wb3j7().s[21]++;Object.entries(stateDependent).forEach(([format,formatStateDependent])=>{cov_pmr8wb3j7().f[5]++;cov_pmr8wb3j7().s[22]++;if(!this.contexts[format]){cov_pmr8wb3j7().b[4][0]++;cov_pmr8wb3j7().s[23]++;this.contexts[format]={};}else{cov_pmr8wb3j7().b[4][1]++;}const{contexts,after}=(cov_pmr8wb3j7().s[24]++,formatStateDependent);cov_pmr8wb3j7().s[25]++;contexts.forEach(context=>{cov_pmr8wb3j7().f[6]++;cov_pmr8wb3j7().s[26]++;if(!this.contexts[format][context]){cov_pmr8wb3j7().b[5][0]++;cov_pmr8wb3j7().s[27]++;this.contexts[format][context]=[];}else{cov_pmr8wb3j7().b[5][1]++;}cov_pmr8wb3j7().s[28]++;this.contexts[format][context].push({type,after});});});}else{cov_pmr8wb3j7().b[3][1]++;}});}/**
   * @param {import('./formats.js').AvailableFormat} format
   * @param {StructuredCloneValue} record
   * @param {StateObject} stateObj
   * @returns {Promise<Element>}
   */async getControlsForFormatAndValue(format,record,stateObj){cov_pmr8wb3j7().f[7]++;cov_pmr8wb3j7().s[29]++;return(await this.formats.getControlsForFormatAndValue(this,format,record,stateObj)).rootUI;}/**
   * @param {import('./formats.js').AvailableFormat} format
   * @param {string} context
   * @returns {{
   *   type: AvailableType
   *   after: AvailableType
   * }[]}
   */getContextInfo(format,context){cov_pmr8wb3j7().f[8]++;cov_pmr8wb3j7().s[30]++;return this.contexts[format][context];}/** @type {GetValueForRoot} */getValueForRoot(root,stateObj,currentPath){cov_pmr8wb3j7().f[9]++;const typeObject=(/** @type {TypeObject} */cov_pmr8wb3j7().s[31]++,this.availableTypes[(/** @type {AvailableType} */Types.getTypeForRoot(root))]);// Ensure `stateObj` remains a reference if present
/* istanbul ignore next -- Guard */return typeObject.getValue({root,/* istanbul ignore next -- Guard */stateObj:stateObj??{types:this},currentPath});}/** @type {GetFormControlForRoot} */getFormControlForRoot(root){cov_pmr8wb3j7().f[10]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[32]++,this.availableTypes[(/** @type {AvailableType} */Types.getTypeForRoot(root))]);/* istanbul ignore if -- All have except aliases */cov_pmr8wb3j7().s[33]++;if(!typeObj.getInput){return null;}else{cov_pmr8wb3j7().b[6][0]++;}cov_pmr8wb3j7().s[34]++;return typeObj.getInput({root});}/** @type {GetValueFromRootAncestor} */getValueFromRootAncestor(selOrEl,stateObj){cov_pmr8wb3j7().f[11]++;cov_pmr8wb3j7().s[35]++;return this.getValueForRoot(/** @type {RootElement} */$e(selOrEl,'div[data-type]'),{...stateObj,types:this,formats:this.formats});}/** @type {GetFormControlFromRootAncestor} */getFormControlFromRootAncestor(selOrEl){cov_pmr8wb3j7().f[12]++;const root=(/** @type {RootElement} */cov_pmr8wb3j7().s[36]++,$e(selOrEl,'div[data-type]'));cov_pmr8wb3j7().s[37]++;if(!root){cov_pmr8wb3j7().b[7][0]++;cov_pmr8wb3j7().s[38]++;return null;}else{cov_pmr8wb3j7().b[7][1]++;}cov_pmr8wb3j7().s[39]++;return this.getFormControlForRoot(root);}/** @type {GetOptionForType} */getOptionForType(type,schemaContent=(cov_pmr8wb3j7().b[8][0]++,undefined)){cov_pmr8wb3j7().f[13]++;const availableType=(/** @type {TypeObject} */cov_pmr8wb3j7().s[40]++,this.availableTypes[type]);/** @type {[string, {value?: AvailableType, title?: string}?]} */const optInfo=(cov_pmr8wb3j7().s[41]++,[...availableType.option]);cov_pmr8wb3j7().s[42]++;if((cov_pmr8wb3j7().b[10][0]++,schemaContent)&&(cov_pmr8wb3j7().b[10][1]++,schemaContent.description)){cov_pmr8wb3j7().b[9][0]++;cov_pmr8wb3j7().s[43]++;optInfo[0]=`${optInfo[0]} (${schemaContent.description})`;}else{cov_pmr8wb3j7().b[9][1]++;}cov_pmr8wb3j7().s[44]++;optInfo[1]={value:type,...optInfo[1]};cov_pmr8wb3j7().s[45]++;return/** @type {[string, {value: AvailableType, title?: string}]} */optInfo;}/** @type {GetTypeOptionsForFormatAndState} */getTypeOptionsForFormatAndState(format,parserState,schemaContent,schemaOriginal){cov_pmr8wb3j7().f[14]++;const typesForFormatAndState=(cov_pmr8wb3j7().s[46]++,this.formats.getTypesAndSchemasForFormatAndState(this,format,parserState,schemaContent,schemaOriginal));cov_pmr8wb3j7().s[47]++;if(!typesForFormatAndState){cov_pmr8wb3j7().b[11][0]++;cov_pmr8wb3j7().s[48]++;throw new Error('Unexpected type for format and state');}else{cov_pmr8wb3j7().b[11][1]++;}cov_pmr8wb3j7().s[49]++;return{typeOptions:typesForFormatAndState.types.map((type,idx)=>{cov_pmr8wb3j7().f[15]++;cov_pmr8wb3j7().s[50]++;return this.getOptionForType(type,typesForFormatAndState.schemaObjects[idx]);}),schemaObjects:typesForFormatAndState.schemaObjects};}/** @type {GetUIForModeAndType} */getUIForModeAndType({readonly,resultType,typeNamespace,type,topRoot,bringIntoFocus,buildTypeChoices,format,schemaContent,value,hasValue,replaced,specificSchemaObject,schemaFallingBack}){cov_pmr8wb3j7().f[16]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[51]++,this.availableTypes[type]);const arg=(cov_pmr8wb3j7().s[52]++,hasValue?(cov_pmr8wb3j7().b[12][0]++,{typeNamespace,type,buildTypeChoices,format,schemaContent,resultType,topRoot,bringIntoFocus,value,replaced,specificSchemaObject,schemaFallingBack,types:this}):(cov_pmr8wb3j7().b[12][1]++,{typeNamespace,type,buildTypeChoices,format,schemaContent,resultType,topRoot,bringIntoFocus,replaced,specificSchemaObject,schemaFallingBack,types:this}));const root=(/** @type {HTMLDivElement} */cov_pmr8wb3j7().s[53]++,jml(...(readonly?(cov_pmr8wb3j7().b[13][0]++,typeObj.viewUI(arg)):(cov_pmr8wb3j7().b[13][1]++,typeObj.editUI(arg)))));cov_pmr8wb3j7().s[54]++;if((cov_pmr8wb3j7().b[15][0]++,!readonly)&&(cov_pmr8wb3j7().b[15][1]++,typeObj.validate)){cov_pmr8wb3j7().b[14][0]++;const formControl=(cov_pmr8wb3j7().s[55]++,typeObj.getInput({root}));cov_pmr8wb3j7().s[56]++;formControl.addEventListener('input',()=>{cov_pmr8wb3j7().f[17]++;cov_pmr8wb3j7().s[57]++;this.validate({type,root,topRoot});});}else{cov_pmr8wb3j7().b[14][1]++;}cov_pmr8wb3j7().s[58]++;return root;}/** @type {ValidateAllReferences} */validateAllReferences({topRoot}){cov_pmr8wb3j7().f[18]++;cov_pmr8wb3j7().s[59]++;/* istanbul ignore if -- Unreachable? */if(!topRoot){console.log('No references present');return;}else{cov_pmr8wb3j7().b[16][0]++;}// Could just hard-code arrayReference and objectReference,
//  but we'll try to avoid depending on specific types
cov_pmr8wb3j7().s[60]++;Object.values(this.availableTypes).forEach(typeObj=>{cov_pmr8wb3j7().f[19]++;const typeObject=(/** @type {TypeObject} */cov_pmr8wb3j7().s[61]++,typeObj);cov_pmr8wb3j7().s[62]++;if(typeObject.validateAll){cov_pmr8wb3j7().b[17][0]++;cov_pmr8wb3j7().s[63]++;typeObject.validateAll({topRoot,types:this});}else{cov_pmr8wb3j7().b[17][1]++;}});cov_pmr8wb3j7().s[64]++;if(this.customValidateAllReferences){cov_pmr8wb3j7().b[18][0]++;cov_pmr8wb3j7().s[65]++;this.customValidateAllReferences({topRoot});}else{cov_pmr8wb3j7().b[18][1]++;}}/** @type {Validate} */validate({type,root,topRoot,avoidReport}){cov_pmr8wb3j7().f[20]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[66]++,this.availableTypes[type]);// Todo (low): We limit for now to input boxes which have `validate`
cov_pmr8wb3j7().s[67]++;if(typeObj.validate){cov_pmr8wb3j7().b[19][0]++;const{valid,message}=(cov_pmr8wb3j7().s[68]++,typeObj.validate({root,topRoot}));const formControl=(cov_pmr8wb3j7().s[69]++,typeObj.getInput({root}));cov_pmr8wb3j7().s[70]++;formControl.setCustomValidity(valid?(cov_pmr8wb3j7().b[20][0]++,''/* istanbul ignore next -- Should always have a message */):(cov_pmr8wb3j7().b[20][1]++,(cov_pmr8wb3j7().b[21][0]++,message)||(cov_pmr8wb3j7().b[21][1]++,'Invalid')));// We don't want a focus as `reportValidity` does in at least
//  some cases, but blur() would cause user to
//   leave input (used during input handler)
cov_pmr8wb3j7().s[71]++;if(!avoidReport){cov_pmr8wb3j7().b[22][0]++;cov_pmr8wb3j7().s[72]++;formControl.reportValidity();}else{cov_pmr8wb3j7().b[22][1]++;}cov_pmr8wb3j7().s[73]++;return valid;}else{cov_pmr8wb3j7().b[19][1]++;}cov_pmr8wb3j7().s[74]++;return true;}/** @type {SetValue} */setValue({type,root,value}){cov_pmr8wb3j7().f[21]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[75]++,this.availableTypes[type]);cov_pmr8wb3j7().s[76]++;if(typeObj.setValue){cov_pmr8wb3j7().b[23][0]++;cov_pmr8wb3j7().s[77]++;typeObj.setValue({root,value});}else{cov_pmr8wb3j7().b[23][1]++;}}// Todo (low): Should really add real parser
// Todo (low): Implement `getStringForValue` (e.g., to expose feature for
//          bookmarking object value currently in view); would not be
//          enough to iterate DOM to get string URL as we'd also like
//          the ability to have arbitrary JSON/structuredCloning sent to this
//          URL from other sites/programs (can currently pass in JSON
//          format to the URL, but that is still expecting our Router
//          string syntax)
/** @type {GetValueForString} */getValueForString(s,{format,state,endMatchTypeObjs=(cov_pmr8wb3j7().b[24][0]++,[]),firstRun=(cov_pmr8wb3j7().b[25][0]++,true),rootHolder=(cov_pmr8wb3j7().b[26][0]++,[]),parent,parentPath,schemaObject,schemaOriginal}){cov_pmr8wb3j7().f[22]++;const allowedTypes=(cov_pmr8wb3j7().s[78]++,this.formats.getTypesAndSchemasForFormatAndState(this,format,state,schemaObject,schemaOriginal)?.types);cov_pmr8wb3j7().s[79]++;if(!allowedTypes){cov_pmr8wb3j7().b[27][0]++;cov_pmr8wb3j7().s[80]++;throw new Error('Could not get types for format and state');}else{cov_pmr8wb3j7().b[27][1]++;}const allowedTypeObjs=(cov_pmr8wb3j7().s[81]++,Object.entries(this.availableTypes).filter(([type])=>{cov_pmr8wb3j7().f[23]++;cov_pmr8wb3j7().s[82]++;return allowedTypes.includes(/** @type {AvailableType} */type);}));const allowedTypeObjsVals=(cov_pmr8wb3j7().s[83]++,allowedTypeObjs.map(([,arr])=>{cov_pmr8wb3j7().f[24]++;cov_pmr8wb3j7().s[84]++;return arr;}));const reduced=(cov_pmr8wb3j7().s[85]++,allowedTypeObjsVals.reduce((array,typObj)=>{cov_pmr8wb3j7().f[25]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[86]++,typObj);let arr=(/** @type {string[]} */cov_pmr8wb3j7().s[87]++,array);cov_pmr8wb3j7().s[88]++;if(typeObj.regexEndings){cov_pmr8wb3j7().b[28][0]++;cov_pmr8wb3j7().s[89]++;arr.push(...typeObj.regexEndings);cov_pmr8wb3j7().s[90]++;arr=[...new Set(arr)];}else{cov_pmr8wb3j7().b[28][1]++;}cov_pmr8wb3j7().s[91]++;return arr;},[]));const endings=(cov_pmr8wb3j7().s[92]++,'|'+/** @type {string[]} */reduced.map(str=>{cov_pmr8wb3j7().f[26]++;cov_pmr8wb3j7().s[93]++;return escapeRegex(str);}).join('|'));/**
     * @type {RegExpMatchArray|boolean|null}
     */let match=(cov_pmr8wb3j7().s[94]++,null);let found=(cov_pmr8wb3j7().s[95]++,allowedTypeObjs.find(([/* _type */,typObj])=>{cov_pmr8wb3j7().f[27]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[96]++,typObj);let{stringRegex}=(cov_pmr8wb3j7().s[97]++,typeObj);cov_pmr8wb3j7().s[98]++;if(typeof typeObj.stringRegex==='function'){cov_pmr8wb3j7().b[29][0]++;cov_pmr8wb3j7().s[99]++;stringRegex=typeObj.stringRegex(true);}else{cov_pmr8wb3j7().b[29][1]++;}cov_pmr8wb3j7().s[100]++;stringRegex=stringRegex// Strip off terminal (dollar sign) when matching substrings
?(cov_pmr8wb3j7().b[30][0]++,new RegExp(/** @type {RegExp} */stringRegex.source.slice(0,-1)+'(?=$'+endings+')','u')):(cov_pmr8wb3j7().b[30][1]++,stringRegex);cov_pmr8wb3j7().s[101]++;match=(cov_pmr8wb3j7().b[31][0]++,Boolean((cov_pmr8wb3j7().b[32][0]++,stringRegex)&&(cov_pmr8wb3j7().b[32][1]++,s)))&&(cov_pmr8wb3j7().b[31][1]++,s.match(/** @type {RegExp} */stringRegex));cov_pmr8wb3j7().s[102]++;return match;}));let beginOnly=(cov_pmr8wb3j7().s[103]++,false);cov_pmr8wb3j7().s[104]++;if(found===undefined){cov_pmr8wb3j7().b[33][0]++;cov_pmr8wb3j7().s[105]++;found=allowedTypeObjs.find(([/* _type */,typObj])=>{cov_pmr8wb3j7().f[28]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[106]++,typObj);const{stringRegexBegin}=(cov_pmr8wb3j7().s[107]++,typeObj);cov_pmr8wb3j7().s[108]++;match=(cov_pmr8wb3j7().b[34][0]++,Boolean((cov_pmr8wb3j7().b[35][0]++,stringRegexBegin)&&(cov_pmr8wb3j7().b[35][1]++,s)))&&(cov_pmr8wb3j7().b[34][1]++,s.match(/** @type {RegExp} */stringRegexBegin));cov_pmr8wb3j7().s[109]++;if(match){cov_pmr8wb3j7().b[36][0]++;cov_pmr8wb3j7().s[110]++;beginOnly=true;cov_pmr8wb3j7().s[111]++;endMatchTypeObjs.push(typeObj);}else{cov_pmr8wb3j7().b[36][1]++;}cov_pmr8wb3j7().s[112]++;return match;});}else{cov_pmr8wb3j7().b[33][1]++;}let assign=(cov_pmr8wb3j7().s[113]++,true);cov_pmr8wb3j7().s[114]++;if(found!==undefined){cov_pmr8wb3j7().b[37][0]++;// The `found` is evaluated again, so sets `match` to non-null
const mtch=(/** @type {RegExpMatchArray} */ /** @type {unknown} */cov_pmr8wb3j7().s[115]++,match);const[content,innerContent]=(cov_pmr8wb3j7().s[116]++,mtch);let remnant=(cov_pmr8wb3j7().s[117]++,s.slice(content.length));cov_pmr8wb3j7().s[118]++;s=s.slice(0,content.length);// console.log('s0', s, '::', remnant, match);
let valObj;cov_pmr8wb3j7().s[119]++;try{const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[120]++,found[1]);/* istanbul ignore if -- TS guard */cov_pmr8wb3j7().s[121]++;if(!typeObj.toValue){throw new Error('Type has no `toValue` method');}else{cov_pmr8wb3j7().b[38][0]++;}cov_pmr8wb3j7().s[122]++;valObj=typeObj.toValue((cov_pmr8wb3j7().b[39][0]++,mtch.groups?.innerContent)||(cov_pmr8wb3j7().b[39][1]++,innerContent)||(cov_pmr8wb3j7().b[39][2]++,s),{types:this,format,match,endMatchTypeObjs,remnant,rootHolder,parent,parentPath,schemaObject});/* istanbul ignore next -- Good regexes should prevent */}catch(e){/* istanbul ignore next -- Good regexes should prevent */console.log('eee',e);/* istanbul ignore next -- Good regexes should prevent */throw e;}cov_pmr8wb3j7().s[123]++;if(valObj.assign===false){cov_pmr8wb3j7().b[40][0]++;cov_pmr8wb3j7().s[124]++;assign=false;}else{cov_pmr8wb3j7().b[40][1]++;}const{value}=(cov_pmr8wb3j7().s[125]++,valObj);cov_pmr8wb3j7().s[126]++;if(valObj.remnant!==undefined){cov_pmr8wb3j7().b[41][0]++;cov_pmr8wb3j7().s[127]++;({remnant}=valObj);}else{cov_pmr8wb3j7().b[41][1]++;}cov_pmr8wb3j7().s[128]++;if((cov_pmr8wb3j7().b[43][0]++,beginOnly)&&(cov_pmr8wb3j7().b[43][1]++,endMatchTypeObjs.length)){cov_pmr8wb3j7().b[42][0]++;const endMatch=(cov_pmr8wb3j7().s[129]++,remnant.match(/** @type {RegExp} */ /** @type {TypeObject} */endMatchTypeObjs.at(-1).stringRegexEnd));cov_pmr8wb3j7().s[130]++;if(endMatch){cov_pmr8wb3j7().b[44][0]++;cov_pmr8wb3j7().s[131]++;endMatchTypeObjs.pop();// Safe now to extract
cov_pmr8wb3j7().s[132]++;remnant=remnant.slice(endMatch[0].length);}else{cov_pmr8wb3j7().b[44][1]++;}}else{cov_pmr8wb3j7().b[42][1]++;}cov_pmr8wb3j7().s[133]++;if(firstRun){cov_pmr8wb3j7().b[45][0]++;const typeson=(cov_pmr8wb3j7().s[134]++,new Typeson().register(structuredCloningThrowing));cov_pmr8wb3j7().s[135]++;try{const topRoot=(cov_pmr8wb3j7().s[136]++,typeson.revive(value));cov_pmr8wb3j7().s[137]++;rootHolder.forEach(([type,parent,parentPath,path])=>{cov_pmr8wb3j7().f[29]++;const typeObject=(cov_pmr8wb3j7().s[138]++,this.availableTypes[(/** @type {AvailableType} */type+'Reference')]);// @ts-expect-error Reference method exists
const val=(cov_pmr8wb3j7().s[139]++,typeObject.resolveReference(path,topRoot));const basicType=(cov_pmr8wb3j7().s[140]++,getJSONType(val));// eslint-disable-next-line @stylistic/max-len -- Long
/* istanbul ignore else -- Successful reference always an object/array? */cov_pmr8wb3j7().s[141]++;if((cov_pmr8wb3j7().b[47][0]++,['array','object'].includes(type))&&(cov_pmr8wb3j7().b[47][1]++,basicType===type)){cov_pmr8wb3j7().b[46][0]++;cov_pmr8wb3j7().s[142]++;/** @type {{[key: string]: any}} */parent[(/** @type {string|number} */parentPath)]=val;}else{}});cov_pmr8wb3j7().s[143]++;return[topRoot,remnant,beginOnly,assign];}catch(err){cov_pmr8wb3j7().s[144]++;console.log('failed Typeson revival',err);}}else{cov_pmr8wb3j7().b[45][1]++;}cov_pmr8wb3j7().s[145]++;return[value,remnant,beginOnly,assign];}else{cov_pmr8wb3j7().b[37][1]++;}cov_pmr8wb3j7().s[146]++;throw new Error('Bad parsing data');}/**
   * @param {AvailableType} type
   * @returns {Partial<TypeObject>|string[]}
   */getTypeObject(type){cov_pmr8wb3j7().f[30]++;cov_pmr8wb3j7().s[147]++;return this.availableTypes[type];}}/** @type {GetTypeForRoot} */cov_pmr8wb3j7().s[148]++;Types.getTypeForRoot=root=>{cov_pmr8wb3j7().f[31]++;cov_pmr8wb3j7().s[149]++;return String(root?(cov_pmr8wb3j7().b[48][0]++,root.dataset.type):(cov_pmr8wb3j7().b[48][1]++,root));};/** @type {ValidValuesSet} */cov_pmr8wb3j7().s[150]++;Types.validValuesSet=({form,typeNamespace,keySelectClass})=>{cov_pmr8wb3j7().f[32]++;cov_pmr8wb3j7().s[151]++;// If form is hidden, don't list errors by default
if((cov_pmr8wb3j7().b[50][0]++,!form.offsetParent)||(cov_pmr8wb3j7().b[50][1]++,// Not an invalid form (bad key or value)
// May be redundant as re-validating below
!form.checkValidity())){cov_pmr8wb3j7().b[49][0]++;cov_pmr8wb3j7().s[152]++;return false;}else{cov_pmr8wb3j7().b[49][1]++;}const typeChoices=(/** @type {(HTMLSelectElement & {$validate: () => boolean})[]} */cov_pmr8wb3j7().s[153]++,$$e(form,keySelectClass?(cov_pmr8wb3j7().b[51][0]++,`.${keySelectClass}`):(cov_pmr8wb3j7().b[51][1]++,`.typeChoices-${typeNamespace}`)));cov_pmr8wb3j7().s[154]++;return(// Specific value type set if present (any descendant, not
//   only the first) chosen
typeChoices.every(sel=>{cov_pmr8wb3j7().f[33]++;cov_pmr8wb3j7().s[155]++;// console.log('sel', sel.value !== '' && sel.$validate());
// Hidden are ok
return(cov_pmr8wb3j7().b[52][0]++,!sel.offsetParent)||// If present, must be valid
(cov_pmr8wb3j7().b[52][1]++,sel.value!=='')&&(cov_pmr8wb3j7().b[52][2]++,sel.$validate());})// Container of a specific type added (should always be present
//   if typeChoices non-empty)
// $e(form, '.typeContainer')
);};/**
 *
 * @param {string} str
 * @returns {string}
 */export function escapeRegex(str){cov_pmr8wb3j7().f[34]++;cov_pmr8wb3j7().s[156]++;return String(str).replaceAll(/[.\\+*?^[\]$(){}=!<>|:-]/gu,String.raw`\$&`);}export default Types;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,