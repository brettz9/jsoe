function cov_pmr8wb3j7(){var path="/Users/brett/jsoe/src/types.js";var hash="b8e64de35cadb4dc710e2ac97e86dc59eb12445d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/types.js",statementMap:{"0":{start:{line:67,column:42},end:{line:84,column:1}},"1":{start:{line:68,column:19},end:{line:68,column:52}},"2":{start:{line:69,column:2},end:{line:73,column:3}},"3":{start:{line:70,column:4},end:{line:72,column:6}},"4":{start:{line:74,column:2},end:{line:76,column:3}},"5":{start:{line:75,column:4},end:{line:75,column:60}},"6":{start:{line:77,column:2},end:{line:81,column:3}},"7":{start:{line:78,column:4},end:{line:80,column:6}},"8":{start:{line:83,column:2},end:{line:83,column:59}},"9":{start:{line:443,column:4},end:{line:443,column:33}},"10":{start:{line:446,column:4},end:{line:446,column:49}},"11":{start:{line:452,column:4},end:{line:571,column:6}},"12":{start:{line:579,column:25},end:{line:589,column:5}},"13":{start:{line:580,column:6},end:{line:588,column:9}},"14":{start:{line:581,column:8},end:{line:587,column:11}},"15":{start:{line:591,column:4},end:{line:601,column:6}},"16":{start:{line:610,column:4},end:{line:610,column:23}},"17":{start:{line:611,column:4},end:{line:630,column:7}},"18":{start:{line:612,column:49},end:{line:612,column:52}},"19":{start:{line:613,column:58},end:{line:613,column:65}},"20":{start:{line:614,column:6},end:{line:629,column:7}},"21":{start:{line:615,column:8},end:{line:628,column:11}},"22":{start:{line:618,column:10},end:{line:620,column:11}},"23":{start:{line:619,column:12},end:{line:619,column:39}},"24":{start:{line:621,column:36},end:{line:621,column:56}},"25":{start:{line:622,column:10},end:{line:627,column:13}},"26":{start:{line:623,column:12},end:{line:625,column:13}},"27":{start:{line:624,column:14},end:{line:624,column:50}},"28":{start:{line:626,column:12},end:{line:626,column:63}},"29":{start:{line:642,column:4},end:{line:644,column:14}},"30":{start:{line:656,column:4},end:{line:656,column:42}},"31":{start:{line:662,column:6},end:{line:665,column:7}},"32":{start:{line:681,column:47},end:{line:684,column:5}},"33":{start:{line:686,column:4},end:{line:688,column:5}},"34":{start:{line:689,column:4},end:{line:689,column:36}},"35":{start:{line:694,column:4},end:{line:702,column:6}},"36":{start:{line:707,column:45},end:{line:707,column:74}},"37":{start:{line:708,column:4},end:{line:710,column:5}},"38":{start:{line:709,column:6},end:{line:709,column:18}},"39":{start:{line:711,column:4},end:{line:711,column:44}},"40":{start:{line:717,column:6},end:{line:717,column:31}},"41":{start:{line:720,column:20},end:{line:722,column:5}},"42":{start:{line:724,column:4},end:{line:726,column:5}},"43":{start:{line:725,column:6},end:{line:725,column:66}},"44":{start:{line:728,column:4},end:{line:731,column:6}},"45":{start:{line:732,column:4},end:{line:734,column:6}},"46":{start:{line:742,column:6},end:{line:744,column:7}},"47":{start:{line:745,column:4},end:{line:747,column:5}},"48":{start:{line:746,column:6},end:{line:746,column:62}},"49":{start:{line:749,column:4},end:{line:756,column:6}},"50":{start:{line:751,column:8},end:{line:753,column:10}},"51":{start:{line:765,column:47},end:{line:765,column:72}},"52":{start:{line:766,column:16},end:{line:782,column:7}},"53":{start:{line:783,column:48},end:{line:787,column:5}},"54":{start:{line:788,column:4},end:{line:793,column:5}},"55":{start:{line:789,column:26},end:{line:789,column:50}},"56":{start:{line:790,column:6},end:{line:792,column:9}},"57":{start:{line:791,column:8},end:{line:791,column:45}},"58":{start:{line:794,column:4},end:{line:794,column:16}},"59":{start:{line:800,column:4},end:{line:803,column:5}},"60":{start:{line:807,column:4},end:{line:812,column:7}},"61":{start:{line:808,column:52},end:{line:808,column:59}},"62":{start:{line:809,column:6},end:{line:811,column:7}},"63":{start:{line:810,column:8},end:{line:810,column:55}},"64":{start:{line:814,column:4},end:{line:816,column:5}},"65":{start:{line:815,column:6},end:{line:815,column:50}},"66":{start:{line:821,column:47},end:{line:821,column:72}},"67":{start:{line:823,column:4},end:{line:840,column:5}},"68":{start:{line:824,column:31},end:{line:824,column:64}},"69":{start:{line:825,column:26},end:{line:825,column:50}},"70":{start:{line:826,column:6},end:{line:831,column:8}},"71":{start:{line:836,column:6},end:{line:838,column:7}},"72":{start:{line:837,column:8},end:{line:837,column:37}},"73":{start:{line:839,column:6},end:{line:839,column:19}},"74":{start:{line:841,column:4},end:{line:841,column:16}},"75":{start:{line:846,column:47},end:{line:846,column:72}},"76":{start:{line:847,column:4},end:{line:849,column:5}},"77":{start:{line:848,column:6},end:{line:848,column:38}},"78":{start:{line:866,column:25},end:{line:868,column:12}},"79":{start:{line:869,column:4},end:{line:871,column:5}},"80":{start:{line:870,column:6},end:{line:870,column:66}},"81":{start:{line:872,column:28},end:{line:876,column:6}},"82":{start:{line:875,column:6},end:{line:875,column:72}},"83":{start:{line:877,column:32},end:{line:877,column:69}},"84":{start:{line:877,column:65},end:{line:877,column:68}},"85":{start:{line:879,column:20},end:{line:887,column:10}},"86":{start:{line:880,column:49},end:{line:880,column:55}},"87":{start:{line:881,column:41},end:{line:881,column:46}},"88":{start:{line:882,column:6},end:{line:885,column:7}},"89":{start:{line:883,column:8},end:{line:883,column:42}},"90":{start:{line:884,column:8},end:{line:884,column:32}},"91":{start:{line:886,column:6},end:{line:886,column:17}},"92":{start:{line:888,column:20},end:{line:890,column:46}},"93":{start:{line:890,column:19},end:{line:890,column:35}},"94":{start:{line:895,column:16},end:{line:895,column:20}},"95":{start:{line:896,column:16},end:{line:915,column:6}},"96":{start:{line:897,column:49},end:{line:897,column:55}},"97":{start:{line:898,column:26},end:{line:898,column:33}},"98":{start:{line:899,column:6},end:{line:901,column:7}},"99":{start:{line:900,column:8},end:{line:900,column:48}},"100":{start:{line:902,column:6},end:{line:910,column:22}},"101":{start:{line:911,column:6},end:{line:913,column:8}},"102":{start:{line:914,column:6},end:{line:914,column:19}},"103":{start:{line:917,column:20},end:{line:917,column:25}},"104":{start:{line:918,column:4},end:{line:931,column:5}},"105":{start:{line:919,column:6},end:{line:930,column:9}},"106":{start:{line:920,column:51},end:{line:920,column:57}},"107":{start:{line:921,column:35},end:{line:921,column:42}},"108":{start:{line:922,column:8},end:{line:924,column:10}},"109":{start:{line:925,column:8},end:{line:928,column:9}},"110":{start:{line:926,column:10},end:{line:926,column:27}},"111":{start:{line:927,column:10},end:{line:927,column:41}},"112":{start:{line:929,column:8},end:{line:929,column:21}},"113":{start:{line:932,column:17},end:{line:932,column:21}},"114":{start:{line:933,column:4},end:{line:1021,column:5}},"115":{start:{line:936,column:32},end:{line:936,column:37}},"116":{start:{line:938,column:38},end:{line:938,column:42}},"117":{start:{line:939,column:20},end:{line:939,column:43}},"118":{start:{line:940,column:6},end:{line:940,column:37}},"119":{start:{line:943,column:6},end:{line:968,column:7}},"120":{start:{line:944,column:51},end:{line:944,column:59}},"121":{start:{line:946,column:8},end:{line:948,column:9}},"122":{start:{line:949,column:8},end:{line:961,column:10}},"123":{start:{line:969,column:6},end:{line:971,column:7}},"124":{start:{line:970,column:8},end:{line:970,column:23}},"125":{start:{line:972,column:22},end:{line:972,column:28}},"126":{start:{line:973,column:6},end:{line:975,column:7}},"127":{start:{line:974,column:8},end:{line:974,column:29}},"128":{start:{line:977,column:6},end:{line:987,column:7}},"129":{start:{line:978,column:25},end:{line:982,column:9}},"130":{start:{line:983,column:8},end:{line:986,column:9}},"131":{start:{line:984,column:10},end:{line:984,column:33}},"132":{start:{line:985,column:10},end:{line:985,column:54}},"133":{start:{line:988,column:6},end:{line:1019,column:7}},"134":{start:{line:992,column:24},end:{line:994,column:9}},"135":{start:{line:995,column:8},end:{line:1018,column:9}},"136":{start:{line:996,column:26},end:{line:996,column:47}},"137":{start:{line:997,column:10},end:{line:1014,column:13}},"138":{start:{line:998,column:31},end:{line:1000,column:13}},"139":{start:{line:1003,column:24},end:{line:1003,column:66}},"140":{start:{line:1004,column:30},end:{line:1004,column:46}},"141":{start:{line:1007,column:12},end:{line:1013,column:13}},"142":{start:{line:1010,column:50},end:{line:1012,column:65}},"143":{start:{line:1015,column:10},end:{line:1015,column:55}},"144":{start:{line:1017,column:10},end:{line:1017,column:53}},"145":{start:{line:1020,column:6},end:{line:1020,column:49}},"146":{start:{line:1022,column:4},end:{line:1022,column:40}},"147":{start:{line:1030,column:4},end:{line:1030,column:37}},"148":{start:{line:1035,column:0},end:{line:1037,column:2}},"149":{start:{line:1036,column:2},end:{line:1036,column:49}},"150":{start:{line:1040,column:0},end:{line:1071,column:2}},"151":{start:{line:1042,column:2},end:{line:1048,column:3}},"152":{start:{line:1047,column:4},end:{line:1047,column:17}},"153":{start:{line:1052,column:6},end:{line:1055,column:7}},"154":{start:{line:1057,column:2},end:{line:1070,column:4}},"155":{start:{line:1063,column:6},end:{line:1065,column:46}},"156":{start:{line:1079,column:2},end:{line:1080,column:62}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:67,column:42},end:{line:67,column:43}},loc:{start:{line:67,column:54},end:{line:84,column:1}},line:67},"1":{name:"(anonymous_1)",decl:{start:{line:442,column:2},end:{line:442,column:3}},loc:{start:{line:442,column:17},end:{line:631,column:3}},line:442},"2":{name:"(anonymous_2)",decl:{start:{line:579,column:25},end:{line:579,column:26}},loc:{start:{line:579,column:43},end:{line:589,column:5}},line:579},"3":{name:"(anonymous_3)",decl:{start:{line:580,column:27},end:{line:580,column:28}},loc:{start:{line:580,column:51},end:{line:588,column:7}},line:580},"4":{name:"(anonymous_4)",decl:{start:{line:611,column:48},end:{line:611,column:49}},loc:{start:{line:611,column:68},end:{line:630,column:5}},line:611},"5":{name:"(anonymous_5)",decl:{start:{line:615,column:47},end:{line:615,column:48}},loc:{start:{line:617,column:14},end:{line:628,column:9}},line:617},"6":{name:"(anonymous_6)",decl:{start:{line:622,column:27},end:{line:622,column:28}},loc:{start:{line:622,column:40},end:{line:627,column:11}},line:622},"7":{name:"(anonymous_7)",decl:{start:{line:639,column:2},end:{line:639,column:3}},loc:{start:{line:641,column:4},end:{line:645,column:3}},line:641},"8":{name:"(anonymous_8)",decl:{start:{line:655,column:2},end:{line:655,column:3}},loc:{start:{line:655,column:35},end:{line:657,column:3}},line:655},"9":{name:"(anonymous_9)",decl:{start:{line:660,column:2},end:{line:660,column:3}},loc:{start:{line:660,column:48},end:{line:677,column:3}},line:660},"10":{name:"(anonymous_10)",decl:{start:{line:680,column:2},end:{line:680,column:3}},loc:{start:{line:680,column:31},end:{line:690,column:3}},line:680},"11":{name:"(anonymous_11)",decl:{start:{line:693,column:2},end:{line:693,column:3}},loc:{start:{line:693,column:47},end:{line:703,column:3}},line:693},"12":{name:"(anonymous_12)",decl:{start:{line:706,column:2},end:{line:706,column:3}},loc:{start:{line:706,column:43},end:{line:712,column:3}},line:706},"13":{name:"(anonymous_13)",decl:{start:{line:715,column:2},end:{line:715,column:3}},loc:{start:{line:715,column:53},end:{line:735,column:3}},line:715},"14":{name:"(anonymous_14)",decl:{start:{line:738,column:2},end:{line:738,column:3}},loc:{start:{line:740,column:4},end:{line:757,column:3}},line:740},"15":{name:"(anonymous_15)",decl:{start:{line:750,column:52},end:{line:750,column:53}},loc:{start:{line:750,column:67},end:{line:754,column:7}},line:750},"16":{name:"(anonymous_16)",decl:{start:{line:760,column:2},end:{line:760,column:3}},loc:{start:{line:764,column:5},end:{line:795,column:3}},line:764},"17":{name:"(anonymous_17)",decl:{start:{line:790,column:44},end:{line:790,column:45}},loc:{start:{line:790,column:50},end:{line:792,column:7}},line:790},"18":{name:"(anonymous_18)",decl:{start:{line:798,column:2},end:{line:798,column:3}},loc:{start:{line:798,column:36},end:{line:817,column:3}},line:798},"19":{name:"(anonymous_19)",decl:{start:{line:807,column:47},end:{line:807,column:48}},loc:{start:{line:807,column:60},end:{line:812,column:5}},line:807},"20":{name:"(anonymous_20)",decl:{start:{line:820,column:2},end:{line:820,column:3}},loc:{start:{line:820,column:48},end:{line:842,column:3}},line:820},"21":{name:"(anonymous_21)",decl:{start:{line:845,column:2},end:{line:845,column:3}},loc:{start:{line:845,column:33},end:{line:850,column:3}},line:845},"22":{name:"(anonymous_22)",decl:{start:{line:862,column:2},end:{line:862,column:3}},loc:{start:{line:865,column:5},end:{line:1023,column:3}},line:865},"23":{name:"(anonymous_23)",decl:{start:{line:874,column:13},end:{line:874,column:14}},loc:{start:{line:874,column:25},end:{line:876,column:5}},line:874},"24":{name:"(anonymous_24)",decl:{start:{line:877,column:52},end:{line:877,column:53}},loc:{start:{line:877,column:65},end:{line:877,column:68}},line:877},"25":{name:"(anonymous_25)",decl:{start:{line:879,column:47},end:{line:879,column:48}},loc:{start:{line:879,column:66},end:{line:887,column:5}},line:879},"26":{name:"(anonymous_26)",decl:{start:{line:890,column:10},end:{line:890,column:11}},loc:{start:{line:890,column:19},end:{line:890,column:35}},line:890},"27":{name:"(anonymous_27)",decl:{start:{line:896,column:37},end:{line:896,column:38}},loc:{start:{line:896,column:64},end:{line:915,column:5}},line:896},"28":{name:"(anonymous_28)",decl:{start:{line:919,column:35},end:{line:919,column:36}},loc:{start:{line:919,column:62},end:{line:930,column:7}},line:919},"29":{name:"(anonymous_29)",decl:{start:{line:997,column:29},end:{line:997,column:30}},loc:{start:{line:997,column:67},end:{line:1014,column:11}},line:997},"30":{name:"(anonymous_30)",decl:{start:{line:1029,column:2},end:{line:1029,column:3}},loc:{start:{line:1029,column:23},end:{line:1031,column:3}},line:1029},"31":{name:"(anonymous_31)",decl:{start:{line:1035,column:23},end:{line:1035,column:24}},loc:{start:{line:1035,column:33},end:{line:1037,column:1}},line:1035},"32":{name:"(anonymous_32)",decl:{start:{line:1040,column:23},end:{line:1040,column:24}},loc:{start:{line:1040,column:66},end:{line:1071,column:1}},line:1040},"33":{name:"(anonymous_33)",decl:{start:{line:1060,column:22},end:{line:1060,column:23}},loc:{start:{line:1060,column:31},end:{line:1066,column:5}},line:1060},"34":{name:"escapeRegex",decl:{start:{line:1078,column:16},end:{line:1078,column:27}},loc:{start:{line:1078,column:34},end:{line:1081,column:1}},line:1078}},branchMap:{"0":{loc:{start:{line:69,column:2},end:{line:73,column:3}},type:"if",locations:[{start:{line:69,column:2},end:{line:73,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:69},"1":{loc:{start:{line:74,column:2},end:{line:76,column:3}},type:"if",locations:[{start:{line:74,column:2},end:{line:76,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:74},"2":{loc:{start:{line:77,column:2},end:{line:81,column:3}},type:"if",locations:[{start:{line:77,column:2},end:{line:81,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:77},"3":{loc:{start:{line:614,column:6},end:{line:629,column:7}},type:"if",locations:[{start:{line:614,column:6},end:{line:629,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:614},"4":{loc:{start:{line:618,column:10},end:{line:620,column:11}},type:"if",locations:[{start:{line:618,column:10},end:{line:620,column:11}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:618},"5":{loc:{start:{line:623,column:12},end:{line:625,column:13}},type:"if",locations:[{start:{line:623,column:12},end:{line:625,column:13}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:623},"6":{loc:{start:{line:686,column:4},end:{line:688,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:686},"7":{loc:{start:{line:708,column:4},end:{line:710,column:5}},type:"if",locations:[{start:{line:708,column:4},end:{line:710,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:708},"8":{loc:{start:{line:715,column:26},end:{line:715,column:51}},type:"default-arg",locations:[{start:{line:715,column:42},end:{line:715,column:51}}],line:715},"9":{loc:{start:{line:724,column:4},end:{line:726,column:5}},type:"if",locations:[{start:{line:724,column:4},end:{line:726,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:724},"10":{loc:{start:{line:724,column:8},end:{line:724,column:50}},type:"binary-expr",locations:[{start:{line:724,column:8},end:{line:724,column:21}},{start:{line:724,column:25},end:{line:724,column:50}}],line:724},"11":{loc:{start:{line:745,column:4},end:{line:747,column:5}},type:"if",locations:[{start:{line:745,column:4},end:{line:747,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:745},"12":{loc:{start:{line:766,column:16},end:{line:782,column:7}},type:"cond-expr",locations:[{start:{line:767,column:8},end:{line:774,column:7}},{start:{line:775,column:8},end:{line:782,column:7}}],line:766},"13":{loc:{start:{line:784,column:10},end:{line:786,column:29}},type:"cond-expr",locations:[{start:{line:785,column:10},end:{line:785,column:29}},{start:{line:786,column:10},end:{line:786,column:29}}],line:784},"14":{loc:{start:{line:788,column:4},end:{line:793,column:5}},type:"if",locations:[{start:{line:788,column:4},end:{line:793,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:788},"15":{loc:{start:{line:788,column:8},end:{line:788,column:37}},type:"binary-expr",locations:[{start:{line:788,column:8},end:{line:788,column:17}},{start:{line:788,column:21},end:{line:788,column:37}}],line:788},"16":{loc:{start:{line:800,column:4},end:{line:803,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:800},"17":{loc:{start:{line:809,column:6},end:{line:811,column:7}},type:"if",locations:[{start:{line:809,column:6},end:{line:811,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:809},"18":{loc:{start:{line:814,column:4},end:{line:816,column:5}},type:"if",locations:[{start:{line:814,column:4},end:{line:816,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:814},"19":{loc:{start:{line:823,column:4},end:{line:840,column:5}},type:"if",locations:[{start:{line:823,column:4},end:{line:840,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:823},"20":{loc:{start:{line:827,column:8},end:{line:830,column:34}},type:"cond-expr",locations:[{start:{line:828,column:12},end:{line:828,column:14}},{start:{line:830,column:13},end:{line:830,column:33}}],line:827},"21":{loc:{start:{line:830,column:13},end:{line:830,column:33}},type:"binary-expr",locations:[{start:{line:830,column:13},end:{line:830,column:20}},{start:{line:830,column:24},end:{line:830,column:33}}],line:830},"22":{loc:{start:{line:836,column:6},end:{line:838,column:7}},type:"if",locations:[{start:{line:836,column:6},end:{line:838,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:836},"23":{loc:{start:{line:847,column:4},end:{line:849,column:5}},type:"if",locations:[{start:{line:847,column:4},end:{line:849,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:847},"24":{loc:{start:{line:863,column:19},end:{line:863,column:40}},type:"default-arg",locations:[{start:{line:863,column:38},end:{line:863,column:40}}],line:863},"25":{loc:{start:{line:863,column:42},end:{line:863,column:57}},type:"default-arg",locations:[{start:{line:863,column:53},end:{line:863,column:57}}],line:863},"26":{loc:{start:{line:864,column:4},end:{line:864,column:19}},type:"default-arg",locations:[{start:{line:864,column:17},end:{line:864,column:19}}],line:864},"27":{loc:{start:{line:869,column:4},end:{line:871,column:5}},type:"if",locations:[{start:{line:869,column:4},end:{line:871,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:869},"28":{loc:{start:{line:882,column:6},end:{line:885,column:7}},type:"if",locations:[{start:{line:882,column:6},end:{line:885,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:882},"29":{loc:{start:{line:899,column:6},end:{line:901,column:7}},type:"if",locations:[{start:{line:899,column:6},end:{line:901,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:899},"30":{loc:{start:{line:902,column:20},end:{line:910,column:21}},type:"cond-expr",locations:[{start:{line:904,column:10},end:{line:909,column:9}},{start:{line:910,column:10},end:{line:910,column:21}}],line:902},"31":{loc:{start:{line:911,column:14},end:{line:913,column:7}},type:"binary-expr",locations:[{start:{line:911,column:14},end:{line:911,column:39}},{start:{line:911,column:43},end:{line:913,column:7}}],line:911},"32":{loc:{start:{line:911,column:22},end:{line:911,column:38}},type:"binary-expr",locations:[{start:{line:911,column:22},end:{line:911,column:33}},{start:{line:911,column:37},end:{line:911,column:38}}],line:911},"33":{loc:{start:{line:918,column:4},end:{line:931,column:5}},type:"if",locations:[{start:{line:918,column:4},end:{line:931,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:918},"34":{loc:{start:{line:922,column:16},end:{line:924,column:9}},type:"binary-expr",locations:[{start:{line:922,column:16},end:{line:922,column:46}},{start:{line:922,column:50},end:{line:924,column:9}}],line:922},"35":{loc:{start:{line:922,column:24},end:{line:922,column:45}},type:"binary-expr",locations:[{start:{line:922,column:24},end:{line:922,column:40}},{start:{line:922,column:44},end:{line:922,column:45}}],line:922},"36":{loc:{start:{line:925,column:8},end:{line:928,column:9}},type:"if",locations:[{start:{line:925,column:8},end:{line:928,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:925},"37":{loc:{start:{line:933,column:4},end:{line:1021,column:5}},type:"if",locations:[{start:{line:933,column:4},end:{line:1021,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:933},"38":{loc:{start:{line:946,column:8},end:{line:948,column:9}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:946},"39":{loc:{start:{line:950,column:10},end:{line:950,column:56}},type:"binary-expr",locations:[{start:{line:950,column:10},end:{line:950,column:35}},{start:{line:950,column:39},end:{line:950,column:51}},{start:{line:950,column:55},end:{line:950,column:56}}],line:950},"40":{loc:{start:{line:969,column:6},end:{line:971,column:7}},type:"if",locations:[{start:{line:969,column:6},end:{line:971,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:969},"41":{loc:{start:{line:973,column:6},end:{line:975,column:7}},type:"if",locations:[{start:{line:973,column:6},end:{line:975,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:973},"42":{loc:{start:{line:977,column:6},end:{line:987,column:7}},type:"if",locations:[{start:{line:977,column:6},end:{line:987,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:977},"43":{loc:{start:{line:977,column:10},end:{line:977,column:46}},type:"binary-expr",locations:[{start:{line:977,column:10},end:{line:977,column:19}},{start:{line:977,column:23},end:{line:977,column:46}}],line:977},"44":{loc:{start:{line:983,column:8},end:{line:986,column:9}},type:"if",locations:[{start:{line:983,column:8},end:{line:986,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:983},"45":{loc:{start:{line:988,column:6},end:{line:1019,column:7}},type:"if",locations:[{start:{line:988,column:6},end:{line:1019,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:988},"46":{loc:{start:{line:1007,column:12},end:{line:1013,column:13}},type:"if",locations:[{start:{line:1007,column:12},end:{line:1013,column:13}}],line:1007},"47":{loc:{start:{line:1008,column:14},end:{line:1008,column:70}},type:"binary-expr",locations:[{start:{line:1008,column:14},end:{line:1008,column:48}},{start:{line:1008,column:52},end:{line:1008,column:70}}],line:1008},"48":{loc:{start:{line:1036,column:16},end:{line:1036,column:47}},type:"cond-expr",locations:[{start:{line:1036,column:23},end:{line:1036,column:40}},{start:{line:1036,column:43},end:{line:1036,column:47}}],line:1036},"49":{loc:{start:{line:1042,column:2},end:{line:1048,column:3}},type:"if",locations:[{start:{line:1042,column:2},end:{line:1048,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:1042},"50":{loc:{start:{line:1042,column:6},end:{line:1045,column:29}},type:"binary-expr",locations:[{start:{line:1042,column:6},end:{line:1042,column:24}},{start:{line:1045,column:8},end:{line:1045,column:29}}],line:1042},"51":{loc:{start:{line:1054,column:8},end:{line:1054,column:79}},type:"cond-expr",locations:[{start:{line:1054,column:25},end:{line:1054,column:45}},{start:{line:1054,column:48},end:{line:1054,column:79}}],line:1054},"52":{loc:{start:{line:1063,column:13},end:{line:1065,column:45}},type:"binary-expr",locations:[{start:{line:1063,column:13},end:{line:1063,column:30}},{start:{line:1065,column:9},end:{line:1065,column:25}},{start:{line:1065,column:29},end:{line:1065,column:44}}],line:1063}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0],"7":[0,0],"8":[0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0],"25":[0],"26":[0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0],"39":[0,0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b8e64de35cadb4dc710e2ac97e86dc59eb12445d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_pmr8wb3j7=function(){return actualCoverage;};}return actualCoverage;}cov_pmr8wb3j7();import Formats from'./formats.js';import{// jamilih
jml,// typeson-registry
Typeson,getJSONType,structuredCloningThrowing}from'./vendor-imports.js';import{$e,$$e}from'./utils/templateUtils.js';import nullType from'./fundamentalTypes/nullType.js';import trueType from'./subTypes/trueType.js';import falseType from'./subTypes/falseType.js';import nanType from'./fundamentalTypes/nanType.js';import blobHTMLType from'./subTypes/blobHTMLType.js';import booleanType from'./fundamentalTypes/booleanType.js';import numberType from'./fundamentalTypes/numberType.js';import bigintType from'./fundamentalTypes/bigintType.js';import bigintObjectType from'./fundamentalTypes/bigintObjectType.js';import stringType from'./fundamentalTypes/stringType.js';import arrayReferenceType from'./fundamentalTypes/arrayReferenceType.js';import objectReferenceType from'./fundamentalTypes/objectReferenceType.js';import arrayType from'./fundamentalTypes/arrayType.js';import tupleType from'./fundamentalTypes/tupleType.js';import objectType from'./fundamentalTypes/objectType.js';import recordType from'./fundamentalTypes/recordType.js';import dateType from'./fundamentalTypes/dateType.js';import enumType from'./fundamentalTypes/enumType.js';import setType from'./fundamentalTypes/setType.js';import mapType from'./fundamentalTypes/mapType.js';import literalType from'./fundamentalTypes/literalType.js';import undefinedType from'./fundamentalTypes/undefinedType.js';import voidType from'./fundamentalTypes/voidType.js';import regexpType from'./fundamentalTypes/regexpType.js';import BooleanObjectType from'./fundamentalTypes/BooleanObjectType.js';import NumberObjectType from'./fundamentalTypes/NumberObjectType.js';import StringObjectType from'./fundamentalTypes/StringObjectType.js';// import sparseUndefinedType from './fundamentalTypes/sparseUndefinedType.js';
import SpecialRealNumberSuperType from'./superTypes/SpecialRealNumberType.js';import SpecialNumberSuperType from'./superTypes/SpecialNumberType.js';import errorType from'./fundamentalTypes/errorType.js';import errorsSpecialType from'./superTypes/errorsSpecialType.js';import fileType from'./fundamentalTypes/fileType.js';import filelistType from'./fundamentalTypes/filelistType.js';import blobType from'./fundamentalTypes/blobType.js';import domexceptionType from'./fundamentalTypes/domexceptionType.js';import domrectType from'./superTypes/domrectType.js';import dompointType from'./superTypes/dompointType.js';import dommatrixType from'./superTypes/dommatrixType.js';import buffersourceType from'./superTypes/buffersourceType.js';import noneditableType from'./fundamentalTypes/noneditableType.js';import neverType from'./fundamentalTypes/neverType.js';import catchType from'./fundamentalTypes/catchType.js';import nativeEnumType from'./fundamentalTypes/nativeEnumType.js';import symbolType from'./fundamentalTypes/symbolType.js';import promiseType from'./fundamentalTypes/promiseType.js';import functionType from'./fundamentalTypes/functionType.js';/**
 * Utility to retrieve the property value given a legend element.
 * @param {HTMLLegendElement} legend
 * @returns {string}
 */cov_pmr8wb3j7().s[0]++;export const getPropertyValueFromLegend=legend=>{cov_pmr8wb3j7().f[0]++;const propElem=(cov_pmr8wb3j7().s[1]++,$e(legend,'*[data-prop="true"]'));cov_pmr8wb3j7().s[2]++;if(!propElem){cov_pmr8wb3j7().b[0][0]++;cov_pmr8wb3j7().s[3]++;throw new Error('No property on the supplied legend element');}else{cov_pmr8wb3j7().b[0][1]++;}cov_pmr8wb3j7().s[4]++;if(propElem.nodeName.toLowerCase()==='input'){cov_pmr8wb3j7().b[1][0]++;cov_pmr8wb3j7().s[5]++;return/** @type {HTMLInputElement} */propElem.value;}else{cov_pmr8wb3j7().b[1][1]++;}cov_pmr8wb3j7().s[6]++;if(!propElem.textContent){cov_pmr8wb3j7().b[2][0]++;cov_pmr8wb3j7().s[7]++;throw new Error('No property with text present on the supplied legend element');}else{cov_pmr8wb3j7().b[2][1]++;}// 1-based to 0-based
cov_pmr8wb3j7().s[8]++;return String(Number.parseInt(propElem.textContent)-1);};/**
 * Any other possibilities than `div`?
 * @typedef {HTMLDivElement} RootElement
 */ /**
 * Utility to retrieve the type out of a type root element.
 * @callback GetTypeForRoot
 * @param {?RootElement} root
 * @returns {string} Why would it not exist?
 */ /**
 * Utility to get the value out of a type root element with a given
 *   state and path.
 * @callback GetValueForRoot
 * @param {RootElement} root
 * @param {StateObject} [stateObj]
 * @param {string} [currentPath]
 * @returns {StructuredCloneValue}
 */ /**
 * Utility to get the form control (e.g., input element) for a root.
 * @callback GetFormControlForRoot
 * @param {RootElement} root
 * @returns {null|
 *   HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|HTMLButtonElement}
 */ /**
 * Utility to get the value for a root using its ancestor and state.
 * @callback GetValueFromRootAncestor
 * @param {string|HTMLElement} selOrEl
 * @param {StateObject} [stateObj]
 * @returns {StructuredCloneValue}
 */ /**
 * @callback GetFormControlFromRootAncestor
 * @param {string|HTMLElement} selOrEl
 * @returns {null|HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|
 *   HTMLButtonElement}
 */ /**
 * @typedef {number} Integer
 */ /**
 * @callback GetOptionForType
 * @param {AvailableArbitraryType} type
 * @param {import('./formatAndTypeChoices.js').ZodexSchema|
 *   undefined} [schemaContent]
 * @returns {[string, {value: AvailableType, title?: string}]}
 */ /**
 * @callback GetTypeOptionsForFormatAndState
 * @param {import('./formats.js').AvailableFormat} format
 * @param {string} [parserState]
 * @param {import('./formatAndTypeChoices.js').ZodexSchema|
 *   undefined} [schemaContent]
 * @param {import('./formatAndTypeChoices.js').ZodexSchema|
 *   undefined} [schemaOriginal]
 * @returns {{
 *   typeOptions: [string, {value: AvailableType, title?: string}][],
 *   schemaObjects: import('./formats/schema.js').ZodexSchema[]
 * }}
 */ /**
* @typedef {{
*   typeNamespace?: string,
*   "readonly"?: boolean,
*   format?: import('./formats.js').AvailableFormat,
*   formats?: import('./formats.js').default,
*   types?: Types,
*   error?: Error,
*   rootUI?: Element,
*   schema?: string,
*   schemaParent?: import('./formats/schema.js').ZodexSchema,
*   schemaContent?: import('./formats/schema.js').ZodexSchema,
*   specificSchema?: import('./formats/schema.js').ZodexSchema,
*   specificSchemas?: import('./formats/schema.js').ZodexSchema[],
*   paths?: {[currentPath: string]: {
*     referentPath: string,
*     expectArrayReferent: boolean
*   }},
*   handlingReference?: boolean
* }} StateObject
*/ /* eslint-disable jsdoc/valid-types -- readonly reserved */ /**
 * @typedef {(cfg: {
 *   readonly?: boolean,
 *   resultType?: "both"|"keys"|"values",
 *   typeNamespace?: string,
 *   type: AvailableArbitraryType,
 *   topRoot?: RootElement,
 *   bringIntoFocus?: boolean|undefined,
 *   buildTypeChoices?: import('./typeChoices.js').BuildTypeChoices,
 *   format: import('./formats.js').AvailableFormat,
 *   schemaContent?: import('./formats/schema.js').ZodexSchema
 *   specificSchemaObject?: import('./formats/schema.js').ZodexSchema
 *   value: StructuredCloneValue,
 *   hasValue: boolean,
 *   replaced?: StructuredCloneValue,
 *   schemaFallingBack?: boolean
 * }) => HTMLElement} GetUIForModeAndType
 */ /* eslint-enable jsdoc/valid-types -- readonly reserved */ /**
 * @typedef {(cfg: {
 *   form: HTMLFormElement,
 *   typeNamespace?: string,
 *   keySelectClass?: string,
 * }) => boolean} ValidValuesSet
 */ /**
 * @typedef {(cfg: {
 *   topRoot: RootElement
 * }) => void} ValidateAllReferences
 */ /**
 * @typedef {(cfg: {
 *   type: AvailableArbitraryType,
 *   root: RootElement,
 *   topRoot?: RootElement,
 *   avoidReport?: boolean
 * }) => boolean} Validate
 */ /**
 * @typedef {(cfg: {
 *   type: AvailableArbitraryType,
 *   root: RootElement,
 *   value: StructuredCloneValue,
 * }) => void} SetValue
 */ /**
 * @typedef {(s: string, cfg: {
 *   format: import('./formats.js').AvailableFormat,
 *   state?: string,
 *   endMatchTypeObjs?: TypeObject[]
 *   firstRun?: boolean,
 *   rootHolder?: [
 *     type: string,
 *     parent: {[key: string]: any}|undefined,
 *     parentPath: string|number|undefined,
 *     path: string
 *   ][],
 *   parent?: {[key: string]: any},
 *   parentPath?: string|number,
 *   schemaObject?: import('./formatAndTypeChoices.js').ZodexSchema|undefined
 *   schemaOriginal?: import('./formatAndTypeChoices.js').ZodexSchema|undefined
 * }) => [
*   value: StructuredCloneValue,
*   remnant: string,
*   beginOnly: boolean,
*   assign: boolean
* ]} GetValueForString
*/ /**
 * @typedef {(
 *   info: {topRoot: HTMLDivElement}
 * ) => void} CustomValidateAllReferences
 */ /**
 * @typedef {import('./formats.js').StructuredCloneValue} StructuredCloneValue
 */ /**
 * @typedef {import('jamilih').JamilihArray} JamilihArray
 */ /**
 * @typedef {{
 *   format: import('./formats.js').AvailableFormat,
 *   match: boolean|RegExpMatchArray|null
 *   endMatchTypeObjs: TypeObject[],
 *   remnant: string,
 *   rootHolder: [
 *     type: string,
 *     parent: object|undefined,
 *     parentPath: string|number|undefined,
 *     path: string
 *   ][],
 *   parent?: object,
 *   parentPath?: string|number,
 *   types?: Types
 *   schemaObject?: import('./formatAndTypeChoices.js').ZodexSchema|undefined
 * }} RootInfo
 */ /**
 * @typedef {(
 *   info: {
*     root: HTMLDivElement,
*     value: StructuredCloneValue
*   }
* ) => void} TypeObjectSetValue
 */ /**
 * @typedef {(
 *   s: string, info?: RootInfo
 * ) => {
 *   value?: StructuredCloneValue,
 *   remnant?: string,
 *   assign?: false
 * }} ToValue
 */ /**
 * @typedef {object} TypeObject
 * @property {[
 *   string, {value?: AvailableType, title?: string}?
 * ]} option Creates the option HTML. May set an option `title` or `value`
 * @property {boolean} [array] Private context variable. Whether or not
 *   it is an array. Do not use in other types.
 * @property {boolean} [map] Private context variable. Whether or not
 *   it is a `Map`. Do not use in other types.
 * @property {boolean} [set] Private context variable. Whether or not
 *   it is a `Set`. Do not use in other types.
 * @property {boolean} [record] Private context variable. Whether or not
 *   it is a `Record`. Do not use in other types.
 * @property {boolean} [tuple] Private context variable. Whether or not
 *   it is a tuple type. Do not use in other types.
 * @property {boolean} [filelist] Private context variable. Whether or not
 *   it is a `FileList` type. Do not use in other types.
 * @property {boolean} [sparse] Private context variable. Whether or not
 *   it is a sparse array. Do not use in other types.
 * @property {boolean} [valid] Private context variable. Whether or not
 *   it is a valid date. Do not use in other types.
 * @property {string[]} [regexEndings] Used for string parsing.
 * @property {RegExp|((nonGrouping?: boolean) => RegExp)} [stringRegex] Used
 *   for string parsing. If not present, use `stringRegexBegin` and
 *   `stringRegexEnd`.
 * @property {RegExp} [stringRegexBegin] Used for string parsing. If not
 *   present, use `stringRegex`
 * @property {RegExp} [stringRegexEnd] Used for string parsing. If not
 *   present, use `stringRegex`
 * @property {(
 *   v: StructuredCloneValue
 * ) => boolean} [valueMatch] Function to check whether this type or subtype
 *   matches
 * @property {string} [superType] The greater fundamental type to which
 *   the type belongs
 * @property {ToValue} [toValue] Converts from string to value. May use
 *   `stringRegex` to find components.
 * @property {(info: {
 *   root: HTMLDivElement,
 *   stateObj?: StateObject,
 *   currentPath?: string
 * }) =>
 *  StructuredCloneValue
 * } getValue Gets the value for the type
 * @property {TypeObjectSetValue} [setValue] Should set the value of the
 *   form's `getInput` element
 * @property {(info: {
 *   value?: StructuredCloneValue,
 *   typeNamespace?: string,
 *   type?: AvailableArbitraryType,
 *   topRoot?: HTMLDivElement,
 *   resultType?: "keys"|"values"|"both",
 *   format: import('./formats.js').AvailableFormat,
 *   specificSchemaObject?: import('./formats/schema.js').ZodexSchema,
 *   types: Types
 *   bringIntoFocus?: boolean|undefined,
 *   buildTypeChoices?: import('./typeChoices.js').BuildTypeChoices,
 *   schemaContent?: import('./formats/schema.js').ZodexSchema
 *   replaced?: any
 * }) => JamilihArray} viewUI
 * @property {(info: {
 *   value?: StructuredCloneValue,
 *   typeNamespace?: string,
 *   bringIntoFocus?: boolean,
 *   format?: import('./formats.js').AvailableFormat,
 *   formats?: import('./formats.js').default,
 *   types: Types,
 *   resultType?: "keys"|"values"|"both",
 *   type?: AvailableArbitraryType,
 *   forcedState?: string,
 *   buildTypeChoices?: import('./typeChoices.js').BuildTypeChoices,
 *   topRoot?: HTMLDivElement
 *   schemaContent?: import('./formats/schema.js').ZodexSchema,
 *   specificSchemaObject?: import('./formats/schema.js').ZodexSchema,
 *   schemaFallingBack?: boolean
 * }) => JamilihArray} editUI
 * @property {(info: {root: HTMLDivElement}) =>
 *   HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|
 *   HTMLButtonElement} getInput Gets the form control (with `value`)
 * @property {(
 *   info: {root: HTMLDivElement}
 * ) => HTMLSelectElement} [getSelect]
 * @property {(path: string, value: StructuredCloneValue) =>
 *   StructuredCloneValue} [resolveReference] Gets the reference. For array
 *   and object references types only
 * @property {(info: {root: HTMLDivElement, topRoot?: HTMLDivElement}) => {
 *   message?: string,
 *   valid: boolean
 * }} [validate] Message will be used if validity is false.
 * @property {(info: {
 *   topRoot: HTMLDivElement,
 *   types: Types
 * }) => void} [validateAll] For
 *   validation of array and object references only.
 * @property {{
 *   structuredCloning: {
 *     after: AvailableType,
 *     contexts: string[]
 *   }
 * }} [stateDependent] The type after which it should be placed and its
 *   context types
 */ /**
 * @typedef {"null"|"true"|"false"|"number"|"bigint"|"bigintObject"|
 *   "string"|"arrayReference"|
 *   "objectReference"|"array"|"object"|"date"|"userObject"|"undef"|
 *   "SpecialRealNumber"|"SpecialNumber"|"regexp"|"BooleanObject"|
 *   "NumberObject"|"StringObject"|"map"|"set"|"file"|"filelist"|"blobHTML"|
 *   "buffersource"|"dataview"|"imagedata"|"imagebitmap"|
 *   "int8array"|"uint8array"|"uint8clampedarray"|"int16array"|"uint16array"|
 *   "int32array"|"uint32array"|"float32array"|"float64array"|"ValidDate"|
 *   "arrayNonindexKeys"|"error"|"errors"|"blob"|"domexception"|"domrect"|
 *   "dompoint"|"dommatrix"|"resurrectable"|"boolean"|"nan"|"tuple"|
 *   "record"|"void"|"enum"|"literal"|"never"|"catch"|"nativeEnum"
 * } AvailableType
 */ /**
 * @typedef {AvailableType|"symbol"|"promise"|"function"} AvailableArbitraryType
 */ /**
 * @typedef {TypeObject & {
*   childTypes: string[]
* }} SuperTypeObject
*/ /**
 *
 */class Types{/**
   *
   */constructor(){cov_pmr8wb3j7().f[1]++;cov_pmr8wb3j7().s[9]++;this.formats=new Formats();// Todo: Make customizable and test
/** @type {CustomValidateAllReferences|undefined} */cov_pmr8wb3j7().s[10]++;this.customValidateAllReferences=undefined;/**
     * @type {{
     *   [key in AvailableArbitraryType]: Partial<TypeObject>|string[]
     * }}
     */cov_pmr8wb3j7().s[11]++;this.availableTypes={null:nullType,true:trueType,false:falseType,nan:nanType,// Schema type
boolean:booleanType,// Schema type
number:numberType,bigint:bigintType,bigintObject:bigintObjectType,string:stringType,arrayReference:arrayReferenceType,objectReference:objectReferenceType,array:arrayType,tuple:tupleType,// Schema type
// Note: We don't do for BooleanObject/NumberObject/StringObject, date,
//   regexp, as added properties on them are not being cloned (in Chrome
//   at least)
object:objectType,record:recordType,// Schema type
date:dateType,enum:enumType,// This type is only for throwing upon cloning errors:
// 'checkDataCloneException'
// This type might be supported by evaluable JS or config
//   passed in:
userObject:['User objects'],undef:undefinedType,void:voidType,SpecialRealNumber:SpecialRealNumberSuperType,SpecialNumber:SpecialNumberSuperType,error:errorType,errors:errorsSpecialType,regexp:regexpType,BooleanObject:BooleanObjectType,NumberObject:NumberObjectType,StringObject:StringObjectType,literal:literalType,map:mapType,set:setType,file:fileType,filelist:filelistType,blob:blobType,blobHTML:blobHTMLType,domexception:domexceptionType,domrect:domrectType,dompoint:dompointType,dommatrix:dommatrixType,resurrectable:noneditableType,never:neverType,symbol:symbolType,// Non-cloning type
promise:promiseType,function:functionType,catch:catchType,nativeEnum:nativeEnumType,buffersource:buffersourceType,dataview:{option:['DataView']},imagedata:{option:['ImageData']},imagebitmap:{option:['ImageBitmap']},// Typed Arrays
int8array:{option:['Int8Array']},uint8array:{option:['Uint8Array']},uint8clampedarray:{option:['Uint8ClampedArray']},int16array:{option:['Int16Array']},uint16array:{option:['Uint16Array']},int32array:{option:['Int32Array']},uint32array:{option:['Uint32Array']},float32array:{option:['Float32Array']},float64array:{option:['Float64Array']},// We're catching this instead of using this
// sparseUndefined: sparseUndefinedType,
ValidDate:{valid:true},/*
      sparseArrays: {
          sparse: true
      },
      */arrayNonindexKeys:{sparse:true}};/**
     * @param {[
     *   copyFrom: AvailableType, copyTo: AvailableType
     * ][]} replacements
     * @returns {void}
     */cov_pmr8wb3j7().s[12]++;const copyTypeObjs=replacements=>{cov_pmr8wb3j7().f[2]++;cov_pmr8wb3j7().s[13]++;replacements.forEach(([copyFrom,copyTo])=>{cov_pmr8wb3j7().f[3]++;cov_pmr8wb3j7().s[14]++;Object.assign(this.availableTypes[(/** @type {AvailableType} */copyTo)],this.availableTypes[(/** @type {AvailableType} */copyFrom)]);});};cov_pmr8wb3j7().s[15]++;copyTypeObjs([(/** @type {[AvailableType, AvailableType]} */['date','ValidDate']),// 'sparseArrays'
/** @type {[AvailableType, AvailableType]} */['array','arrayNonindexKeys']]);/**
     * @type {{
     *   [key: string]: {
     *     [key: string]: {type: AvailableType, after: AvailableType}[]
     *   }
     * }}
     */cov_pmr8wb3j7().s[16]++;this.contexts={};cov_pmr8wb3j7().s[17]++;Object.entries(this.availableTypes).forEach(([typ,typeObj])=>{cov_pmr8wb3j7().f[4]++;const type=(/** @type {AvailableType} */cov_pmr8wb3j7().s[18]++,typ);const{stateDependent}=(/** @type {TypeObject} */cov_pmr8wb3j7().s[19]++,typeObj);cov_pmr8wb3j7().s[20]++;if(stateDependent){cov_pmr8wb3j7().b[3][0]++;cov_pmr8wb3j7().s[21]++;Object.entries(stateDependent).forEach(([format,formatStateDependent])=>{cov_pmr8wb3j7().f[5]++;cov_pmr8wb3j7().s[22]++;if(!this.contexts[format]){cov_pmr8wb3j7().b[4][0]++;cov_pmr8wb3j7().s[23]++;this.contexts[format]={};}else{cov_pmr8wb3j7().b[4][1]++;}const{contexts,after}=(cov_pmr8wb3j7().s[24]++,formatStateDependent);cov_pmr8wb3j7().s[25]++;contexts.forEach(context=>{cov_pmr8wb3j7().f[6]++;cov_pmr8wb3j7().s[26]++;if(!this.contexts[format][context]){cov_pmr8wb3j7().b[5][0]++;cov_pmr8wb3j7().s[27]++;this.contexts[format][context]=[];}else{cov_pmr8wb3j7().b[5][1]++;}cov_pmr8wb3j7().s[28]++;this.contexts[format][context].push({type,after});});});}else{cov_pmr8wb3j7().b[3][1]++;}});}/**
   * @param {import('./formats.js').AvailableFormat} format
   * @param {StructuredCloneValue} record
   * @param {StateObject} stateObj
   * @returns {Promise<Element>}
   */async getControlsForFormatAndValue(format,record,stateObj){cov_pmr8wb3j7().f[7]++;cov_pmr8wb3j7().s[29]++;return(await this.formats.getControlsForFormatAndValue(this,format,record,stateObj)).rootUI;}/**
   * @param {import('./formats.js').AvailableFormat} format
   * @param {string} context
   * @returns {{
   *   type: AvailableType
   *   after: AvailableType
   * }[]}
   */getContextInfo(format,context){cov_pmr8wb3j7().f[8]++;cov_pmr8wb3j7().s[30]++;return this.contexts[format][context];}/** @type {GetValueForRoot} */getValueForRoot(root,stateObj,currentPath){cov_pmr8wb3j7().f[9]++;const typeObject=(/** @type {TypeObject} */cov_pmr8wb3j7().s[31]++,this.availableTypes[(/** @type {AvailableType} */Types.getTypeForRoot(root))]);// Ensure `stateObj` remains a reference if present
/* istanbul ignore next -- Guard */return typeObject.getValue({root,/* istanbul ignore next -- Guard */stateObj:stateObj??{types:this},currentPath});}/** @type {GetFormControlForRoot} */getFormControlForRoot(root){cov_pmr8wb3j7().f[10]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[32]++,this.availableTypes[(/** @type {AvailableType} */Types.getTypeForRoot(root))]);/* istanbul ignore if -- All have except aliases */cov_pmr8wb3j7().s[33]++;if(!typeObj.getInput){return null;}else{cov_pmr8wb3j7().b[6][0]++;}cov_pmr8wb3j7().s[34]++;return typeObj.getInput({root});}/** @type {GetValueFromRootAncestor} */getValueFromRootAncestor(selOrEl,stateObj){cov_pmr8wb3j7().f[11]++;cov_pmr8wb3j7().s[35]++;return this.getValueForRoot(/** @type {RootElement} */$e(selOrEl,'div[data-type]'),{...stateObj,types:this,formats:this.formats});}/** @type {GetFormControlFromRootAncestor} */getFormControlFromRootAncestor(selOrEl){cov_pmr8wb3j7().f[12]++;const root=(/** @type {RootElement} */cov_pmr8wb3j7().s[36]++,$e(selOrEl,'div[data-type]'));cov_pmr8wb3j7().s[37]++;if(!root){cov_pmr8wb3j7().b[7][0]++;cov_pmr8wb3j7().s[38]++;return null;}else{cov_pmr8wb3j7().b[7][1]++;}cov_pmr8wb3j7().s[39]++;return this.getFormControlForRoot(root);}/** @type {GetOptionForType} */getOptionForType(type,schemaContent=(cov_pmr8wb3j7().b[8][0]++,undefined)){cov_pmr8wb3j7().f[13]++;const availableType=(/** @type {TypeObject} */cov_pmr8wb3j7().s[40]++,this.availableTypes[type]);/** @type {[string, {value?: AvailableArbitraryType, title?: string}?]} */const optInfo=(cov_pmr8wb3j7().s[41]++,[...availableType.option]);cov_pmr8wb3j7().s[42]++;if((cov_pmr8wb3j7().b[10][0]++,schemaContent)&&(cov_pmr8wb3j7().b[10][1]++,schemaContent.description)){cov_pmr8wb3j7().b[9][0]++;cov_pmr8wb3j7().s[43]++;optInfo[0]=`${optInfo[0]} (${schemaContent.description})`;}else{cov_pmr8wb3j7().b[9][1]++;}cov_pmr8wb3j7().s[44]++;optInfo[1]={value:type,...optInfo[1]};cov_pmr8wb3j7().s[45]++;return/** @type {[string, {value: AvailableType, title?: string}]} */optInfo;}/** @type {GetTypeOptionsForFormatAndState} */getTypeOptionsForFormatAndState(format,parserState,schemaContent,schemaOriginal){cov_pmr8wb3j7().f[14]++;const typesForFormatAndState=(cov_pmr8wb3j7().s[46]++,this.formats.getTypesAndSchemasForFormatAndState(this,format,parserState,schemaContent,schemaOriginal));cov_pmr8wb3j7().s[47]++;if(!typesForFormatAndState){cov_pmr8wb3j7().b[11][0]++;cov_pmr8wb3j7().s[48]++;throw new Error('Unexpected type for format and state');}else{cov_pmr8wb3j7().b[11][1]++;}cov_pmr8wb3j7().s[49]++;return{typeOptions:typesForFormatAndState.types.map((type,idx)=>{cov_pmr8wb3j7().f[15]++;cov_pmr8wb3j7().s[50]++;return this.getOptionForType(type,typesForFormatAndState.schemaObjects[idx]);}),schemaObjects:typesForFormatAndState.schemaObjects};}/** @type {GetUIForModeAndType} */getUIForModeAndType({readonly,resultType,typeNamespace,type,topRoot,bringIntoFocus,buildTypeChoices,format,schemaContent,value,hasValue,replaced,specificSchemaObject,schemaFallingBack}){cov_pmr8wb3j7().f[16]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[51]++,this.availableTypes[type]);const arg=(cov_pmr8wb3j7().s[52]++,hasValue?(cov_pmr8wb3j7().b[12][0]++,{typeNamespace,type,buildTypeChoices,format,schemaContent,resultType,topRoot,bringIntoFocus,value,replaced,specificSchemaObject,schemaFallingBack,types:this}):(cov_pmr8wb3j7().b[12][1]++,{typeNamespace,type,buildTypeChoices,format,schemaContent,resultType,topRoot,bringIntoFocus,replaced,specificSchemaObject,schemaFallingBack,types:this}));const root=(/** @type {HTMLDivElement} */cov_pmr8wb3j7().s[53]++,jml(...(readonly?(cov_pmr8wb3j7().b[13][0]++,typeObj.viewUI(arg)):(cov_pmr8wb3j7().b[13][1]++,typeObj.editUI(arg)))));cov_pmr8wb3j7().s[54]++;if((cov_pmr8wb3j7().b[15][0]++,!readonly)&&(cov_pmr8wb3j7().b[15][1]++,typeObj.validate)){cov_pmr8wb3j7().b[14][0]++;const formControl=(cov_pmr8wb3j7().s[55]++,typeObj.getInput({root}));cov_pmr8wb3j7().s[56]++;formControl.addEventListener('input',()=>{cov_pmr8wb3j7().f[17]++;cov_pmr8wb3j7().s[57]++;this.validate({type,root,topRoot});});}else{cov_pmr8wb3j7().b[14][1]++;}cov_pmr8wb3j7().s[58]++;return root;}/** @type {ValidateAllReferences} */validateAllReferences({topRoot}){cov_pmr8wb3j7().f[18]++;cov_pmr8wb3j7().s[59]++;/* istanbul ignore if -- Unreachable? */if(!topRoot){console.log('No references present');return;}else{cov_pmr8wb3j7().b[16][0]++;}// Could just hard-code arrayReference and objectReference,
//  but we'll try to avoid depending on specific types
cov_pmr8wb3j7().s[60]++;Object.values(this.availableTypes).forEach(typeObj=>{cov_pmr8wb3j7().f[19]++;const typeObject=(/** @type {TypeObject} */cov_pmr8wb3j7().s[61]++,typeObj);cov_pmr8wb3j7().s[62]++;if(typeObject.validateAll){cov_pmr8wb3j7().b[17][0]++;cov_pmr8wb3j7().s[63]++;typeObject.validateAll({topRoot,types:this});}else{cov_pmr8wb3j7().b[17][1]++;}});cov_pmr8wb3j7().s[64]++;if(this.customValidateAllReferences){cov_pmr8wb3j7().b[18][0]++;cov_pmr8wb3j7().s[65]++;this.customValidateAllReferences({topRoot});}else{cov_pmr8wb3j7().b[18][1]++;}}/** @type {Validate} */validate({type,root,topRoot,avoidReport}){cov_pmr8wb3j7().f[20]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[66]++,this.availableTypes[type]);// Todo (low): We limit for now to input boxes which have `validate`
cov_pmr8wb3j7().s[67]++;if(typeObj.validate){cov_pmr8wb3j7().b[19][0]++;const{valid,message}=(cov_pmr8wb3j7().s[68]++,typeObj.validate({root,topRoot}));const formControl=(cov_pmr8wb3j7().s[69]++,typeObj.getInput({root}));cov_pmr8wb3j7().s[70]++;formControl.setCustomValidity(valid?(cov_pmr8wb3j7().b[20][0]++,''/* istanbul ignore next -- Should always have a message */):(cov_pmr8wb3j7().b[20][1]++,(cov_pmr8wb3j7().b[21][0]++,message)||(cov_pmr8wb3j7().b[21][1]++,'Invalid')));// We don't want a focus as `reportValidity` does in at least
//  some cases, but blur() would cause user to
//   leave input (used during input handler)
cov_pmr8wb3j7().s[71]++;if(!avoidReport){cov_pmr8wb3j7().b[22][0]++;cov_pmr8wb3j7().s[72]++;formControl.reportValidity();}else{cov_pmr8wb3j7().b[22][1]++;}cov_pmr8wb3j7().s[73]++;return valid;}else{cov_pmr8wb3j7().b[19][1]++;}cov_pmr8wb3j7().s[74]++;return true;}/** @type {SetValue} */setValue({type,root,value}){cov_pmr8wb3j7().f[21]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[75]++,this.availableTypes[type]);cov_pmr8wb3j7().s[76]++;if(typeObj.setValue){cov_pmr8wb3j7().b[23][0]++;cov_pmr8wb3j7().s[77]++;typeObj.setValue({root,value});}else{cov_pmr8wb3j7().b[23][1]++;}}// Todo (low): Should really add real parser
// Todo (low): Implement `getStringForValue` (e.g., to expose feature for
//          bookmarking object value currently in view); would not be
//          enough to iterate DOM to get string URL as we'd also like
//          the ability to have arbitrary JSON/structuredCloning sent to this
//          URL from other sites/programs (can currently pass in JSON
//          format to the URL, but that is still expecting our Router
//          string syntax)
/** @type {GetValueForString} */getValueForString(s,{format,state,endMatchTypeObjs=(cov_pmr8wb3j7().b[24][0]++,[]),firstRun=(cov_pmr8wb3j7().b[25][0]++,true),rootHolder=(cov_pmr8wb3j7().b[26][0]++,[]),parent,parentPath,schemaObject,schemaOriginal}){cov_pmr8wb3j7().f[22]++;const allowedTypes=(cov_pmr8wb3j7().s[78]++,this.formats.getTypesAndSchemasForFormatAndState(this,format,state,schemaObject,schemaOriginal)?.types);cov_pmr8wb3j7().s[79]++;if(!allowedTypes){cov_pmr8wb3j7().b[27][0]++;cov_pmr8wb3j7().s[80]++;throw new Error('Could not get types for format and state');}else{cov_pmr8wb3j7().b[27][1]++;}const allowedTypeObjs=(cov_pmr8wb3j7().s[81]++,Object.entries(this.availableTypes).filter(([type])=>{cov_pmr8wb3j7().f[23]++;cov_pmr8wb3j7().s[82]++;return allowedTypes.includes(/** @type {AvailableType} */type);}));const allowedTypeObjsVals=(cov_pmr8wb3j7().s[83]++,allowedTypeObjs.map(([,arr])=>{cov_pmr8wb3j7().f[24]++;cov_pmr8wb3j7().s[84]++;return arr;}));const reduced=(cov_pmr8wb3j7().s[85]++,allowedTypeObjsVals.reduce((array,typObj)=>{cov_pmr8wb3j7().f[25]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[86]++,typObj);let arr=(/** @type {string[]} */cov_pmr8wb3j7().s[87]++,array);cov_pmr8wb3j7().s[88]++;if(typeObj.regexEndings){cov_pmr8wb3j7().b[28][0]++;cov_pmr8wb3j7().s[89]++;arr.push(...typeObj.regexEndings);cov_pmr8wb3j7().s[90]++;arr=[...new Set(arr)];}else{cov_pmr8wb3j7().b[28][1]++;}cov_pmr8wb3j7().s[91]++;return arr;},[]));const endings=(cov_pmr8wb3j7().s[92]++,'|'+/** @type {string[]} */reduced.map(str=>{cov_pmr8wb3j7().f[26]++;cov_pmr8wb3j7().s[93]++;return escapeRegex(str);}).join('|'));/**
     * @type {RegExpMatchArray|boolean|null}
     */let match=(cov_pmr8wb3j7().s[94]++,null);let found=(cov_pmr8wb3j7().s[95]++,allowedTypeObjs.find(([/* _type */,typObj])=>{cov_pmr8wb3j7().f[27]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[96]++,typObj);let{stringRegex}=(cov_pmr8wb3j7().s[97]++,typeObj);cov_pmr8wb3j7().s[98]++;if(typeof typeObj.stringRegex==='function'){cov_pmr8wb3j7().b[29][0]++;cov_pmr8wb3j7().s[99]++;stringRegex=typeObj.stringRegex(true);}else{cov_pmr8wb3j7().b[29][1]++;}cov_pmr8wb3j7().s[100]++;stringRegex=stringRegex// Strip off terminal (dollar sign) when matching substrings
?(cov_pmr8wb3j7().b[30][0]++,new RegExp(/** @type {RegExp} */stringRegex.source.slice(0,-1)+'(?=$'+endings+')','u')):(cov_pmr8wb3j7().b[30][1]++,stringRegex);cov_pmr8wb3j7().s[101]++;match=(cov_pmr8wb3j7().b[31][0]++,Boolean((cov_pmr8wb3j7().b[32][0]++,stringRegex)&&(cov_pmr8wb3j7().b[32][1]++,s)))&&(cov_pmr8wb3j7().b[31][1]++,s.match(/** @type {RegExp} */stringRegex));cov_pmr8wb3j7().s[102]++;return match;}));let beginOnly=(cov_pmr8wb3j7().s[103]++,false);cov_pmr8wb3j7().s[104]++;if(found===undefined){cov_pmr8wb3j7().b[33][0]++;cov_pmr8wb3j7().s[105]++;found=allowedTypeObjs.find(([/* _type */,typObj])=>{cov_pmr8wb3j7().f[28]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[106]++,typObj);const{stringRegexBegin}=(cov_pmr8wb3j7().s[107]++,typeObj);cov_pmr8wb3j7().s[108]++;match=(cov_pmr8wb3j7().b[34][0]++,Boolean((cov_pmr8wb3j7().b[35][0]++,stringRegexBegin)&&(cov_pmr8wb3j7().b[35][1]++,s)))&&(cov_pmr8wb3j7().b[34][1]++,s.match(/** @type {RegExp} */stringRegexBegin));cov_pmr8wb3j7().s[109]++;if(match){cov_pmr8wb3j7().b[36][0]++;cov_pmr8wb3j7().s[110]++;beginOnly=true;cov_pmr8wb3j7().s[111]++;endMatchTypeObjs.push(typeObj);}else{cov_pmr8wb3j7().b[36][1]++;}cov_pmr8wb3j7().s[112]++;return match;});}else{cov_pmr8wb3j7().b[33][1]++;}let assign=(cov_pmr8wb3j7().s[113]++,true);cov_pmr8wb3j7().s[114]++;if(found!==undefined){cov_pmr8wb3j7().b[37][0]++;// The `found` is evaluated again, so sets `match` to non-null
const mtch=(/** @type {RegExpMatchArray} */ /** @type {unknown} */cov_pmr8wb3j7().s[115]++,match);const[content,innerContent]=(cov_pmr8wb3j7().s[116]++,mtch);let remnant=(cov_pmr8wb3j7().s[117]++,s.slice(content.length));cov_pmr8wb3j7().s[118]++;s=s.slice(0,content.length);// console.log('s0', s, '::', remnant, match);
let valObj;cov_pmr8wb3j7().s[119]++;try{const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[120]++,found[1]);/* istanbul ignore if -- TS guard */cov_pmr8wb3j7().s[121]++;if(!typeObj.toValue){throw new Error('Type has no `toValue` method');}else{cov_pmr8wb3j7().b[38][0]++;}cov_pmr8wb3j7().s[122]++;valObj=typeObj.toValue((cov_pmr8wb3j7().b[39][0]++,mtch.groups?.innerContent)||(cov_pmr8wb3j7().b[39][1]++,innerContent)||(cov_pmr8wb3j7().b[39][2]++,s),{types:this,format,match,endMatchTypeObjs,remnant,rootHolder,parent,parentPath,schemaObject});/* istanbul ignore next -- Good regexes should prevent */}catch(e){/* istanbul ignore next -- Good regexes should prevent */console.log('eee',e);/* istanbul ignore next -- Good regexes should prevent */throw e;}cov_pmr8wb3j7().s[123]++;if(valObj.assign===false){cov_pmr8wb3j7().b[40][0]++;cov_pmr8wb3j7().s[124]++;assign=false;}else{cov_pmr8wb3j7().b[40][1]++;}const{value}=(cov_pmr8wb3j7().s[125]++,valObj);cov_pmr8wb3j7().s[126]++;if(valObj.remnant!==undefined){cov_pmr8wb3j7().b[41][0]++;cov_pmr8wb3j7().s[127]++;({remnant}=valObj);}else{cov_pmr8wb3j7().b[41][1]++;}cov_pmr8wb3j7().s[128]++;if((cov_pmr8wb3j7().b[43][0]++,beginOnly)&&(cov_pmr8wb3j7().b[43][1]++,endMatchTypeObjs.length)){cov_pmr8wb3j7().b[42][0]++;const endMatch=(cov_pmr8wb3j7().s[129]++,remnant.match(/** @type {RegExp} */ /** @type {TypeObject} */endMatchTypeObjs.at(-1).stringRegexEnd));cov_pmr8wb3j7().s[130]++;if(endMatch){cov_pmr8wb3j7().b[44][0]++;cov_pmr8wb3j7().s[131]++;endMatchTypeObjs.pop();// Safe now to extract
cov_pmr8wb3j7().s[132]++;remnant=remnant.slice(endMatch[0].length);}else{cov_pmr8wb3j7().b[44][1]++;}}else{cov_pmr8wb3j7().b[42][1]++;}cov_pmr8wb3j7().s[133]++;if(firstRun){cov_pmr8wb3j7().b[45][0]++;// Todo: should take into account `format`, e.g., to widen to
//        allow `arbitraryJS` values; should also be using
//        `structuredCloningFixed`
const typeson=(cov_pmr8wb3j7().s[134]++,new Typeson().register(structuredCloningThrowing));cov_pmr8wb3j7().s[135]++;try{const topRoot=(cov_pmr8wb3j7().s[136]++,typeson.revive(value));cov_pmr8wb3j7().s[137]++;rootHolder.forEach(([type,parent,parentPath,path])=>{cov_pmr8wb3j7().f[29]++;const typeObject=(cov_pmr8wb3j7().s[138]++,this.availableTypes[(/** @type {AvailableType} */type+'Reference')]);// @ts-expect-error Reference method exists
const val=(cov_pmr8wb3j7().s[139]++,typeObject.resolveReference(path,topRoot));const basicType=(cov_pmr8wb3j7().s[140]++,getJSONType(val));// eslint-disable-next-line @stylistic/max-len -- Long
/* istanbul ignore else -- Successful reference always an object/array? */cov_pmr8wb3j7().s[141]++;if((cov_pmr8wb3j7().b[47][0]++,['array','object'].includes(type))&&(cov_pmr8wb3j7().b[47][1]++,basicType===type)){cov_pmr8wb3j7().b[46][0]++;cov_pmr8wb3j7().s[142]++;/** @type {{[key: string]: any}} */parent[(/** @type {string|number} */parentPath)]=val;}else{}});cov_pmr8wb3j7().s[143]++;return[topRoot,remnant,beginOnly,assign];}catch(err){cov_pmr8wb3j7().s[144]++;console.log('failed Typeson revival',err);}}else{cov_pmr8wb3j7().b[45][1]++;}cov_pmr8wb3j7().s[145]++;return[value,remnant,beginOnly,assign];}else{cov_pmr8wb3j7().b[37][1]++;}cov_pmr8wb3j7().s[146]++;throw new Error('Bad parsing data');}/**
   * @param {AvailableArbitraryType} type
   * @returns {Partial<TypeObject>|string[]}
   */getTypeObject(type){cov_pmr8wb3j7().f[30]++;cov_pmr8wb3j7().s[147]++;return this.availableTypes[type];}}/** @type {GetTypeForRoot} */cov_pmr8wb3j7().s[148]++;Types.getTypeForRoot=root=>{cov_pmr8wb3j7().f[31]++;cov_pmr8wb3j7().s[149]++;return String(root?(cov_pmr8wb3j7().b[48][0]++,root.dataset.type):(cov_pmr8wb3j7().b[48][1]++,root));};/** @type {ValidValuesSet} */cov_pmr8wb3j7().s[150]++;Types.validValuesSet=({form,typeNamespace,keySelectClass})=>{cov_pmr8wb3j7().f[32]++;cov_pmr8wb3j7().s[151]++;// If form is hidden, don't list errors by default
if((cov_pmr8wb3j7().b[50][0]++,!form.offsetParent)||(cov_pmr8wb3j7().b[50][1]++,// Not an invalid form (bad key or value)
// May be redundant as re-validating below
!form.checkValidity())){cov_pmr8wb3j7().b[49][0]++;cov_pmr8wb3j7().s[152]++;return false;}else{cov_pmr8wb3j7().b[49][1]++;}const typeChoices=(/** @type {(HTMLSelectElement & {$validate: () => boolean})[]} */cov_pmr8wb3j7().s[153]++,$$e(form,keySelectClass?(cov_pmr8wb3j7().b[51][0]++,`.${keySelectClass}`):(cov_pmr8wb3j7().b[51][1]++,`.typeChoices-${typeNamespace}`)));cov_pmr8wb3j7().s[154]++;return(// Specific value type set if present (any descendant, not
//   only the first) chosen
typeChoices.every(sel=>{cov_pmr8wb3j7().f[33]++;cov_pmr8wb3j7().s[155]++;// console.log('sel', sel.value !== '' && sel.$validate());
// Hidden are ok
return(cov_pmr8wb3j7().b[52][0]++,!sel.offsetParent)||// If present, must be valid
(cov_pmr8wb3j7().b[52][1]++,sel.value!=='')&&(cov_pmr8wb3j7().b[52][2]++,sel.$validate());})// Container of a specific type added (should always be present
//   if typeChoices non-empty)
// $e(form, '.typeContainer')
);};/**
 *
 * @param {string} str
 * @returns {string}
 */export function escapeRegex(str){cov_pmr8wb3j7().f[34]++;cov_pmr8wb3j7().s[156]++;return String(str).replaceAll(/[.\\+*?^[\]$(){}=!<>|:-]/gu,String.raw`\$&`);}export default Types;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcG1yOHdiM2o3IiwiYWN0dWFsQ292ZXJhZ2UiLCJGb3JtYXRzIiwiam1sIiwiVHlwZXNvbiIsImdldEpTT05UeXBlIiwic3RydWN0dXJlZENsb25pbmdUaHJvd2luZyIsIiRlIiwiJCRlIiwibnVsbFR5cGUiLCJ0cnVlVHlwZSIsImZhbHNlVHlwZSIsIm5hblR5cGUiLCJibG9iSFRNTFR5cGUiLCJib29sZWFuVHlwZSIsIm51bWJlclR5cGUiLCJiaWdpbnRUeXBlIiwiYmlnaW50T2JqZWN0VHlwZSIsInN0cmluZ1R5cGUiLCJhcnJheVJlZmVyZW5jZVR5cGUiLCJvYmplY3RSZWZlcmVuY2VUeXBlIiwiYXJyYXlUeXBlIiwidHVwbGVUeXBlIiwib2JqZWN0VHlwZSIsInJlY29yZFR5cGUiLCJkYXRlVHlwZSIsImVudW1UeXBlIiwic2V0VHlwZSIsIm1hcFR5cGUiLCJsaXRlcmFsVHlwZSIsInVuZGVmaW5lZFR5cGUiLCJ2b2lkVHlwZSIsInJlZ2V4cFR5cGUiLCJCb29sZWFuT2JqZWN0VHlwZSIsIk51bWJlck9iamVjdFR5cGUiLCJTdHJpbmdPYmplY3RUeXBlIiwiU3BlY2lhbFJlYWxOdW1iZXJTdXBlclR5cGUiLCJTcGVjaWFsTnVtYmVyU3VwZXJUeXBlIiwiZXJyb3JUeXBlIiwiZXJyb3JzU3BlY2lhbFR5cGUiLCJmaWxlVHlwZSIsImZpbGVsaXN0VHlwZSIsImJsb2JUeXBlIiwiZG9tZXhjZXB0aW9uVHlwZSIsImRvbXJlY3RUeXBlIiwiZG9tcG9pbnRUeXBlIiwiZG9tbWF0cml4VHlwZSIsImJ1ZmZlcnNvdXJjZVR5cGUiLCJub25lZGl0YWJsZVR5cGUiLCJuZXZlclR5cGUiLCJjYXRjaFR5cGUiLCJuYXRpdmVFbnVtVHlwZSIsInN5bWJvbFR5cGUiLCJwcm9taXNlVHlwZSIsImZ1bmN0aW9uVHlwZSIsInMiLCJnZXRQcm9wZXJ0eVZhbHVlRnJvbUxlZ2VuZCIsImxlZ2VuZCIsImYiLCJwcm9wRWxlbSIsImIiLCJFcnJvciIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJ2YWx1ZSIsInRleHRDb250ZW50IiwiU3RyaW5nIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJUeXBlcyIsImNvbnN0cnVjdG9yIiwiZm9ybWF0cyIsImN1c3RvbVZhbGlkYXRlQWxsUmVmZXJlbmNlcyIsInVuZGVmaW5lZCIsImF2YWlsYWJsZVR5cGVzIiwibnVsbCIsInRydWUiLCJmYWxzZSIsIm5hbiIsImJvb2xlYW4iLCJudW1iZXIiLCJiaWdpbnQiLCJiaWdpbnRPYmplY3QiLCJzdHJpbmciLCJhcnJheVJlZmVyZW5jZSIsIm9iamVjdFJlZmVyZW5jZSIsImFycmF5IiwidHVwbGUiLCJvYmplY3QiLCJyZWNvcmQiLCJkYXRlIiwiZW51bSIsInVzZXJPYmplY3QiLCJ1bmRlZiIsInZvaWQiLCJTcGVjaWFsUmVhbE51bWJlciIsIlNwZWNpYWxOdW1iZXIiLCJlcnJvciIsImVycm9ycyIsInJlZ2V4cCIsIkJvb2xlYW5PYmplY3QiLCJOdW1iZXJPYmplY3QiLCJTdHJpbmdPYmplY3QiLCJsaXRlcmFsIiwibWFwIiwic2V0IiwiZmlsZSIsImZpbGVsaXN0IiwiYmxvYiIsImJsb2JIVE1MIiwiZG9tZXhjZXB0aW9uIiwiZG9tcmVjdCIsImRvbXBvaW50IiwiZG9tbWF0cml4IiwicmVzdXJyZWN0YWJsZSIsIm5ldmVyIiwic3ltYm9sIiwicHJvbWlzZSIsImZ1bmN0aW9uIiwiY2F0Y2giLCJuYXRpdmVFbnVtIiwiYnVmZmVyc291cmNlIiwiZGF0YXZpZXciLCJvcHRpb24iLCJpbWFnZWRhdGEiLCJpbWFnZWJpdG1hcCIsImludDhhcnJheSIsInVpbnQ4YXJyYXkiLCJ1aW50OGNsYW1wZWRhcnJheSIsImludDE2YXJyYXkiLCJ1aW50MTZhcnJheSIsImludDMyYXJyYXkiLCJ1aW50MzJhcnJheSIsImZsb2F0MzJhcnJheSIsImZsb2F0NjRhcnJheSIsIlZhbGlkRGF0ZSIsInZhbGlkIiwiYXJyYXlOb25pbmRleEtleXMiLCJzcGFyc2UiLCJjb3B5VHlwZU9ianMiLCJyZXBsYWNlbWVudHMiLCJmb3JFYWNoIiwiY29weUZyb20iLCJjb3B5VG8iLCJPYmplY3QiLCJhc3NpZ24iLCJjb250ZXh0cyIsImVudHJpZXMiLCJ0eXAiLCJ0eXBlT2JqIiwidHlwZSIsInN0YXRlRGVwZW5kZW50IiwiZm9ybWF0IiwiZm9ybWF0U3RhdGVEZXBlbmRlbnQiLCJhZnRlciIsImNvbnRleHQiLCJwdXNoIiwiZ2V0Q29udHJvbHNGb3JGb3JtYXRBbmRWYWx1ZSIsInN0YXRlT2JqIiwicm9vdFVJIiwiZ2V0Q29udGV4dEluZm8iLCJnZXRWYWx1ZUZvclJvb3QiLCJyb290IiwiY3VycmVudFBhdGgiLCJ0eXBlT2JqZWN0IiwiZ2V0VHlwZUZvclJvb3QiLCJnZXRWYWx1ZSIsInR5cGVzIiwiZ2V0Rm9ybUNvbnRyb2xGb3JSb290IiwiZ2V0SW5wdXQiLCJnZXRWYWx1ZUZyb21Sb290QW5jZXN0b3IiLCJzZWxPckVsIiwiZ2V0Rm9ybUNvbnRyb2xGcm9tUm9vdEFuY2VzdG9yIiwiZ2V0T3B0aW9uRm9yVHlwZSIsInNjaGVtYUNvbnRlbnQiLCJhdmFpbGFibGVUeXBlIiwib3B0SW5mbyIsImRlc2NyaXB0aW9uIiwiZ2V0VHlwZU9wdGlvbnNGb3JGb3JtYXRBbmRTdGF0ZSIsInBhcnNlclN0YXRlIiwic2NoZW1hT3JpZ2luYWwiLCJ0eXBlc0ZvckZvcm1hdEFuZFN0YXRlIiwiZ2V0VHlwZXNBbmRTY2hlbWFzRm9yRm9ybWF0QW5kU3RhdGUiLCJ0eXBlT3B0aW9ucyIsImlkeCIsInNjaGVtYU9iamVjdHMiLCJnZXRVSUZvck1vZGVBbmRUeXBlIiwicmVhZG9ubHkiLCJyZXN1bHRUeXBlIiwidHlwZU5hbWVzcGFjZSIsInRvcFJvb3QiLCJicmluZ0ludG9Gb2N1cyIsImJ1aWxkVHlwZUNob2ljZXMiLCJoYXNWYWx1ZSIsInJlcGxhY2VkIiwic3BlY2lmaWNTY2hlbWFPYmplY3QiLCJzY2hlbWFGYWxsaW5nQmFjayIsImFyZyIsInZpZXdVSSIsImVkaXRVSSIsInZhbGlkYXRlIiwiZm9ybUNvbnRyb2wiLCJhZGRFdmVudExpc3RlbmVyIiwidmFsaWRhdGVBbGxSZWZlcmVuY2VzIiwiY29uc29sZSIsImxvZyIsInZhbHVlcyIsInZhbGlkYXRlQWxsIiwiYXZvaWRSZXBvcnQiLCJtZXNzYWdlIiwic2V0Q3VzdG9tVmFsaWRpdHkiLCJyZXBvcnRWYWxpZGl0eSIsInNldFZhbHVlIiwiZ2V0VmFsdWVGb3JTdHJpbmciLCJzdGF0ZSIsImVuZE1hdGNoVHlwZU9ianMiLCJmaXJzdFJ1biIsInJvb3RIb2xkZXIiLCJwYXJlbnQiLCJwYXJlbnRQYXRoIiwic2NoZW1hT2JqZWN0IiwiYWxsb3dlZFR5cGVzIiwiYWxsb3dlZFR5cGVPYmpzIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJhbGxvd2VkVHlwZU9ianNWYWxzIiwiYXJyIiwicmVkdWNlZCIsInJlZHVjZSIsInR5cE9iaiIsInJlZ2V4RW5kaW5ncyIsIlNldCIsImVuZGluZ3MiLCJzdHIiLCJlc2NhcGVSZWdleCIsImpvaW4iLCJtYXRjaCIsImZvdW5kIiwiZmluZCIsInN0cmluZ1JlZ2V4IiwiUmVnRXhwIiwic291cmNlIiwic2xpY2UiLCJCb29sZWFuIiwiYmVnaW5Pbmx5Iiwic3RyaW5nUmVnZXhCZWdpbiIsIm10Y2giLCJjb250ZW50IiwiaW5uZXJDb250ZW50IiwicmVtbmFudCIsImxlbmd0aCIsInZhbE9iaiIsInRvVmFsdWUiLCJncm91cHMiLCJlIiwiZW5kTWF0Y2giLCJhdCIsInN0cmluZ1JlZ2V4RW5kIiwicG9wIiwidHlwZXNvbiIsInJlZ2lzdGVyIiwicmV2aXZlIiwicGF0aCIsInZhbCIsInJlc29sdmVSZWZlcmVuY2UiLCJiYXNpY1R5cGUiLCJlcnIiLCJnZXRUeXBlT2JqZWN0IiwiZGF0YXNldCIsInZhbGlkVmFsdWVzU2V0IiwiZm9ybSIsImtleVNlbGVjdENsYXNzIiwib2Zmc2V0UGFyZW50IiwiY2hlY2tWYWxpZGl0eSIsInR5cGVDaG9pY2VzIiwiZXZlcnkiLCJzZWwiLCIkdmFsaWRhdGUiLCJyZXBsYWNlQWxsIiwicmF3Il0sInNvdXJjZXMiOlsidHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZvcm1hdHMgZnJvbSAnLi9mb3JtYXRzLmpzJztcblxuaW1wb3J0IHtcbiAgLy8gamFtaWxpaFxuICBqbWwsXG4gIC8vIHR5cGVzb24tcmVnaXN0cnlcbiAgVHlwZXNvbiwgZ2V0SlNPTlR5cGUsIHN0cnVjdHVyZWRDbG9uaW5nVGhyb3dpbmdcbn0gZnJvbSAnLi92ZW5kb3ItaW1wb3J0cy5qcyc7XG5cbmltcG9ydCB7JGUsICQkZX0gZnJvbSAnLi91dGlscy90ZW1wbGF0ZVV0aWxzLmpzJztcblxuaW1wb3J0IG51bGxUeXBlIGZyb20gJy4vZnVuZGFtZW50YWxUeXBlcy9udWxsVHlwZS5qcyc7XG5pbXBvcnQgdHJ1ZVR5cGUgZnJvbSAnLi9zdWJUeXBlcy90cnVlVHlwZS5qcyc7XG5pbXBvcnQgZmFsc2VUeXBlIGZyb20gJy4vc3ViVHlwZXMvZmFsc2VUeXBlLmpzJztcbmltcG9ydCBuYW5UeXBlIGZyb20gJy4vZnVuZGFtZW50YWxUeXBlcy9uYW5UeXBlLmpzJztcbmltcG9ydCBibG9iSFRNTFR5cGUgZnJvbSAnLi9zdWJUeXBlcy9ibG9iSFRNTFR5cGUuanMnO1xuaW1wb3J0IGJvb2xlYW5UeXBlIGZyb20gJy4vZnVuZGFtZW50YWxUeXBlcy9ib29sZWFuVHlwZS5qcyc7XG5pbXBvcnQgbnVtYmVyVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvbnVtYmVyVHlwZS5qcyc7XG5pbXBvcnQgYmlnaW50VHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvYmlnaW50VHlwZS5qcyc7XG5pbXBvcnQgYmlnaW50T2JqZWN0VHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvYmlnaW50T2JqZWN0VHlwZS5qcyc7XG5pbXBvcnQgc3RyaW5nVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvc3RyaW5nVHlwZS5qcyc7XG5pbXBvcnQgYXJyYXlSZWZlcmVuY2VUeXBlIGZyb20gJy4vZnVuZGFtZW50YWxUeXBlcy9hcnJheVJlZmVyZW5jZVR5cGUuanMnO1xuaW1wb3J0IG9iamVjdFJlZmVyZW5jZVR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL29iamVjdFJlZmVyZW5jZVR5cGUuanMnO1xuaW1wb3J0IGFycmF5VHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvYXJyYXlUeXBlLmpzJztcbmltcG9ydCB0dXBsZVR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL3R1cGxlVHlwZS5qcyc7XG5pbXBvcnQgb2JqZWN0VHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvb2JqZWN0VHlwZS5qcyc7XG5pbXBvcnQgcmVjb3JkVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvcmVjb3JkVHlwZS5qcyc7XG5pbXBvcnQgZGF0ZVR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL2RhdGVUeXBlLmpzJztcbmltcG9ydCBlbnVtVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvZW51bVR5cGUuanMnO1xuaW1wb3J0IHNldFR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL3NldFR5cGUuanMnO1xuaW1wb3J0IG1hcFR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL21hcFR5cGUuanMnO1xuaW1wb3J0IGxpdGVyYWxUeXBlIGZyb20gJy4vZnVuZGFtZW50YWxUeXBlcy9saXRlcmFsVHlwZS5qcyc7XG5pbXBvcnQgdW5kZWZpbmVkVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvdW5kZWZpbmVkVHlwZS5qcyc7XG5pbXBvcnQgdm9pZFR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL3ZvaWRUeXBlLmpzJztcbmltcG9ydCByZWdleHBUeXBlIGZyb20gJy4vZnVuZGFtZW50YWxUeXBlcy9yZWdleHBUeXBlLmpzJztcbmltcG9ydCBCb29sZWFuT2JqZWN0VHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvQm9vbGVhbk9iamVjdFR5cGUuanMnO1xuaW1wb3J0IE51bWJlck9iamVjdFR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL051bWJlck9iamVjdFR5cGUuanMnO1xuaW1wb3J0IFN0cmluZ09iamVjdFR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL1N0cmluZ09iamVjdFR5cGUuanMnO1xuLy8gaW1wb3J0IHNwYXJzZVVuZGVmaW5lZFR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL3NwYXJzZVVuZGVmaW5lZFR5cGUuanMnO1xuaW1wb3J0IFNwZWNpYWxSZWFsTnVtYmVyU3VwZXJUeXBlIGZyb21cbiAgJy4vc3VwZXJUeXBlcy9TcGVjaWFsUmVhbE51bWJlclR5cGUuanMnO1xuaW1wb3J0IFNwZWNpYWxOdW1iZXJTdXBlclR5cGUgZnJvbSAnLi9zdXBlclR5cGVzL1NwZWNpYWxOdW1iZXJUeXBlLmpzJztcbmltcG9ydCBlcnJvclR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL2Vycm9yVHlwZS5qcyc7XG5pbXBvcnQgZXJyb3JzU3BlY2lhbFR5cGUgZnJvbSAnLi9zdXBlclR5cGVzL2Vycm9yc1NwZWNpYWxUeXBlLmpzJztcbmltcG9ydCBmaWxlVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvZmlsZVR5cGUuanMnO1xuaW1wb3J0IGZpbGVsaXN0VHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvZmlsZWxpc3RUeXBlLmpzJztcbmltcG9ydCBibG9iVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvYmxvYlR5cGUuanMnO1xuaW1wb3J0IGRvbWV4Y2VwdGlvblR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL2RvbWV4Y2VwdGlvblR5cGUuanMnO1xuaW1wb3J0IGRvbXJlY3RUeXBlIGZyb20gJy4vc3VwZXJUeXBlcy9kb21yZWN0VHlwZS5qcyc7XG5pbXBvcnQgZG9tcG9pbnRUeXBlIGZyb20gJy4vc3VwZXJUeXBlcy9kb21wb2ludFR5cGUuanMnO1xuaW1wb3J0IGRvbW1hdHJpeFR5cGUgZnJvbSAnLi9zdXBlclR5cGVzL2RvbW1hdHJpeFR5cGUuanMnO1xuaW1wb3J0IGJ1ZmZlcnNvdXJjZVR5cGUgZnJvbSAnLi9zdXBlclR5cGVzL2J1ZmZlcnNvdXJjZVR5cGUuanMnO1xuaW1wb3J0IG5vbmVkaXRhYmxlVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvbm9uZWRpdGFibGVUeXBlLmpzJztcbmltcG9ydCBuZXZlclR5cGUgZnJvbSAnLi9mdW5kYW1lbnRhbFR5cGVzL25ldmVyVHlwZS5qcyc7XG5pbXBvcnQgY2F0Y2hUeXBlIGZyb20gJy4vZnVuZGFtZW50YWxUeXBlcy9jYXRjaFR5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUVudW1UeXBlIGZyb20gJy4vZnVuZGFtZW50YWxUeXBlcy9uYXRpdmVFbnVtVHlwZS5qcyc7XG5cbmltcG9ydCBzeW1ib2xUeXBlIGZyb20gJy4vZnVuZGFtZW50YWxUeXBlcy9zeW1ib2xUeXBlLmpzJztcbmltcG9ydCBwcm9taXNlVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvcHJvbWlzZVR5cGUuanMnO1xuaW1wb3J0IGZ1bmN0aW9uVHlwZSBmcm9tICcuL2Z1bmRhbWVudGFsVHlwZXMvZnVuY3Rpb25UeXBlLmpzJztcblxuLyoqXG4gKiBVdGlsaXR5IHRvIHJldHJpZXZlIHRoZSBwcm9wZXJ0eSB2YWx1ZSBnaXZlbiBhIGxlZ2VuZCBlbGVtZW50LlxuICogQHBhcmFtIHtIVE1MTGVnZW5kRWxlbWVudH0gbGVnZW5kXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgZ2V0UHJvcGVydHlWYWx1ZUZyb21MZWdlbmQgPSAobGVnZW5kKSA9PiB7XG4gIGNvbnN0IHByb3BFbGVtID0gJGUobGVnZW5kLCAnKltkYXRhLXByb3A9XCJ0cnVlXCJdJyk7XG4gIGlmICghcHJvcEVsZW0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnTm8gcHJvcGVydHkgb24gdGhlIHN1cHBsaWVkIGxlZ2VuZCBlbGVtZW50J1xuICAgICk7XG4gIH1cbiAgaWYgKHByb3BFbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50fSAqLyAocHJvcEVsZW0pLnZhbHVlO1xuICB9XG4gIGlmICghcHJvcEVsZW0udGV4dENvbnRlbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnTm8gcHJvcGVydHkgd2l0aCB0ZXh0IHByZXNlbnQgb24gdGhlIHN1cHBsaWVkIGxlZ2VuZCBlbGVtZW50J1xuICAgICk7XG4gIH1cbiAgLy8gMS1iYXNlZCB0byAwLWJhc2VkXG4gIHJldHVybiBTdHJpbmcoTnVtYmVyLnBhcnNlSW50KHByb3BFbGVtLnRleHRDb250ZW50KSAtIDEpO1xufTtcblxuLyoqXG4gKiBBbnkgb3RoZXIgcG9zc2liaWxpdGllcyB0aGFuIGBkaXZgP1xuICogQHR5cGVkZWYge0hUTUxEaXZFbGVtZW50fSBSb290RWxlbWVudFxuICovXG5cbi8qKlxuICogVXRpbGl0eSB0byByZXRyaWV2ZSB0aGUgdHlwZSBvdXQgb2YgYSB0eXBlIHJvb3QgZWxlbWVudC5cbiAqIEBjYWxsYmFjayBHZXRUeXBlRm9yUm9vdFxuICogQHBhcmFtIHs/Um9vdEVsZW1lbnR9IHJvb3RcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFdoeSB3b3VsZCBpdCBub3QgZXhpc3Q/XG4gKi9cblxuLyoqXG4gKiBVdGlsaXR5IHRvIGdldCB0aGUgdmFsdWUgb3V0IG9mIGEgdHlwZSByb290IGVsZW1lbnQgd2l0aCBhIGdpdmVuXG4gKiAgIHN0YXRlIGFuZCBwYXRoLlxuICogQGNhbGxiYWNrIEdldFZhbHVlRm9yUm9vdFxuICogQHBhcmFtIHtSb290RWxlbWVudH0gcm9vdFxuICogQHBhcmFtIHtTdGF0ZU9iamVjdH0gW3N0YXRlT2JqXVxuICogQHBhcmFtIHtzdHJpbmd9IFtjdXJyZW50UGF0aF1cbiAqIEByZXR1cm5zIHtTdHJ1Y3R1cmVkQ2xvbmVWYWx1ZX1cbiAqL1xuXG4vKipcbiAqIFV0aWxpdHkgdG8gZ2V0IHRoZSBmb3JtIGNvbnRyb2wgKGUuZy4sIGlucHV0IGVsZW1lbnQpIGZvciBhIHJvb3QuXG4gKiBAY2FsbGJhY2sgR2V0Rm9ybUNvbnRyb2xGb3JSb290XG4gKiBAcGFyYW0ge1Jvb3RFbGVtZW50fSByb290XG4gKiBAcmV0dXJucyB7bnVsbHxcbiAqICAgSFRNTElucHV0RWxlbWVudHxIVE1MVGV4dEFyZWFFbGVtZW50fEhUTUxTZWxlY3RFbGVtZW50fEhUTUxCdXR0b25FbGVtZW50fVxuICovXG5cbi8qKlxuICogVXRpbGl0eSB0byBnZXQgdGhlIHZhbHVlIGZvciBhIHJvb3QgdXNpbmcgaXRzIGFuY2VzdG9yIGFuZCBzdGF0ZS5cbiAqIEBjYWxsYmFjayBHZXRWYWx1ZUZyb21Sb290QW5jZXN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfEhUTUxFbGVtZW50fSBzZWxPckVsXG4gKiBAcGFyYW0ge1N0YXRlT2JqZWN0fSBbc3RhdGVPYmpdXG4gKiBAcmV0dXJucyB7U3RydWN0dXJlZENsb25lVmFsdWV9XG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgR2V0Rm9ybUNvbnRyb2xGcm9tUm9vdEFuY2VzdG9yXG4gKiBAcGFyYW0ge3N0cmluZ3xIVE1MRWxlbWVudH0gc2VsT3JFbFxuICogQHJldHVybnMge251bGx8SFRNTElucHV0RWxlbWVudHxIVE1MVGV4dEFyZWFFbGVtZW50fEhUTUxTZWxlY3RFbGVtZW50fFxuICogICBIVE1MQnV0dG9uRWxlbWVudH1cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtudW1iZXJ9IEludGVnZXJcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBHZXRPcHRpb25Gb3JUeXBlXG4gKiBAcGFyYW0ge0F2YWlsYWJsZUFyYml0cmFyeVR5cGV9IHR5cGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2Zvcm1hdEFuZFR5cGVDaG9pY2VzLmpzJykuWm9kZXhTY2hlbWF8XG4gKiAgIHVuZGVmaW5lZH0gW3NjaGVtYUNvbnRlbnRdXG4gKiBAcmV0dXJucyB7W3N0cmluZywge3ZhbHVlOiBBdmFpbGFibGVUeXBlLCB0aXRsZT86IHN0cmluZ31dfVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIEdldFR5cGVPcHRpb25zRm9yRm9ybWF0QW5kU3RhdGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2Zvcm1hdHMuanMnKS5BdmFpbGFibGVGb3JtYXR9IGZvcm1hdFxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXJzZXJTdGF0ZV1cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2Zvcm1hdEFuZFR5cGVDaG9pY2VzLmpzJykuWm9kZXhTY2hlbWF8XG4gKiAgIHVuZGVmaW5lZH0gW3NjaGVtYUNvbnRlbnRdXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9mb3JtYXRBbmRUeXBlQ2hvaWNlcy5qcycpLlpvZGV4U2NoZW1hfFxuICogICB1bmRlZmluZWR9IFtzY2hlbWFPcmlnaW5hbF1cbiAqIEByZXR1cm5zIHt7XG4gKiAgIHR5cGVPcHRpb25zOiBbc3RyaW5nLCB7dmFsdWU6IEF2YWlsYWJsZVR5cGUsIHRpdGxlPzogc3RyaW5nfV1bXSxcbiAqICAgc2NoZW1hT2JqZWN0czogaW1wb3J0KCcuL2Zvcm1hdHMvc2NoZW1hLmpzJykuWm9kZXhTY2hlbWFbXVxuICogfX1cbiAqL1xuXG4vKipcbiogQHR5cGVkZWYge3tcbiogICB0eXBlTmFtZXNwYWNlPzogc3RyaW5nLFxuKiAgIFwicmVhZG9ubHlcIj86IGJvb2xlYW4sXG4qICAgZm9ybWF0PzogaW1wb3J0KCcuL2Zvcm1hdHMuanMnKS5BdmFpbGFibGVGb3JtYXQsXG4qICAgZm9ybWF0cz86IGltcG9ydCgnLi9mb3JtYXRzLmpzJykuZGVmYXVsdCxcbiogICB0eXBlcz86IFR5cGVzLFxuKiAgIGVycm9yPzogRXJyb3IsXG4qICAgcm9vdFVJPzogRWxlbWVudCxcbiogICBzY2hlbWE/OiBzdHJpbmcsXG4qICAgc2NoZW1hUGFyZW50PzogaW1wb3J0KCcuL2Zvcm1hdHMvc2NoZW1hLmpzJykuWm9kZXhTY2hlbWEsXG4qICAgc2NoZW1hQ29udGVudD86IGltcG9ydCgnLi9mb3JtYXRzL3NjaGVtYS5qcycpLlpvZGV4U2NoZW1hLFxuKiAgIHNwZWNpZmljU2NoZW1hPzogaW1wb3J0KCcuL2Zvcm1hdHMvc2NoZW1hLmpzJykuWm9kZXhTY2hlbWEsXG4qICAgc3BlY2lmaWNTY2hlbWFzPzogaW1wb3J0KCcuL2Zvcm1hdHMvc2NoZW1hLmpzJykuWm9kZXhTY2hlbWFbXSxcbiogICBwYXRocz86IHtbY3VycmVudFBhdGg6IHN0cmluZ106IHtcbiogICAgIHJlZmVyZW50UGF0aDogc3RyaW5nLFxuKiAgICAgZXhwZWN0QXJyYXlSZWZlcmVudDogYm9vbGVhblxuKiAgIH19LFxuKiAgIGhhbmRsaW5nUmVmZXJlbmNlPzogYm9vbGVhblxuKiB9fSBTdGF0ZU9iamVjdFxuKi9cblxuLyogZXNsaW50LWRpc2FibGUganNkb2MvdmFsaWQtdHlwZXMgLS0gcmVhZG9ubHkgcmVzZXJ2ZWQgKi9cbi8qKlxuICogQHR5cGVkZWYgeyhjZmc6IHtcbiAqICAgcmVhZG9ubHk/OiBib29sZWFuLFxuICogICByZXN1bHRUeXBlPzogXCJib3RoXCJ8XCJrZXlzXCJ8XCJ2YWx1ZXNcIixcbiAqICAgdHlwZU5hbWVzcGFjZT86IHN0cmluZyxcbiAqICAgdHlwZTogQXZhaWxhYmxlQXJiaXRyYXJ5VHlwZSxcbiAqICAgdG9wUm9vdD86IFJvb3RFbGVtZW50LFxuICogICBicmluZ0ludG9Gb2N1cz86IGJvb2xlYW58dW5kZWZpbmVkLFxuICogICBidWlsZFR5cGVDaG9pY2VzPzogaW1wb3J0KCcuL3R5cGVDaG9pY2VzLmpzJykuQnVpbGRUeXBlQ2hvaWNlcyxcbiAqICAgZm9ybWF0OiBpbXBvcnQoJy4vZm9ybWF0cy5qcycpLkF2YWlsYWJsZUZvcm1hdCxcbiAqICAgc2NoZW1hQ29udGVudD86IGltcG9ydCgnLi9mb3JtYXRzL3NjaGVtYS5qcycpLlpvZGV4U2NoZW1hXG4gKiAgIHNwZWNpZmljU2NoZW1hT2JqZWN0PzogaW1wb3J0KCcuL2Zvcm1hdHMvc2NoZW1hLmpzJykuWm9kZXhTY2hlbWFcbiAqICAgdmFsdWU6IFN0cnVjdHVyZWRDbG9uZVZhbHVlLFxuICogICBoYXNWYWx1ZTogYm9vbGVhbixcbiAqICAgcmVwbGFjZWQ/OiBTdHJ1Y3R1cmVkQ2xvbmVWYWx1ZSxcbiAqICAgc2NoZW1hRmFsbGluZ0JhY2s/OiBib29sZWFuXG4gKiB9KSA9PiBIVE1MRWxlbWVudH0gR2V0VUlGb3JNb2RlQW5kVHlwZVxuICovXG4vKiBlc2xpbnQtZW5hYmxlIGpzZG9jL3ZhbGlkLXR5cGVzIC0tIHJlYWRvbmx5IHJlc2VydmVkICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhjZmc6IHtcbiAqICAgZm9ybTogSFRNTEZvcm1FbGVtZW50LFxuICogICB0eXBlTmFtZXNwYWNlPzogc3RyaW5nLFxuICogICBrZXlTZWxlY3RDbGFzcz86IHN0cmluZyxcbiAqIH0pID0+IGJvb2xlYW59IFZhbGlkVmFsdWVzU2V0XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KGNmZzoge1xuICogICB0b3BSb290OiBSb290RWxlbWVudFxuICogfSkgPT4gdm9pZH0gVmFsaWRhdGVBbGxSZWZlcmVuY2VzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KGNmZzoge1xuICogICB0eXBlOiBBdmFpbGFibGVBcmJpdHJhcnlUeXBlLFxuICogICByb290OiBSb290RWxlbWVudCxcbiAqICAgdG9wUm9vdD86IFJvb3RFbGVtZW50LFxuICogICBhdm9pZFJlcG9ydD86IGJvb2xlYW5cbiAqIH0pID0+IGJvb2xlYW59IFZhbGlkYXRlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KGNmZzoge1xuICogICB0eXBlOiBBdmFpbGFibGVBcmJpdHJhcnlUeXBlLFxuICogICByb290OiBSb290RWxlbWVudCxcbiAqICAgdmFsdWU6IFN0cnVjdHVyZWRDbG9uZVZhbHVlLFxuICogfSkgPT4gdm9pZH0gU2V0VmFsdWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoczogc3RyaW5nLCBjZmc6IHtcbiAqICAgZm9ybWF0OiBpbXBvcnQoJy4vZm9ybWF0cy5qcycpLkF2YWlsYWJsZUZvcm1hdCxcbiAqICAgc3RhdGU/OiBzdHJpbmcsXG4gKiAgIGVuZE1hdGNoVHlwZU9ianM/OiBUeXBlT2JqZWN0W11cbiAqICAgZmlyc3RSdW4/OiBib29sZWFuLFxuICogICByb290SG9sZGVyPzogW1xuICogICAgIHR5cGU6IHN0cmluZyxcbiAqICAgICBwYXJlbnQ6IHtba2V5OiBzdHJpbmddOiBhbnl9fHVuZGVmaW5lZCxcbiAqICAgICBwYXJlbnRQYXRoOiBzdHJpbmd8bnVtYmVyfHVuZGVmaW5lZCxcbiAqICAgICBwYXRoOiBzdHJpbmdcbiAqICAgXVtdLFxuICogICBwYXJlbnQ/OiB7W2tleTogc3RyaW5nXTogYW55fSxcbiAqICAgcGFyZW50UGF0aD86IHN0cmluZ3xudW1iZXIsXG4gKiAgIHNjaGVtYU9iamVjdD86IGltcG9ydCgnLi9mb3JtYXRBbmRUeXBlQ2hvaWNlcy5qcycpLlpvZGV4U2NoZW1hfHVuZGVmaW5lZFxuICogICBzY2hlbWFPcmlnaW5hbD86IGltcG9ydCgnLi9mb3JtYXRBbmRUeXBlQ2hvaWNlcy5qcycpLlpvZGV4U2NoZW1hfHVuZGVmaW5lZFxuICogfSkgPT4gW1xuKiAgIHZhbHVlOiBTdHJ1Y3R1cmVkQ2xvbmVWYWx1ZSxcbiogICByZW1uYW50OiBzdHJpbmcsXG4qICAgYmVnaW5Pbmx5OiBib29sZWFuLFxuKiAgIGFzc2lnbjogYm9vbGVhblxuKiBdfSBHZXRWYWx1ZUZvclN0cmluZ1xuKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KFxuICogICBpbmZvOiB7dG9wUm9vdDogSFRNTERpdkVsZW1lbnR9XG4gKiApID0+IHZvaWR9IEN1c3RvbVZhbGlkYXRlQWxsUmVmZXJlbmNlc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9mb3JtYXRzLmpzJykuU3RydWN0dXJlZENsb25lVmFsdWV9IFN0cnVjdHVyZWRDbG9uZVZhbHVlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdqYW1pbGloJykuSmFtaWxpaEFycmF5fSBKYW1pbGloQXJyYXlcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGZvcm1hdDogaW1wb3J0KCcuL2Zvcm1hdHMuanMnKS5BdmFpbGFibGVGb3JtYXQsXG4gKiAgIG1hdGNoOiBib29sZWFufFJlZ0V4cE1hdGNoQXJyYXl8bnVsbFxuICogICBlbmRNYXRjaFR5cGVPYmpzOiBUeXBlT2JqZWN0W10sXG4gKiAgIHJlbW5hbnQ6IHN0cmluZyxcbiAqICAgcm9vdEhvbGRlcjogW1xuICogICAgIHR5cGU6IHN0cmluZyxcbiAqICAgICBwYXJlbnQ6IG9iamVjdHx1bmRlZmluZWQsXG4gKiAgICAgcGFyZW50UGF0aDogc3RyaW5nfG51bWJlcnx1bmRlZmluZWQsXG4gKiAgICAgcGF0aDogc3RyaW5nXG4gKiAgIF1bXSxcbiAqICAgcGFyZW50Pzogb2JqZWN0LFxuICogICBwYXJlbnRQYXRoPzogc3RyaW5nfG51bWJlcixcbiAqICAgdHlwZXM/OiBUeXBlc1xuICogICBzY2hlbWFPYmplY3Q/OiBpbXBvcnQoJy4vZm9ybWF0QW5kVHlwZUNob2ljZXMuanMnKS5ab2RleFNjaGVtYXx1bmRlZmluZWRcbiAqIH19IFJvb3RJbmZvXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KFxuICogICBpbmZvOiB7XG4qICAgICByb290OiBIVE1MRGl2RWxlbWVudCxcbiogICAgIHZhbHVlOiBTdHJ1Y3R1cmVkQ2xvbmVWYWx1ZVxuKiAgIH1cbiogKSA9PiB2b2lkfSBUeXBlT2JqZWN0U2V0VmFsdWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIHM6IHN0cmluZywgaW5mbz86IFJvb3RJbmZvXG4gKiApID0+IHtcbiAqICAgdmFsdWU/OiBTdHJ1Y3R1cmVkQ2xvbmVWYWx1ZSxcbiAqICAgcmVtbmFudD86IHN0cmluZyxcbiAqICAgYXNzaWduPzogZmFsc2VcbiAqIH19IFRvVmFsdWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFR5cGVPYmplY3RcbiAqIEBwcm9wZXJ0eSB7W1xuICogICBzdHJpbmcsIHt2YWx1ZT86IEF2YWlsYWJsZVR5cGUsIHRpdGxlPzogc3RyaW5nfT9cbiAqIF19IG9wdGlvbiBDcmVhdGVzIHRoZSBvcHRpb24gSFRNTC4gTWF5IHNldCBhbiBvcHRpb24gYHRpdGxlYCBvciBgdmFsdWVgXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFthcnJheV0gUHJpdmF0ZSBjb250ZXh0IHZhcmlhYmxlLiBXaGV0aGVyIG9yIG5vdFxuICogICBpdCBpcyBhbiBhcnJheS4gRG8gbm90IHVzZSBpbiBvdGhlciB0eXBlcy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW21hcF0gUHJpdmF0ZSBjb250ZXh0IHZhcmlhYmxlLiBXaGV0aGVyIG9yIG5vdFxuICogICBpdCBpcyBhIGBNYXBgLiBEbyBub3QgdXNlIGluIG90aGVyIHR5cGVzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbc2V0XSBQcml2YXRlIGNvbnRleHQgdmFyaWFibGUuIFdoZXRoZXIgb3Igbm90XG4gKiAgIGl0IGlzIGEgYFNldGAuIERvIG5vdCB1c2UgaW4gb3RoZXIgdHlwZXMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZWNvcmRdIFByaXZhdGUgY29udGV4dCB2YXJpYWJsZS4gV2hldGhlciBvciBub3RcbiAqICAgaXQgaXMgYSBgUmVjb3JkYC4gRG8gbm90IHVzZSBpbiBvdGhlciB0eXBlcy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3R1cGxlXSBQcml2YXRlIGNvbnRleHQgdmFyaWFibGUuIFdoZXRoZXIgb3Igbm90XG4gKiAgIGl0IGlzIGEgdHVwbGUgdHlwZS4gRG8gbm90IHVzZSBpbiBvdGhlciB0eXBlcy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2ZpbGVsaXN0XSBQcml2YXRlIGNvbnRleHQgdmFyaWFibGUuIFdoZXRoZXIgb3Igbm90XG4gKiAgIGl0IGlzIGEgYEZpbGVMaXN0YCB0eXBlLiBEbyBub3QgdXNlIGluIG90aGVyIHR5cGVzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbc3BhcnNlXSBQcml2YXRlIGNvbnRleHQgdmFyaWFibGUuIFdoZXRoZXIgb3Igbm90XG4gKiAgIGl0IGlzIGEgc3BhcnNlIGFycmF5LiBEbyBub3QgdXNlIGluIG90aGVyIHR5cGVzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbdmFsaWRdIFByaXZhdGUgY29udGV4dCB2YXJpYWJsZS4gV2hldGhlciBvciBub3RcbiAqICAgaXQgaXMgYSB2YWxpZCBkYXRlLiBEbyBub3QgdXNlIGluIG90aGVyIHR5cGVzLlxuICogQHByb3BlcnR5IHtzdHJpbmdbXX0gW3JlZ2V4RW5kaW5nc10gVXNlZCBmb3Igc3RyaW5nIHBhcnNpbmcuXG4gKiBAcHJvcGVydHkge1JlZ0V4cHwoKG5vbkdyb3VwaW5nPzogYm9vbGVhbikgPT4gUmVnRXhwKX0gW3N0cmluZ1JlZ2V4XSBVc2VkXG4gKiAgIGZvciBzdHJpbmcgcGFyc2luZy4gSWYgbm90IHByZXNlbnQsIHVzZSBgc3RyaW5nUmVnZXhCZWdpbmAgYW5kXG4gKiAgIGBzdHJpbmdSZWdleEVuZGAuXG4gKiBAcHJvcGVydHkge1JlZ0V4cH0gW3N0cmluZ1JlZ2V4QmVnaW5dIFVzZWQgZm9yIHN0cmluZyBwYXJzaW5nLiBJZiBub3RcbiAqICAgcHJlc2VudCwgdXNlIGBzdHJpbmdSZWdleGBcbiAqIEBwcm9wZXJ0eSB7UmVnRXhwfSBbc3RyaW5nUmVnZXhFbmRdIFVzZWQgZm9yIHN0cmluZyBwYXJzaW5nLiBJZiBub3RcbiAqICAgcHJlc2VudCwgdXNlIGBzdHJpbmdSZWdleGBcbiAqIEBwcm9wZXJ0eSB7KFxuICogICB2OiBTdHJ1Y3R1cmVkQ2xvbmVWYWx1ZVxuICogKSA9PiBib29sZWFufSBbdmFsdWVNYXRjaF0gRnVuY3Rpb24gdG8gY2hlY2sgd2hldGhlciB0aGlzIHR5cGUgb3Igc3VidHlwZVxuICogICBtYXRjaGVzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3N1cGVyVHlwZV0gVGhlIGdyZWF0ZXIgZnVuZGFtZW50YWwgdHlwZSB0byB3aGljaFxuICogICB0aGUgdHlwZSBiZWxvbmdzXG4gKiBAcHJvcGVydHkge1RvVmFsdWV9IFt0b1ZhbHVlXSBDb252ZXJ0cyBmcm9tIHN0cmluZyB0byB2YWx1ZS4gTWF5IHVzZVxuICogICBgc3RyaW5nUmVnZXhgIHRvIGZpbmQgY29tcG9uZW50cy5cbiAqIEBwcm9wZXJ0eSB7KGluZm86IHtcbiAqICAgcm9vdDogSFRNTERpdkVsZW1lbnQsXG4gKiAgIHN0YXRlT2JqPzogU3RhdGVPYmplY3QsXG4gKiAgIGN1cnJlbnRQYXRoPzogc3RyaW5nXG4gKiB9KSA9PlxuICogIFN0cnVjdHVyZWRDbG9uZVZhbHVlXG4gKiB9IGdldFZhbHVlIEdldHMgdGhlIHZhbHVlIGZvciB0aGUgdHlwZVxuICogQHByb3BlcnR5IHtUeXBlT2JqZWN0U2V0VmFsdWV9IFtzZXRWYWx1ZV0gU2hvdWxkIHNldCB0aGUgdmFsdWUgb2YgdGhlXG4gKiAgIGZvcm0ncyBgZ2V0SW5wdXRgIGVsZW1lbnRcbiAqIEBwcm9wZXJ0eSB7KGluZm86IHtcbiAqICAgdmFsdWU/OiBTdHJ1Y3R1cmVkQ2xvbmVWYWx1ZSxcbiAqICAgdHlwZU5hbWVzcGFjZT86IHN0cmluZyxcbiAqICAgdHlwZT86IEF2YWlsYWJsZUFyYml0cmFyeVR5cGUsXG4gKiAgIHRvcFJvb3Q/OiBIVE1MRGl2RWxlbWVudCxcbiAqICAgcmVzdWx0VHlwZT86IFwia2V5c1wifFwidmFsdWVzXCJ8XCJib3RoXCIsXG4gKiAgIGZvcm1hdDogaW1wb3J0KCcuL2Zvcm1hdHMuanMnKS5BdmFpbGFibGVGb3JtYXQsXG4gKiAgIHNwZWNpZmljU2NoZW1hT2JqZWN0PzogaW1wb3J0KCcuL2Zvcm1hdHMvc2NoZW1hLmpzJykuWm9kZXhTY2hlbWEsXG4gKiAgIHR5cGVzOiBUeXBlc1xuICogICBicmluZ0ludG9Gb2N1cz86IGJvb2xlYW58dW5kZWZpbmVkLFxuICogICBidWlsZFR5cGVDaG9pY2VzPzogaW1wb3J0KCcuL3R5cGVDaG9pY2VzLmpzJykuQnVpbGRUeXBlQ2hvaWNlcyxcbiAqICAgc2NoZW1hQ29udGVudD86IGltcG9ydCgnLi9mb3JtYXRzL3NjaGVtYS5qcycpLlpvZGV4U2NoZW1hXG4gKiAgIHJlcGxhY2VkPzogYW55XG4gKiB9KSA9PiBKYW1pbGloQXJyYXl9IHZpZXdVSVxuICogQHByb3BlcnR5IHsoaW5mbzoge1xuICogICB2YWx1ZT86IFN0cnVjdHVyZWRDbG9uZVZhbHVlLFxuICogICB0eXBlTmFtZXNwYWNlPzogc3RyaW5nLFxuICogICBicmluZ0ludG9Gb2N1cz86IGJvb2xlYW4sXG4gKiAgIGZvcm1hdD86IGltcG9ydCgnLi9mb3JtYXRzLmpzJykuQXZhaWxhYmxlRm9ybWF0LFxuICogICBmb3JtYXRzPzogaW1wb3J0KCcuL2Zvcm1hdHMuanMnKS5kZWZhdWx0LFxuICogICB0eXBlczogVHlwZXMsXG4gKiAgIHJlc3VsdFR5cGU/OiBcImtleXNcInxcInZhbHVlc1wifFwiYm90aFwiLFxuICogICB0eXBlPzogQXZhaWxhYmxlQXJiaXRyYXJ5VHlwZSxcbiAqICAgZm9yY2VkU3RhdGU/OiBzdHJpbmcsXG4gKiAgIGJ1aWxkVHlwZUNob2ljZXM/OiBpbXBvcnQoJy4vdHlwZUNob2ljZXMuanMnKS5CdWlsZFR5cGVDaG9pY2VzLFxuICogICB0b3BSb290PzogSFRNTERpdkVsZW1lbnRcbiAqICAgc2NoZW1hQ29udGVudD86IGltcG9ydCgnLi9mb3JtYXRzL3NjaGVtYS5qcycpLlpvZGV4U2NoZW1hLFxuICogICBzcGVjaWZpY1NjaGVtYU9iamVjdD86IGltcG9ydCgnLi9mb3JtYXRzL3NjaGVtYS5qcycpLlpvZGV4U2NoZW1hLFxuICogICBzY2hlbWFGYWxsaW5nQmFjaz86IGJvb2xlYW5cbiAqIH0pID0+IEphbWlsaWhBcnJheX0gZWRpdFVJXG4gKiBAcHJvcGVydHkgeyhpbmZvOiB7cm9vdDogSFRNTERpdkVsZW1lbnR9KSA9PlxuICogICBIVE1MSW5wdXRFbGVtZW50fEhUTUxUZXh0QXJlYUVsZW1lbnR8SFRNTFNlbGVjdEVsZW1lbnR8XG4gKiAgIEhUTUxCdXR0b25FbGVtZW50fSBnZXRJbnB1dCBHZXRzIHRoZSBmb3JtIGNvbnRyb2wgKHdpdGggYHZhbHVlYClcbiAqIEBwcm9wZXJ0eSB7KFxuICogICBpbmZvOiB7cm9vdDogSFRNTERpdkVsZW1lbnR9XG4gKiApID0+IEhUTUxTZWxlY3RFbGVtZW50fSBbZ2V0U2VsZWN0XVxuICogQHByb3BlcnR5IHsocGF0aDogc3RyaW5nLCB2YWx1ZTogU3RydWN0dXJlZENsb25lVmFsdWUpID0+XG4gKiAgIFN0cnVjdHVyZWRDbG9uZVZhbHVlfSBbcmVzb2x2ZVJlZmVyZW5jZV0gR2V0cyB0aGUgcmVmZXJlbmNlLiBGb3IgYXJyYXlcbiAqICAgYW5kIG9iamVjdCByZWZlcmVuY2VzIHR5cGVzIG9ubHlcbiAqIEBwcm9wZXJ0eSB7KGluZm86IHtyb290OiBIVE1MRGl2RWxlbWVudCwgdG9wUm9vdD86IEhUTUxEaXZFbGVtZW50fSkgPT4ge1xuICogICBtZXNzYWdlPzogc3RyaW5nLFxuICogICB2YWxpZDogYm9vbGVhblxuICogfX0gW3ZhbGlkYXRlXSBNZXNzYWdlIHdpbGwgYmUgdXNlZCBpZiB2YWxpZGl0eSBpcyBmYWxzZS5cbiAqIEBwcm9wZXJ0eSB7KGluZm86IHtcbiAqICAgdG9wUm9vdDogSFRNTERpdkVsZW1lbnQsXG4gKiAgIHR5cGVzOiBUeXBlc1xuICogfSkgPT4gdm9pZH0gW3ZhbGlkYXRlQWxsXSBGb3JcbiAqICAgdmFsaWRhdGlvbiBvZiBhcnJheSBhbmQgb2JqZWN0IHJlZmVyZW5jZXMgb25seS5cbiAqIEBwcm9wZXJ0eSB7e1xuICogICBzdHJ1Y3R1cmVkQ2xvbmluZzoge1xuICogICAgIGFmdGVyOiBBdmFpbGFibGVUeXBlLFxuICogICAgIGNvbnRleHRzOiBzdHJpbmdbXVxuICogICB9XG4gKiB9fSBbc3RhdGVEZXBlbmRlbnRdIFRoZSB0eXBlIGFmdGVyIHdoaWNoIGl0IHNob3VsZCBiZSBwbGFjZWQgYW5kIGl0c1xuICogICBjb250ZXh0IHR5cGVzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7XCJudWxsXCJ8XCJ0cnVlXCJ8XCJmYWxzZVwifFwibnVtYmVyXCJ8XCJiaWdpbnRcInxcImJpZ2ludE9iamVjdFwifFxuICogICBcInN0cmluZ1wifFwiYXJyYXlSZWZlcmVuY2VcInxcbiAqICAgXCJvYmplY3RSZWZlcmVuY2VcInxcImFycmF5XCJ8XCJvYmplY3RcInxcImRhdGVcInxcInVzZXJPYmplY3RcInxcInVuZGVmXCJ8XG4gKiAgIFwiU3BlY2lhbFJlYWxOdW1iZXJcInxcIlNwZWNpYWxOdW1iZXJcInxcInJlZ2V4cFwifFwiQm9vbGVhbk9iamVjdFwifFxuICogICBcIk51bWJlck9iamVjdFwifFwiU3RyaW5nT2JqZWN0XCJ8XCJtYXBcInxcInNldFwifFwiZmlsZVwifFwiZmlsZWxpc3RcInxcImJsb2JIVE1MXCJ8XG4gKiAgIFwiYnVmZmVyc291cmNlXCJ8XCJkYXRhdmlld1wifFwiaW1hZ2VkYXRhXCJ8XCJpbWFnZWJpdG1hcFwifFxuICogICBcImludDhhcnJheVwifFwidWludDhhcnJheVwifFwidWludDhjbGFtcGVkYXJyYXlcInxcImludDE2YXJyYXlcInxcInVpbnQxNmFycmF5XCJ8XG4gKiAgIFwiaW50MzJhcnJheVwifFwidWludDMyYXJyYXlcInxcImZsb2F0MzJhcnJheVwifFwiZmxvYXQ2NGFycmF5XCJ8XCJWYWxpZERhdGVcInxcbiAqICAgXCJhcnJheU5vbmluZGV4S2V5c1wifFwiZXJyb3JcInxcImVycm9yc1wifFwiYmxvYlwifFwiZG9tZXhjZXB0aW9uXCJ8XCJkb21yZWN0XCJ8XG4gKiAgIFwiZG9tcG9pbnRcInxcImRvbW1hdHJpeFwifFwicmVzdXJyZWN0YWJsZVwifFwiYm9vbGVhblwifFwibmFuXCJ8XCJ0dXBsZVwifFxuICogICBcInJlY29yZFwifFwidm9pZFwifFwiZW51bVwifFwibGl0ZXJhbFwifFwibmV2ZXJcInxcImNhdGNoXCJ8XCJuYXRpdmVFbnVtXCJcbiAqIH0gQXZhaWxhYmxlVHlwZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge0F2YWlsYWJsZVR5cGV8XCJzeW1ib2xcInxcInByb21pc2VcInxcImZ1bmN0aW9uXCJ9IEF2YWlsYWJsZUFyYml0cmFyeVR5cGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtUeXBlT2JqZWN0ICYge1xuKiAgIGNoaWxkVHlwZXM6IHN0cmluZ1tdXG4qIH19IFN1cGVyVHlwZU9iamVjdFxuKi9cblxuLyoqXG4gKlxuICovXG5jbGFzcyBUeXBlcyB7XG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuZm9ybWF0cyA9IG5ldyBGb3JtYXRzKCk7IC8vIFRvZG86IE1ha2UgY3VzdG9taXphYmxlIGFuZCB0ZXN0XG5cbiAgICAvKiogQHR5cGUge0N1c3RvbVZhbGlkYXRlQWxsUmVmZXJlbmNlc3x1bmRlZmluZWR9ICovXG4gICAgdGhpcy5jdXN0b21WYWxpZGF0ZUFsbFJlZmVyZW5jZXMgPSB1bmRlZmluZWQ7XG4gICAgLyoqXG4gICAgICogQHR5cGUge3tcbiAgICAgKiAgIFtrZXkgaW4gQXZhaWxhYmxlQXJiaXRyYXJ5VHlwZV06IFBhcnRpYWw8VHlwZU9iamVjdD58c3RyaW5nW11cbiAgICAgKiB9fVxuICAgICAqL1xuICAgIHRoaXMuYXZhaWxhYmxlVHlwZXMgPSB7XG4gICAgICBudWxsOiBudWxsVHlwZSxcbiAgICAgIHRydWU6IHRydWVUeXBlLFxuICAgICAgZmFsc2U6IGZhbHNlVHlwZSxcbiAgICAgIG5hbjogbmFuVHlwZSwgLy8gU2NoZW1hIHR5cGVcbiAgICAgIGJvb2xlYW46IGJvb2xlYW5UeXBlLCAvLyBTY2hlbWEgdHlwZVxuICAgICAgbnVtYmVyOiBudW1iZXJUeXBlLFxuICAgICAgYmlnaW50OiBiaWdpbnRUeXBlLFxuICAgICAgYmlnaW50T2JqZWN0OiBiaWdpbnRPYmplY3RUeXBlLFxuICAgICAgc3RyaW5nOiBzdHJpbmdUeXBlLFxuICAgICAgYXJyYXlSZWZlcmVuY2U6IGFycmF5UmVmZXJlbmNlVHlwZSxcbiAgICAgIG9iamVjdFJlZmVyZW5jZTogb2JqZWN0UmVmZXJlbmNlVHlwZSxcbiAgICAgIGFycmF5OiBhcnJheVR5cGUsXG4gICAgICB0dXBsZTogdHVwbGVUeXBlLCAvLyBTY2hlbWEgdHlwZVxuICAgICAgLy8gTm90ZTogV2UgZG9uJ3QgZG8gZm9yIEJvb2xlYW5PYmplY3QvTnVtYmVyT2JqZWN0L1N0cmluZ09iamVjdCwgZGF0ZSxcbiAgICAgIC8vICAgcmVnZXhwLCBhcyBhZGRlZCBwcm9wZXJ0aWVzIG9uIHRoZW0gYXJlIG5vdCBiZWluZyBjbG9uZWQgKGluIENocm9tZVxuICAgICAgLy8gICBhdCBsZWFzdClcbiAgICAgIG9iamVjdDogb2JqZWN0VHlwZSxcbiAgICAgIHJlY29yZDogcmVjb3JkVHlwZSwgLy8gU2NoZW1hIHR5cGVcbiAgICAgIGRhdGU6IGRhdGVUeXBlLFxuICAgICAgZW51bTogZW51bVR5cGUsXG5cbiAgICAgIC8vIFRoaXMgdHlwZSBpcyBvbmx5IGZvciB0aHJvd2luZyB1cG9uIGNsb25pbmcgZXJyb3JzOlxuICAgICAgLy8gJ2NoZWNrRGF0YUNsb25lRXhjZXB0aW9uJ1xuICAgICAgLy8gVGhpcyB0eXBlIG1pZ2h0IGJlIHN1cHBvcnRlZCBieSBldmFsdWFibGUgSlMgb3IgY29uZmlnXG4gICAgICAvLyAgIHBhc3NlZCBpbjpcbiAgICAgIHVzZXJPYmplY3Q6IFsnVXNlciBvYmplY3RzJ10sXG4gICAgICB1bmRlZjogdW5kZWZpbmVkVHlwZSxcbiAgICAgIHZvaWQ6IHZvaWRUeXBlLFxuICAgICAgU3BlY2lhbFJlYWxOdW1iZXI6IFNwZWNpYWxSZWFsTnVtYmVyU3VwZXJUeXBlLFxuICAgICAgU3BlY2lhbE51bWJlcjogU3BlY2lhbE51bWJlclN1cGVyVHlwZSxcblxuICAgICAgZXJyb3I6IGVycm9yVHlwZSxcbiAgICAgIGVycm9yczogZXJyb3JzU3BlY2lhbFR5cGUsXG5cbiAgICAgIHJlZ2V4cDogcmVnZXhwVHlwZSxcbiAgICAgIEJvb2xlYW5PYmplY3Q6IEJvb2xlYW5PYmplY3RUeXBlLFxuICAgICAgTnVtYmVyT2JqZWN0OiBOdW1iZXJPYmplY3RUeXBlLFxuICAgICAgU3RyaW5nT2JqZWN0OiBTdHJpbmdPYmplY3RUeXBlLFxuXG4gICAgICBsaXRlcmFsOiBsaXRlcmFsVHlwZSxcblxuICAgICAgbWFwOiBtYXBUeXBlLFxuICAgICAgc2V0OiBzZXRUeXBlLFxuXG4gICAgICBmaWxlOiBmaWxlVHlwZSxcbiAgICAgIGZpbGVsaXN0OiBmaWxlbGlzdFR5cGUsXG4gICAgICBibG9iOiBibG9iVHlwZSxcbiAgICAgIGJsb2JIVE1MOiBibG9iSFRNTFR5cGUsXG5cbiAgICAgIGRvbWV4Y2VwdGlvbjogZG9tZXhjZXB0aW9uVHlwZSxcbiAgICAgIGRvbXJlY3Q6IGRvbXJlY3RUeXBlLFxuICAgICAgZG9tcG9pbnQ6IGRvbXBvaW50VHlwZSxcbiAgICAgIGRvbW1hdHJpeDogZG9tbWF0cml4VHlwZSxcblxuICAgICAgcmVzdXJyZWN0YWJsZTogbm9uZWRpdGFibGVUeXBlLFxuICAgICAgbmV2ZXI6IG5ldmVyVHlwZSxcblxuICAgICAgc3ltYm9sOiBzeW1ib2xUeXBlLCAvLyBOb24tY2xvbmluZyB0eXBlXG4gICAgICBwcm9taXNlOiBwcm9taXNlVHlwZSxcbiAgICAgIGZ1bmN0aW9uOiBmdW5jdGlvblR5cGUsXG5cbiAgICAgIGNhdGNoOiBjYXRjaFR5cGUsXG4gICAgICBuYXRpdmVFbnVtOiBuYXRpdmVFbnVtVHlwZSxcblxuICAgICAgYnVmZmVyc291cmNlOiBidWZmZXJzb3VyY2VUeXBlLFxuICAgICAgZGF0YXZpZXc6IHtcbiAgICAgICAgb3B0aW9uOiBbJ0RhdGFWaWV3J11cbiAgICAgIH0sXG4gICAgICBpbWFnZWRhdGE6IHtcbiAgICAgICAgb3B0aW9uOiBbJ0ltYWdlRGF0YSddXG4gICAgICB9LFxuICAgICAgaW1hZ2ViaXRtYXA6IHtcbiAgICAgICAgb3B0aW9uOiBbJ0ltYWdlQml0bWFwJ11cbiAgICAgIH0sXG5cbiAgICAgIC8vIFR5cGVkIEFycmF5c1xuICAgICAgaW50OGFycmF5OiB7XG4gICAgICAgIG9wdGlvbjogWydJbnQ4QXJyYXknXVxuICAgICAgfSxcbiAgICAgIHVpbnQ4YXJyYXk6IHtcbiAgICAgICAgb3B0aW9uOiBbJ1VpbnQ4QXJyYXknXVxuICAgICAgfSxcbiAgICAgIHVpbnQ4Y2xhbXBlZGFycmF5OiB7XG4gICAgICAgIG9wdGlvbjogWydVaW50OENsYW1wZWRBcnJheSddXG4gICAgICB9LFxuICAgICAgaW50MTZhcnJheToge1xuICAgICAgICBvcHRpb246IFsnSW50MTZBcnJheSddXG4gICAgICB9LFxuICAgICAgdWludDE2YXJyYXk6IHtcbiAgICAgICAgb3B0aW9uOiBbJ1VpbnQxNkFycmF5J11cbiAgICAgIH0sXG4gICAgICBpbnQzMmFycmF5OiB7XG4gICAgICAgIG9wdGlvbjogWydJbnQzMkFycmF5J11cbiAgICAgIH0sXG4gICAgICB1aW50MzJhcnJheToge1xuICAgICAgICBvcHRpb246IFsnVWludDMyQXJyYXknXVxuICAgICAgfSxcbiAgICAgIGZsb2F0MzJhcnJheToge1xuICAgICAgICBvcHRpb246IFsnRmxvYXQzMkFycmF5J11cbiAgICAgIH0sXG4gICAgICBmbG9hdDY0YXJyYXk6IHtcbiAgICAgICAgb3B0aW9uOiBbJ0Zsb2F0NjRBcnJheSddXG4gICAgICB9LFxuXG4gICAgICAvLyBXZSdyZSBjYXRjaGluZyB0aGlzIGluc3RlYWQgb2YgdXNpbmcgdGhpc1xuICAgICAgLy8gc3BhcnNlVW5kZWZpbmVkOiBzcGFyc2VVbmRlZmluZWRUeXBlLFxuXG4gICAgICBWYWxpZERhdGU6IHtcbiAgICAgICAgdmFsaWQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAvKlxuICAgICAgc3BhcnNlQXJyYXlzOiB7XG4gICAgICAgICAgc3BhcnNlOiB0cnVlXG4gICAgICB9LFxuICAgICAgKi9cbiAgICAgIGFycmF5Tm9uaW5kZXhLZXlzOiB7XG4gICAgICAgIHNwYXJzZTogdHJ1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1tcbiAgICAgKiAgIGNvcHlGcm9tOiBBdmFpbGFibGVUeXBlLCBjb3B5VG86IEF2YWlsYWJsZVR5cGVcbiAgICAgKiBdW119IHJlcGxhY2VtZW50c1xuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGNvbnN0IGNvcHlUeXBlT2JqcyA9IChyZXBsYWNlbWVudHMpID0+IHtcbiAgICAgIHJlcGxhY2VtZW50cy5mb3JFYWNoKChbY29weUZyb20sIGNvcHlUb10pID0+IHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmF2YWlsYWJsZVR5cGVzW1xuICAgICAgICAgIC8qKiBAdHlwZSB7QXZhaWxhYmxlVHlwZX0gKi9cbiAgICAgICAgICAoY29weVRvKVxuICAgICAgICBdLCB0aGlzLmF2YWlsYWJsZVR5cGVzW1xuICAgICAgICAgIC8qKiBAdHlwZSB7QXZhaWxhYmxlVHlwZX0gKi9cbiAgICAgICAgICAoY29weUZyb20pXG4gICAgICAgIF0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvcHlUeXBlT2JqcyhcbiAgICAgIFtcbiAgICAgICAgLyoqIEB0eXBlIHtbQXZhaWxhYmxlVHlwZSwgQXZhaWxhYmxlVHlwZV19ICovIChcbiAgICAgICAgICBbJ2RhdGUnLCAnVmFsaWREYXRlJ11cbiAgICAgICAgKSxcbiAgICAgICAgLy8gJ3NwYXJzZUFycmF5cydcbiAgICAgICAgLyoqIEB0eXBlIHtbQXZhaWxhYmxlVHlwZSwgQXZhaWxhYmxlVHlwZV19ICovIChcbiAgICAgICAgICBbJ2FycmF5JywgJ2FycmF5Tm9uaW5kZXhLZXlzJ11cbiAgICAgICAgKVxuICAgICAgXVxuICAgICk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7e1xuICAgICAqICAgW2tleTogc3RyaW5nXToge1xuICAgICAqICAgICBba2V5OiBzdHJpbmddOiB7dHlwZTogQXZhaWxhYmxlVHlwZSwgYWZ0ZXI6IEF2YWlsYWJsZVR5cGV9W11cbiAgICAgKiAgIH1cbiAgICAgKiB9fVxuICAgICAqL1xuICAgIHRoaXMuY29udGV4dHMgPSB7fTtcbiAgICBPYmplY3QuZW50cmllcyh0aGlzLmF2YWlsYWJsZVR5cGVzKS5mb3JFYWNoKChbdHlwLCB0eXBlT2JqXSkgPT4ge1xuICAgICAgY29uc3QgdHlwZSA9IC8qKiBAdHlwZSB7QXZhaWxhYmxlVHlwZX0gKi8gKHR5cCk7XG4gICAgICBjb25zdCB7c3RhdGVEZXBlbmRlbnR9ID0gLyoqIEB0eXBlIHtUeXBlT2JqZWN0fSAqLyAodHlwZU9iaik7XG4gICAgICBpZiAoc3RhdGVEZXBlbmRlbnQpIHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoc3RhdGVEZXBlbmRlbnQpLmZvckVhY2goKFtcbiAgICAgICAgICBmb3JtYXQsIGZvcm1hdFN0YXRlRGVwZW5kZW50XG4gICAgICAgIF0pID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dHNbZm9ybWF0XSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0c1tmb3JtYXRdID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHtjb250ZXh0cywgYWZ0ZXJ9ID0gZm9ybWF0U3RhdGVEZXBlbmRlbnQ7XG4gICAgICAgICAgY29udGV4dHMuZm9yRWFjaCgoY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHRzW2Zvcm1hdF1bY29udGV4dF0pIHtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZXh0c1tmb3JtYXRdW2NvbnRleHRdID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRzW2Zvcm1hdF1bY29udGV4dF0ucHVzaCh7dHlwZSwgYWZ0ZXJ9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4vZm9ybWF0cy5qcycpLkF2YWlsYWJsZUZvcm1hdH0gZm9ybWF0XG4gICAqIEBwYXJhbSB7U3RydWN0dXJlZENsb25lVmFsdWV9IHJlY29yZFxuICAgKiBAcGFyYW0ge1N0YXRlT2JqZWN0fSBzdGF0ZU9ialxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxFbGVtZW50Pn1cbiAgICovXG4gIGFzeW5jIGdldENvbnRyb2xzRm9yRm9ybWF0QW5kVmFsdWUgKFxuICAgIGZvcm1hdCwgcmVjb3JkLCBzdGF0ZU9ialxuICApIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuZm9ybWF0cy5nZXRDb250cm9sc0ZvckZvcm1hdEFuZFZhbHVlKFxuICAgICAgdGhpcywgZm9ybWF0LCByZWNvcmQsIHN0YXRlT2JqXG4gICAgKSkucm9vdFVJO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuL2Zvcm1hdHMuanMnKS5BdmFpbGFibGVGb3JtYXR9IGZvcm1hdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGV4dFxuICAgKiBAcmV0dXJucyB7e1xuICAgKiAgIHR5cGU6IEF2YWlsYWJsZVR5cGVcbiAgICogICBhZnRlcjogQXZhaWxhYmxlVHlwZVxuICAgKiB9W119XG4gICAqL1xuICBnZXRDb250ZXh0SW5mbyAoZm9ybWF0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dHNbZm9ybWF0XVtjb250ZXh0XTtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7R2V0VmFsdWVGb3JSb290fSAqL1xuICBnZXRWYWx1ZUZvclJvb3QgKHJvb3QsIHN0YXRlT2JqLCBjdXJyZW50UGF0aCkge1xuICAgIGNvbnN0IHR5cGVPYmplY3QgPSAvKiogQHR5cGUge1R5cGVPYmplY3R9ICovIChcbiAgICAgIHRoaXMuYXZhaWxhYmxlVHlwZXNbXG4gICAgICAgIC8qKiBAdHlwZSB7QXZhaWxhYmxlVHlwZX0gKi9cbiAgICAgICAgKFR5cGVzLmdldFR5cGVGb3JSb290KHJvb3QpKVxuICAgICAgXVxuICAgICk7XG4gICAgLy8gRW5zdXJlIGBzdGF0ZU9iamAgcmVtYWlucyBhIHJlZmVyZW5jZSBpZiBwcmVzZW50XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gR3VhcmQgKi9cbiAgICByZXR1cm4gdHlwZU9iamVjdC5nZXRWYWx1ZSh7XG4gICAgICByb290LFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gR3VhcmQgKi9cbiAgICAgIHN0YXRlT2JqOiBzdGF0ZU9iaiA/PyB7XG4gICAgICAgIHR5cGVzOiB0aGlzXG4gICAgICB9LFxuICAgICAgY3VycmVudFBhdGhcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7R2V0Rm9ybUNvbnRyb2xGb3JSb290fSAqL1xuICBnZXRGb3JtQ29udHJvbEZvclJvb3QgKHJvb3QpIHtcbiAgICBjb25zdCB0eXBlT2JqID0gLyoqIEB0eXBlIHtUeXBlT2JqZWN0fSAqLyAodGhpcy5hdmFpbGFibGVUeXBlc1tcbiAgICAgIC8qKiBAdHlwZSB7QXZhaWxhYmxlVHlwZX0gKi9cbiAgICAgIChUeXBlcy5nZXRUeXBlRm9yUm9vdChyb290KSlcbiAgICBdKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLS0gQWxsIGhhdmUgZXhjZXB0IGFsaWFzZXMgKi9cbiAgICBpZiAoIXR5cGVPYmouZ2V0SW5wdXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZU9iai5nZXRJbnB1dCh7cm9vdH0pO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtHZXRWYWx1ZUZyb21Sb290QW5jZXN0b3J9ICovXG4gIGdldFZhbHVlRnJvbVJvb3RBbmNlc3RvciAoc2VsT3JFbCwgc3RhdGVPYmopIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUZvclJvb3QoXG4gICAgICAvKiogQHR5cGUge1Jvb3RFbGVtZW50fSAqL1xuICAgICAgKCRlKHNlbE9yRWwsICdkaXZbZGF0YS10eXBlXScpKSxcbiAgICAgIHtcbiAgICAgICAgLi4uc3RhdGVPYmosXG4gICAgICAgIHR5cGVzOiB0aGlzLFxuICAgICAgICBmb3JtYXRzOiB0aGlzLmZvcm1hdHNcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtHZXRGb3JtQ29udHJvbEZyb21Sb290QW5jZXN0b3J9ICovXG4gIGdldEZvcm1Db250cm9sRnJvbVJvb3RBbmNlc3RvciAoc2VsT3JFbCkge1xuICAgIGNvbnN0IHJvb3QgPSAvKiogQHR5cGUge1Jvb3RFbGVtZW50fSAqLyAoJGUoc2VsT3JFbCwgJ2RpdltkYXRhLXR5cGVdJykpO1xuICAgIGlmICghcm9vdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldEZvcm1Db250cm9sRm9yUm9vdChyb290KTtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7R2V0T3B0aW9uRm9yVHlwZX0gKi9cbiAgZ2V0T3B0aW9uRm9yVHlwZSAodHlwZSwgc2NoZW1hQ29udGVudCA9IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGF2YWlsYWJsZVR5cGUgPSAvKiogQHR5cGUge1R5cGVPYmplY3R9ICovIChcbiAgICAgIHRoaXMuYXZhaWxhYmxlVHlwZXNbdHlwZV1cbiAgICApO1xuICAgIC8qKiBAdHlwZSB7W3N0cmluZywge3ZhbHVlPzogQXZhaWxhYmxlQXJiaXRyYXJ5VHlwZSwgdGl0bGU/OiBzdHJpbmd9P119ICovXG4gICAgY29uc3Qgb3B0SW5mbyA9IFtcbiAgICAgIC4uLmF2YWlsYWJsZVR5cGUub3B0aW9uXG4gICAgXTtcblxuICAgIGlmIChzY2hlbWFDb250ZW50ICYmIHNjaGVtYUNvbnRlbnQuZGVzY3JpcHRpb24pIHtcbiAgICAgIG9wdEluZm9bMF0gPSBgJHtvcHRJbmZvWzBdfSAoJHtzY2hlbWFDb250ZW50LmRlc2NyaXB0aW9ufSlgO1xuICAgIH1cblxuICAgIG9wdEluZm9bMV0gPSB7XG4gICAgICB2YWx1ZTogdHlwZSxcbiAgICAgIC4uLihvcHRJbmZvWzFdKVxuICAgIH07XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7W3N0cmluZywge3ZhbHVlOiBBdmFpbGFibGVUeXBlLCB0aXRsZT86IHN0cmluZ31dfSAqLyAoXG4gICAgICBvcHRJbmZvXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7R2V0VHlwZU9wdGlvbnNGb3JGb3JtYXRBbmRTdGF0ZX0gKi9cbiAgZ2V0VHlwZU9wdGlvbnNGb3JGb3JtYXRBbmRTdGF0ZSAoXG4gICAgZm9ybWF0LCBwYXJzZXJTdGF0ZSwgc2NoZW1hQ29udGVudCwgc2NoZW1hT3JpZ2luYWxcbiAgKSB7XG4gICAgY29uc3QgdHlwZXNGb3JGb3JtYXRBbmRTdGF0ZSA9XG4gICAgICB0aGlzLmZvcm1hdHMuZ2V0VHlwZXNBbmRTY2hlbWFzRm9yRm9ybWF0QW5kU3RhdGUoXG4gICAgICAgIHRoaXMsIGZvcm1hdCwgcGFyc2VyU3RhdGUsIHNjaGVtYUNvbnRlbnQsIHNjaGVtYU9yaWdpbmFsXG4gICAgICApO1xuICAgIGlmICghdHlwZXNGb3JGb3JtYXRBbmRTdGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHR5cGUgZm9yIGZvcm1hdCBhbmQgc3RhdGUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZU9wdGlvbnM6IHR5cGVzRm9yRm9ybWF0QW5kU3RhdGUudHlwZXMubWFwKCh0eXBlLCBpZHgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9uRm9yVHlwZShcbiAgICAgICAgICB0eXBlLCB0eXBlc0ZvckZvcm1hdEFuZFN0YXRlLnNjaGVtYU9iamVjdHNbaWR4XVxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgICBzY2hlbWFPYmplY3RzOiB0eXBlc0ZvckZvcm1hdEFuZFN0YXRlLnNjaGVtYU9iamVjdHNcbiAgICB9O1xuICB9XG5cbiAgLyoqIEB0eXBlIHtHZXRVSUZvck1vZGVBbmRUeXBlfSAqL1xuICBnZXRVSUZvck1vZGVBbmRUeXBlICh7XG4gICAgcmVhZG9ubHksIHJlc3VsdFR5cGUsIHR5cGVOYW1lc3BhY2UsIHR5cGUsIHRvcFJvb3QsIGJyaW5nSW50b0ZvY3VzLFxuICAgIGJ1aWxkVHlwZUNob2ljZXMsIGZvcm1hdCwgc2NoZW1hQ29udGVudCwgdmFsdWUsIGhhc1ZhbHVlLFxuICAgIHJlcGxhY2VkLCBzcGVjaWZpY1NjaGVtYU9iamVjdCwgc2NoZW1hRmFsbGluZ0JhY2tcbiAgfSkge1xuICAgIGNvbnN0IHR5cGVPYmogPSAvKiogQHR5cGUge1R5cGVPYmplY3R9ICovICh0aGlzLmF2YWlsYWJsZVR5cGVzW3R5cGVdKTtcbiAgICBjb25zdCBhcmcgPSBoYXNWYWx1ZVxuICAgICAgPyB7XG4gICAgICAgIHR5cGVOYW1lc3BhY2UsIHR5cGUsIGJ1aWxkVHlwZUNob2ljZXMsXG4gICAgICAgIGZvcm1hdCwgc2NoZW1hQ29udGVudCxcbiAgICAgICAgcmVzdWx0VHlwZSwgdG9wUm9vdCwgYnJpbmdJbnRvRm9jdXMsIHZhbHVlLFxuICAgICAgICByZXBsYWNlZCxcbiAgICAgICAgc3BlY2lmaWNTY2hlbWFPYmplY3QsIHNjaGVtYUZhbGxpbmdCYWNrLFxuICAgICAgICB0eXBlczogdGhpc1xuICAgICAgfVxuICAgICAgOiB7XG4gICAgICAgIHR5cGVOYW1lc3BhY2UsIHR5cGUsIGJ1aWxkVHlwZUNob2ljZXMsXG4gICAgICAgIGZvcm1hdCwgc2NoZW1hQ29udGVudCxcbiAgICAgICAgcmVzdWx0VHlwZSwgdG9wUm9vdCwgYnJpbmdJbnRvRm9jdXMsXG4gICAgICAgIHJlcGxhY2VkLFxuICAgICAgICBzcGVjaWZpY1NjaGVtYU9iamVjdCwgc2NoZW1hRmFsbGluZ0JhY2ssXG4gICAgICAgIHR5cGVzOiB0aGlzXG4gICAgICB9O1xuICAgIGNvbnN0IHJvb3QgPSAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50fSAqLyAoam1sKFxuICAgICAgLi4uKHJlYWRvbmx5XG4gICAgICAgID8gdHlwZU9iai52aWV3VUkoYXJnKVxuICAgICAgICA6IHR5cGVPYmouZWRpdFVJKGFyZykpXG4gICAgKSk7XG4gICAgaWYgKCFyZWFkb25seSAmJiB0eXBlT2JqLnZhbGlkYXRlKSB7XG4gICAgICBjb25zdCBmb3JtQ29udHJvbCA9IHR5cGVPYmouZ2V0SW5wdXQoe3Jvb3R9KTtcbiAgICAgIGZvcm1Db250cm9sLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICB0aGlzLnZhbGlkYXRlKHt0eXBlLCByb290LCB0b3BSb290fSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICAvKiogQHR5cGUge1ZhbGlkYXRlQWxsUmVmZXJlbmNlc30gKi9cbiAgdmFsaWRhdGVBbGxSZWZlcmVuY2VzICh7dG9wUm9vdH0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLS0gVW5yZWFjaGFibGU/ICovXG4gICAgaWYgKCF0b3BSb290KSB7XG4gICAgICBjb25zb2xlLmxvZygnTm8gcmVmZXJlbmNlcyBwcmVzZW50Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ291bGQganVzdCBoYXJkLWNvZGUgYXJyYXlSZWZlcmVuY2UgYW5kIG9iamVjdFJlZmVyZW5jZSxcbiAgICAvLyAgYnV0IHdlJ2xsIHRyeSB0byBhdm9pZCBkZXBlbmRpbmcgb24gc3BlY2lmaWMgdHlwZXNcbiAgICBPYmplY3QudmFsdWVzKHRoaXMuYXZhaWxhYmxlVHlwZXMpLmZvckVhY2goKHR5cGVPYmopID0+IHtcbiAgICAgIGNvbnN0IHR5cGVPYmplY3QgPSAvKiogQHR5cGUge1R5cGVPYmplY3R9ICovICh0eXBlT2JqKTtcbiAgICAgIGlmICh0eXBlT2JqZWN0LnZhbGlkYXRlQWxsKSB7XG4gICAgICAgIHR5cGVPYmplY3QudmFsaWRhdGVBbGwoe3RvcFJvb3QsIHR5cGVzOiB0aGlzfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5jdXN0b21WYWxpZGF0ZUFsbFJlZmVyZW5jZXMpIHtcbiAgICAgIHRoaXMuY3VzdG9tVmFsaWRhdGVBbGxSZWZlcmVuY2VzKHt0b3BSb290fSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEB0eXBlIHtWYWxpZGF0ZX0gKi9cbiAgdmFsaWRhdGUgKHt0eXBlLCByb290LCB0b3BSb290LCBhdm9pZFJlcG9ydH0pIHtcbiAgICBjb25zdCB0eXBlT2JqID0gLyoqIEB0eXBlIHtUeXBlT2JqZWN0fSAqLyAodGhpcy5hdmFpbGFibGVUeXBlc1t0eXBlXSk7XG4gICAgLy8gVG9kbyAobG93KTogV2UgbGltaXQgZm9yIG5vdyB0byBpbnB1dCBib3hlcyB3aGljaCBoYXZlIGB2YWxpZGF0ZWBcbiAgICBpZiAodHlwZU9iai52YWxpZGF0ZSkge1xuICAgICAgY29uc3Qge3ZhbGlkLCBtZXNzYWdlfSA9IHR5cGVPYmoudmFsaWRhdGUoe3Jvb3QsIHRvcFJvb3R9KTtcbiAgICAgIGNvbnN0IGZvcm1Db250cm9sID0gdHlwZU9iai5nZXRJbnB1dCh7cm9vdH0pO1xuICAgICAgZm9ybUNvbnRyb2wuc2V0Q3VzdG9tVmFsaWRpdHkoXG4gICAgICAgIHZhbGlkXG4gICAgICAgICAgPyAnJ1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIFNob3VsZCBhbHdheXMgaGF2ZSBhIG1lc3NhZ2UgKi9cbiAgICAgICAgICA6IChtZXNzYWdlIHx8ICdJbnZhbGlkJylcbiAgICAgICk7XG5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgYSBmb2N1cyBhcyBgcmVwb3J0VmFsaWRpdHlgIGRvZXMgaW4gYXQgbGVhc3RcbiAgICAgIC8vICBzb21lIGNhc2VzLCBidXQgYmx1cigpIHdvdWxkIGNhdXNlIHVzZXIgdG9cbiAgICAgIC8vICAgbGVhdmUgaW5wdXQgKHVzZWQgZHVyaW5nIGlucHV0IGhhbmRsZXIpXG4gICAgICBpZiAoIWF2b2lkUmVwb3J0KSB7XG4gICAgICAgIGZvcm1Db250cm9sLnJlcG9ydFZhbGlkaXR5KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsaWQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtTZXRWYWx1ZX0gKi9cbiAgc2V0VmFsdWUgKHt0eXBlLCByb290LCB2YWx1ZX0pIHtcbiAgICBjb25zdCB0eXBlT2JqID0gLyoqIEB0eXBlIHtUeXBlT2JqZWN0fSAqLyAodGhpcy5hdmFpbGFibGVUeXBlc1t0eXBlXSk7XG4gICAgaWYgKHR5cGVPYmouc2V0VmFsdWUpIHtcbiAgICAgIHR5cGVPYmouc2V0VmFsdWUoe3Jvb3QsIHZhbHVlfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gVG9kbyAobG93KTogU2hvdWxkIHJlYWxseSBhZGQgcmVhbCBwYXJzZXJcbiAgLy8gVG9kbyAobG93KTogSW1wbGVtZW50IGBnZXRTdHJpbmdGb3JWYWx1ZWAgKGUuZy4sIHRvIGV4cG9zZSBmZWF0dXJlIGZvclxuICAvLyAgICAgICAgICBib29rbWFya2luZyBvYmplY3QgdmFsdWUgY3VycmVudGx5IGluIHZpZXcpOyB3b3VsZCBub3QgYmVcbiAgLy8gICAgICAgICAgZW5vdWdoIHRvIGl0ZXJhdGUgRE9NIHRvIGdldCBzdHJpbmcgVVJMIGFzIHdlJ2QgYWxzbyBsaWtlXG4gIC8vICAgICAgICAgIHRoZSBhYmlsaXR5IHRvIGhhdmUgYXJiaXRyYXJ5IEpTT04vc3RydWN0dXJlZENsb25pbmcgc2VudCB0byB0aGlzXG4gIC8vICAgICAgICAgIFVSTCBmcm9tIG90aGVyIHNpdGVzL3Byb2dyYW1zIChjYW4gY3VycmVudGx5IHBhc3MgaW4gSlNPTlxuICAvLyAgICAgICAgICBmb3JtYXQgdG8gdGhlIFVSTCwgYnV0IHRoYXQgaXMgc3RpbGwgZXhwZWN0aW5nIG91ciBSb3V0ZXJcbiAgLy8gICAgICAgICAgc3RyaW5nIHN5bnRheClcblxuICAvKiogQHR5cGUge0dldFZhbHVlRm9yU3RyaW5nfSAqL1xuICBnZXRWYWx1ZUZvclN0cmluZyAocywge1xuICAgIGZvcm1hdCwgc3RhdGUsIGVuZE1hdGNoVHlwZU9ianMgPSBbXSwgZmlyc3RSdW4gPSB0cnVlLFxuICAgIHJvb3RIb2xkZXIgPSBbXSwgcGFyZW50LCBwYXJlbnRQYXRoLCBzY2hlbWFPYmplY3QsIHNjaGVtYU9yaWdpbmFsXG4gIH0pIHtcbiAgICBjb25zdCBhbGxvd2VkVHlwZXMgPSB0aGlzLmZvcm1hdHMuZ2V0VHlwZXNBbmRTY2hlbWFzRm9yRm9ybWF0QW5kU3RhdGUoXG4gICAgICB0aGlzLCBmb3JtYXQsIHN0YXRlLCBzY2hlbWFPYmplY3QsIHNjaGVtYU9yaWdpbmFsXG4gICAgKT8udHlwZXM7XG4gICAgaWYgKCFhbGxvd2VkVHlwZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGdldCB0eXBlcyBmb3IgZm9ybWF0IGFuZCBzdGF0ZScpO1xuICAgIH1cbiAgICBjb25zdCBhbGxvd2VkVHlwZU9ianMgPSBPYmplY3QuZW50cmllcyhcbiAgICAgIHRoaXMuYXZhaWxhYmxlVHlwZXNcbiAgICApLmZpbHRlcigoW3R5cGVdKSA9PiB7XG4gICAgICByZXR1cm4gYWxsb3dlZFR5cGVzLmluY2x1ZGVzKC8qKiBAdHlwZSB7QXZhaWxhYmxlVHlwZX0gKi8gKHR5cGUpKTtcbiAgICB9KTtcbiAgICBjb25zdCBhbGxvd2VkVHlwZU9ianNWYWxzID0gYWxsb3dlZFR5cGVPYmpzLm1hcCgoWywgYXJyXSkgPT4gYXJyKTtcblxuICAgIGNvbnN0IHJlZHVjZWQgPSBhbGxvd2VkVHlwZU9ianNWYWxzLnJlZHVjZSgoYXJyYXksIHR5cE9iaikgPT4ge1xuICAgICAgY29uc3QgdHlwZU9iaiA9IC8qKiBAdHlwZSB7VHlwZU9iamVjdH0gKi8gKHR5cE9iaik7XG4gICAgICBsZXQgYXJyID0gLyoqIEB0eXBlIHtzdHJpbmdbXX0gKi8gKGFycmF5KTtcbiAgICAgIGlmICh0eXBlT2JqLnJlZ2V4RW5kaW5ncykge1xuICAgICAgICBhcnIucHVzaCguLi50eXBlT2JqLnJlZ2V4RW5kaW5ncyk7XG4gICAgICAgIGFyciA9IFsuLi5uZXcgU2V0KGFycildO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgZW5kaW5ncyA9ICd8JyArIC8qKiBAdHlwZSB7c3RyaW5nW119ICovIChcbiAgICAgIHJlZHVjZWRcbiAgICApLm1hcCgoc3RyKSA9PiBlc2NhcGVSZWdleChzdHIpKS5qb2luKCd8Jyk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7UmVnRXhwTWF0Y2hBcnJheXxib29sZWFufG51bGx9XG4gICAgICovXG4gICAgbGV0IG1hdGNoID0gbnVsbDtcbiAgICBsZXQgZm91bmQgPSBhbGxvd2VkVHlwZU9ianMuZmluZCgoWy8qIF90eXBlICovLCB0eXBPYmpdKSA9PiB7XG4gICAgICBjb25zdCB0eXBlT2JqID0gLyoqIEB0eXBlIHtUeXBlT2JqZWN0fSAqLyAodHlwT2JqKTtcbiAgICAgIGxldCB7c3RyaW5nUmVnZXh9ID0gdHlwZU9iajtcbiAgICAgIGlmICh0eXBlb2YgdHlwZU9iai5zdHJpbmdSZWdleCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzdHJpbmdSZWdleCA9IHR5cGVPYmouc3RyaW5nUmVnZXgodHJ1ZSk7XG4gICAgICB9XG4gICAgICBzdHJpbmdSZWdleCA9IHN0cmluZ1JlZ2V4XG4gICAgICAgIC8vIFN0cmlwIG9mZiB0ZXJtaW5hbCAoZG9sbGFyIHNpZ24pIHdoZW4gbWF0Y2hpbmcgc3Vic3RyaW5nc1xuICAgICAgICA/IG5ldyBSZWdFeHAoXG4gICAgICAgICAgLyoqIEB0eXBlIHtSZWdFeHB9ICovIChcbiAgICAgICAgICAgIHN0cmluZ1JlZ2V4XG4gICAgICAgICAgKS5zb3VyY2Uuc2xpY2UoMCwgLTEpICsgJyg/PSQnICsgZW5kaW5ncyArICcpJyxcbiAgICAgICAgICAndSdcbiAgICAgICAgKVxuICAgICAgICA6IHN0cmluZ1JlZ2V4O1xuICAgICAgbWF0Y2ggPSBCb29sZWFuKHN0cmluZ1JlZ2V4ICYmIHMpICYmIHMubWF0Y2goXG4gICAgICAgIC8qKiBAdHlwZSB7UmVnRXhwfSAqLyAoc3RyaW5nUmVnZXgpXG4gICAgICApO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgbGV0IGJlZ2luT25seSA9IGZhbHNlO1xuICAgIGlmIChmb3VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3VuZCA9IGFsbG93ZWRUeXBlT2Jqcy5maW5kKChbLyogX3R5cGUgKi8sIHR5cE9ial0pID0+IHtcbiAgICAgICAgY29uc3QgdHlwZU9iaiA9IC8qKiBAdHlwZSB7VHlwZU9iamVjdH0gKi8gKHR5cE9iaik7XG4gICAgICAgIGNvbnN0IHtzdHJpbmdSZWdleEJlZ2lufSA9IHR5cGVPYmo7XG4gICAgICAgIG1hdGNoID0gQm9vbGVhbihzdHJpbmdSZWdleEJlZ2luICYmIHMpICYmIHMubWF0Y2goXG4gICAgICAgICAgLyoqIEB0eXBlIHtSZWdFeHB9ICovIChzdHJpbmdSZWdleEJlZ2luKVxuICAgICAgICApO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBiZWdpbk9ubHkgPSB0cnVlO1xuICAgICAgICAgIGVuZE1hdGNoVHlwZU9ianMucHVzaCh0eXBlT2JqKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGFzc2lnbiA9IHRydWU7XG4gICAgaWYgKGZvdW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFRoZSBgZm91bmRgIGlzIGV2YWx1YXRlZCBhZ2Fpbiwgc28gc2V0cyBgbWF0Y2hgIHRvIG5vbi1udWxsXG4gICAgICBjb25zdCBtdGNoID0gLyoqIEB0eXBlIHtSZWdFeHBNYXRjaEFycmF5fSAqLyAoXG4gICAgICAgIC8qKiBAdHlwZSB7dW5rbm93bn0gKi8gKG1hdGNoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IFtjb250ZW50LCBpbm5lckNvbnRlbnRdID0gbXRjaDtcbiAgICAgIGxldCByZW1uYW50ID0gcy5zbGljZShjb250ZW50Lmxlbmd0aCk7XG4gICAgICBzID0gcy5zbGljZSgwLCBjb250ZW50Lmxlbmd0aCk7XG4gICAgICAvLyBjb25zb2xlLmxvZygnczAnLCBzLCAnOjonLCByZW1uYW50LCBtYXRjaCk7XG4gICAgICBsZXQgdmFsT2JqO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdHlwZU9iaiA9IC8qKiBAdHlwZSB7VHlwZU9iamVjdH0gKi8gKGZvdW5kWzFdKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0tIFRTIGd1YXJkICovXG4gICAgICAgIGlmICghdHlwZU9iai50b1ZhbHVlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUeXBlIGhhcyBubyBgdG9WYWx1ZWAgbWV0aG9kJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsT2JqID0gdHlwZU9iai50b1ZhbHVlKFxuICAgICAgICAgIG10Y2guZ3JvdXBzPy5pbm5lckNvbnRlbnQgfHwgaW5uZXJDb250ZW50IHx8IHMsIHtcbiAgICAgICAgICAgIHR5cGVzOiB0aGlzLFxuICAgICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgICBlbmRNYXRjaFR5cGVPYmpzLFxuICAgICAgICAgICAgcmVtbmFudCxcbiAgICAgICAgICAgIHJvb3RIb2xkZXIsXG4gICAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgICBwYXJlbnRQYXRoLFxuICAgICAgICAgICAgc2NoZW1hT2JqZWN0XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gR29vZCByZWdleGVzIHNob3VsZCBwcmV2ZW50ICovXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIEdvb2QgcmVnZXhlcyBzaG91bGQgcHJldmVudCAqL1xuICAgICAgICBjb25zb2xlLmxvZygnZWVlJywgZSk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIEdvb2QgcmVnZXhlcyBzaG91bGQgcHJldmVudCAqL1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbE9iai5hc3NpZ24gPT09IGZhbHNlKSB7XG4gICAgICAgIGFzc2lnbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3Qge3ZhbHVlfSA9IHZhbE9iajtcbiAgICAgIGlmICh2YWxPYmoucmVtbmFudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICh7cmVtbmFudH0gPSB2YWxPYmopO1xuICAgICAgfVxuXG4gICAgICBpZiAoYmVnaW5Pbmx5ICYmIGVuZE1hdGNoVHlwZU9ianMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGVuZE1hdGNoID0gcmVtbmFudC5tYXRjaChcbiAgICAgICAgICAvKiogQHR5cGUge1JlZ0V4cH0gKi8gKC8qKiBAdHlwZSB7VHlwZU9iamVjdH0gKi8gKFxuICAgICAgICAgICAgZW5kTWF0Y2hUeXBlT2Jqcy5hdCgtMSlcbiAgICAgICAgICApLnN0cmluZ1JlZ2V4RW5kKVxuICAgICAgICApO1xuICAgICAgICBpZiAoZW5kTWF0Y2gpIHtcbiAgICAgICAgICBlbmRNYXRjaFR5cGVPYmpzLnBvcCgpOyAvLyBTYWZlIG5vdyB0byBleHRyYWN0XG4gICAgICAgICAgcmVtbmFudCA9IHJlbW5hbnQuc2xpY2UoZW5kTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgIC8vIFRvZG86IHNob3VsZCB0YWtlIGludG8gYWNjb3VudCBgZm9ybWF0YCwgZS5nLiwgdG8gd2lkZW4gdG9cbiAgICAgICAgLy8gICAgICAgIGFsbG93IGBhcmJpdHJhcnlKU2AgdmFsdWVzOyBzaG91bGQgYWxzbyBiZSB1c2luZ1xuICAgICAgICAvLyAgICAgICAgYHN0cnVjdHVyZWRDbG9uaW5nRml4ZWRgXG4gICAgICAgIGNvbnN0IHR5cGVzb24gPSBuZXcgVHlwZXNvbigpLnJlZ2lzdGVyKFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uaW5nVGhyb3dpbmdcbiAgICAgICAgKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB0b3BSb290ID0gdHlwZXNvbi5yZXZpdmUodmFsdWUpO1xuICAgICAgICAgIHJvb3RIb2xkZXIuZm9yRWFjaCgoW3R5cGUsIHBhcmVudCwgcGFyZW50UGF0aCwgcGF0aF0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVPYmplY3QgPSB0aGlzLmF2YWlsYWJsZVR5cGVzW1xuICAgICAgICAgICAgICAvKiogQHR5cGUge0F2YWlsYWJsZVR5cGV9ICovICh0eXBlICsgJ1JlZmVyZW5jZScpXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFJlZmVyZW5jZSBtZXRob2QgZXhpc3RzXG4gICAgICAgICAgICBjb25zdCB2YWwgPSB0eXBlT2JqZWN0LnJlc29sdmVSZWZlcmVuY2UocGF0aCwgdG9wUm9vdCk7XG4gICAgICAgICAgICBjb25zdCBiYXNpY1R5cGUgPSBnZXRKU09OVHlwZSh2YWwpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBzdHlsaXN0aWMvbWF4LWxlbiAtLSBMb25nXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAtLSBTdWNjZXNzZnVsIHJlZmVyZW5jZSBhbHdheXMgYW4gb2JqZWN0L2FycmF5PyAqL1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBbJ2FycmF5JywgJ29iamVjdCddLmluY2x1ZGVzKHR5cGUpICYmIGJhc2ljVHlwZSA9PT0gdHlwZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8qKiBAdHlwZSB7e1trZXk6IHN0cmluZ106IGFueX19ICovIChcbiAgICAgICAgICAgICAgICBwYXJlbnRcbiAgICAgICAgICAgICAgKVsvKiogQHR5cGUge3N0cmluZ3xudW1iZXJ9ICovIChwYXJlbnRQYXRoKV0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIFt0b3BSb290LCByZW1uYW50LCBiZWdpbk9ubHksIGFzc2lnbl07XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWlsZWQgVHlwZXNvbiByZXZpdmFsJywgZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFt2YWx1ZSwgcmVtbmFudCwgYmVnaW5Pbmx5LCBhc3NpZ25dO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBwYXJzaW5nIGRhdGEnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0F2YWlsYWJsZUFyYml0cmFyeVR5cGV9IHR5cGVcbiAgICogQHJldHVybnMge1BhcnRpYWw8VHlwZU9iamVjdD58c3RyaW5nW119XG4gICAqL1xuICBnZXRUeXBlT2JqZWN0ICh0eXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlVHlwZXNbdHlwZV07XG4gIH1cbn1cblxuLyoqIEB0eXBlIHtHZXRUeXBlRm9yUm9vdH0gKi9cblR5cGVzLmdldFR5cGVGb3JSb290ID0gKHJvb3QpID0+IHtcbiAgcmV0dXJuIFN0cmluZyhyb290ID8gcm9vdC5kYXRhc2V0LnR5cGUgOiByb290KTtcbn07XG5cbi8qKiBAdHlwZSB7VmFsaWRWYWx1ZXNTZXR9ICovXG5UeXBlcy52YWxpZFZhbHVlc1NldCA9ICh7Zm9ybSwgdHlwZU5hbWVzcGFjZSwga2V5U2VsZWN0Q2xhc3N9KSA9PiB7XG4gIC8vIElmIGZvcm0gaXMgaGlkZGVuLCBkb24ndCBsaXN0IGVycm9ycyBieSBkZWZhdWx0XG4gIGlmICghZm9ybS5vZmZzZXRQYXJlbnQgfHxcbiAgICAgICAgLy8gTm90IGFuIGludmFsaWQgZm9ybSAoYmFkIGtleSBvciB2YWx1ZSlcbiAgICAgICAgLy8gTWF5IGJlIHJlZHVuZGFudCBhcyByZS12YWxpZGF0aW5nIGJlbG93XG4gICAgICAgICFmb3JtLmNoZWNrVmFsaWRpdHkoKVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCB0eXBlQ2hvaWNlcyA9XG4gICAgLyoqIEB0eXBlIHsoSFRNTFNlbGVjdEVsZW1lbnQgJiB7JHZhbGlkYXRlOiAoKSA9PiBib29sZWFufSlbXX0gKi8gKFxuICAgICAgJCRlKFxuICAgICAgICBmb3JtLFxuICAgICAgICBrZXlTZWxlY3RDbGFzcyA/IGAuJHtrZXlTZWxlY3RDbGFzc31gIDogYC50eXBlQ2hvaWNlcy0ke3R5cGVOYW1lc3BhY2V9YFxuICAgICAgKVxuICAgICk7XG4gIHJldHVybiAoXG4gICAgLy8gU3BlY2lmaWMgdmFsdWUgdHlwZSBzZXQgaWYgcHJlc2VudCAoYW55IGRlc2NlbmRhbnQsIG5vdFxuICAgIC8vICAgb25seSB0aGUgZmlyc3QpIGNob3NlblxuICAgIHR5cGVDaG9pY2VzLmV2ZXJ5KChzZWwpID0+IHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdzZWwnLCBzZWwudmFsdWUgIT09ICcnICYmIHNlbC4kdmFsaWRhdGUoKSk7XG4gICAgICAvLyBIaWRkZW4gYXJlIG9rXG4gICAgICByZXR1cm4gIXNlbC5vZmZzZXRQYXJlbnQgfHxcbiAgICAgICAgLy8gSWYgcHJlc2VudCwgbXVzdCBiZSB2YWxpZFxuICAgICAgICAoc2VsLnZhbHVlICE9PSAnJyAmJiBzZWwuJHZhbGlkYXRlKCkpO1xuICAgIH0pXG4gIC8vIENvbnRhaW5lciBvZiBhIHNwZWNpZmljIHR5cGUgYWRkZWQgKHNob3VsZCBhbHdheXMgYmUgcHJlc2VudFxuICAvLyAgIGlmIHR5cGVDaG9pY2VzIG5vbi1lbXB0eSlcbiAgLy8gJGUoZm9ybSwgJy50eXBlQ29udGFpbmVyJylcbiAgKTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVSZWdleCAoc3RyKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyKS5cbiAgICByZXBsYWNlQWxsKC9bLlxcXFwrKj9eW1xcXSQoKXt9PSE8Pnw6LV0vZ3UsIFN0cmluZy5yYXdgXFwkJmApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUeXBlcztcbiJdLCJtYXBwaW5ncyI6IjJ0M0JBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlosTUFBTyxDQUFBRSxPQUFPLEtBQU0sY0FBYyxDQUVsQyxPQUNFO0FBQ0FDLEdBQUcs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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQU5BLENBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FOQSxDQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUxBLENBT0E7QUFDQTtBQUNBLEdBRkEsQ0FJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQU5BLENBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FaQSxDQWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQXBCQSxDQXNCQSw0REFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FqQkEsQ0FrQkEsMkRBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FOQSxDQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FKQSxDQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FQQSxDQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBTkEsQ0FRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBdEJBLENBd0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FKQSxDQU1BO0FBQ0E7QUFDQSxHQUZBLENBSUE7QUFDQTtBQUNBLEdBRkEsQ0FJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FqQkEsQ0FtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQVBBLENBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBUkEsQ0FVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FyR0EsQ0F1R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQWJBLENBZUE7QUFDQTtBQUNBLEdBRkEsQ0FJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBSkEsQ0FNQTtBQUNBO0FBQ0EsR0FDQSxLQUFNLENBQUFJLEtBQU0sQ0FDVjtBQUNGO0FBQ0EsS0FDRUMsV0FBV0EsQ0FBQSxDQUFJLENBQUF0RSxhQUFBLEdBQUEwRCxDQUFBLE1BQUExRCxhQUFBLEdBQUF1RCxDQUFBLE1BQ2IsSUFBSSxDQUFDZ0IsT0FBTyxDQUFHLEdBQUksQ0FBQXJFLE9B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