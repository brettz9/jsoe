function cov_pmr8wb3j7(){var path="/Users/brett/jsoe/src/types.js";var hash="c071c7ca5fa446c8fd6fc1a11540ffe7b4562ffc";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/types.js",statementMap:{"0":{start:{line:66,column:42},end:{line:83,column:1}},"1":{start:{line:67,column:19},end:{line:67,column:52}},"2":{start:{line:68,column:2},end:{line:72,column:3}},"3":{start:{line:69,column:4},end:{line:71,column:6}},"4":{start:{line:73,column:2},end:{line:75,column:3}},"5":{start:{line:74,column:4},end:{line:74,column:60}},"6":{start:{line:76,column:2},end:{line:80,column:3}},"7":{start:{line:77,column:4},end:{line:79,column:6}},"8":{start:{line:82,column:2},end:{line:82,column:59}},"9":{start:{line:439,column:4},end:{line:439,column:33}},"10":{start:{line:442,column:4},end:{line:442,column:49}},"11":{start:{line:448,column:4},end:{line:565,column:6}},"12":{start:{line:573,column:25},end:{line:583,column:5}},"13":{start:{line:574,column:6},end:{line:582,column:9}},"14":{start:{line:575,column:8},end:{line:581,column:11}},"15":{start:{line:585,column:4},end:{line:595,column:6}},"16":{start:{line:604,column:4},end:{line:604,column:23}},"17":{start:{line:605,column:4},end:{line:624,column:7}},"18":{start:{line:606,column:49},end:{line:606,column:52}},"19":{start:{line:607,column:58},end:{line:607,column:65}},"20":{start:{line:608,column:6},end:{line:623,column:7}},"21":{start:{line:609,column:8},end:{line:622,column:11}},"22":{start:{line:612,column:10},end:{line:614,column:11}},"23":{start:{line:613,column:12},end:{line:613,column:39}},"24":{start:{line:615,column:36},end:{line:615,column:56}},"25":{start:{line:616,column:10},end:{line:621,column:13}},"26":{start:{line:617,column:12},end:{line:619,column:13}},"27":{start:{line:618,column:14},end:{line:618,column:50}},"28":{start:{line:620,column:12},end:{line:620,column:63}},"29":{start:{line:636,column:4},end:{line:638,column:14}},"30":{start:{line:650,column:4},end:{line:650,column:42}},"31":{start:{line:656,column:6},end:{line:659,column:7}},"32":{start:{line:662,column:4},end:{line:669,column:7}},"33":{start:{line:674,column:47},end:{line:677,column:5}},"34":{start:{line:679,column:4},end:{line:681,column:5}},"35":{start:{line:682,column:4},end:{line:682,column:36}},"36":{start:{line:687,column:4},end:{line:695,column:6}},"37":{start:{line:700,column:45},end:{line:700,column:74}},"38":{start:{line:701,column:4},end:{line:703,column:5}},"39":{start:{line:702,column:6},end:{line:702,column:18}},"40":{start:{line:704,column:4},end:{line:704,column:44}},"41":{start:{line:710,column:6},end:{line:710,column:31}},"42":{start:{line:713,column:20},end:{line:715,column:5}},"43":{start:{line:717,column:4},end:{line:719,column:5}},"44":{start:{line:718,column:6},end:{line:718,column:66}},"45":{start:{line:721,column:4},end:{line:724,column:6}},"46":{start:{line:725,column:4},end:{line:727,column:6}},"47":{start:{line:735,column:6},end:{line:737,column:7}},"48":{start:{line:738,column:4},end:{line:740,column:5}},"49":{start:{line:739,column:6},end:{line:739,column:62}},"50":{start:{line:742,column:4},end:{line:749,column:6}},"51":{start:{line:744,column:8},end:{line:746,column:10}},"52":{start:{line:758,column:47},end:{line:758,column:72}},"53":{start:{line:759,column:16},end:{line:775,column:7}},"54":{start:{line:776,column:48},end:{line:780,column:5}},"55":{start:{line:781,column:4},end:{line:786,column:5}},"56":{start:{line:782,column:26},end:{line:782,column:50}},"57":{start:{line:783,column:6},end:{line:785,column:9}},"58":{start:{line:784,column:8},end:{line:784,column:45}},"59":{start:{line:787,column:4},end:{line:787,column:16}},"60":{start:{line:793,column:4},end:{line:796,column:5}},"61":{start:{line:800,column:4},end:{line:805,column:7}},"62":{start:{line:801,column:52},end:{line:801,column:59}},"63":{start:{line:802,column:6},end:{line:804,column:7}},"64":{start:{line:803,column:8},end:{line:803,column:55}},"65":{start:{line:807,column:4},end:{line:809,column:5}},"66":{start:{line:808,column:6},end:{line:808,column:50}},"67":{start:{line:814,column:47},end:{line:814,column:72}},"68":{start:{line:816,column:4},end:{line:833,column:5}},"69":{start:{line:817,column:31},end:{line:817,column:64}},"70":{start:{line:818,column:26},end:{line:818,column:50}},"71":{start:{line:819,column:6},end:{line:824,column:8}},"72":{start:{line:829,column:6},end:{line:831,column:7}},"73":{start:{line:830,column:8},end:{line:830,column:37}},"74":{start:{line:832,column:6},end:{line:832,column:19}},"75":{start:{line:834,column:4},end:{line:834,column:16}},"76":{start:{line:839,column:47},end:{line:839,column:72}},"77":{start:{line:840,column:4},end:{line:842,column:5}},"78":{start:{line:841,column:6},end:{line:841,column:38}},"79":{start:{line:859,column:25},end:{line:861,column:12}},"80":{start:{line:862,column:4},end:{line:864,column:5}},"81":{start:{line:863,column:6},end:{line:863,column:66}},"82":{start:{line:865,column:28},end:{line:869,column:6}},"83":{start:{line:868,column:6},end:{line:868,column:72}},"84":{start:{line:870,column:32},end:{line:870,column:69}},"85":{start:{line:870,column:65},end:{line:870,column:68}},"86":{start:{line:872,column:20},end:{line:880,column:10}},"87":{start:{line:873,column:49},end:{line:873,column:55}},"88":{start:{line:874,column:41},end:{line:874,column:46}},"89":{start:{line:875,column:6},end:{line:878,column:7}},"90":{start:{line:876,column:8},end:{line:876,column:42}},"91":{start:{line:877,column:8},end:{line:877,column:32}},"92":{start:{line:879,column:6},end:{line:879,column:17}},"93":{start:{line:881,column:20},end:{line:883,column:46}},"94":{start:{line:883,column:19},end:{line:883,column:35}},"95":{start:{line:888,column:16},end:{line:888,column:20}},"96":{start:{line:889,column:16},end:{line:908,column:6}},"97":{start:{line:890,column:49},end:{line:890,column:55}},"98":{start:{line:891,column:26},end:{line:891,column:33}},"99":{start:{line:892,column:6},end:{line:894,column:7}},"100":{start:{line:893,column:8},end:{line:893,column:48}},"101":{start:{line:895,column:6},end:{line:903,column:22}},"102":{start:{line:904,column:6},end:{line:906,column:8}},"103":{start:{line:907,column:6},end:{line:907,column:19}},"104":{start:{line:910,column:20},end:{line:910,column:25}},"105":{start:{line:911,column:4},end:{line:924,column:5}},"106":{start:{line:912,column:6},end:{line:923,column:9}},"107":{start:{line:913,column:51},end:{line:913,column:57}},"108":{start:{line:914,column:35},end:{line:914,column:42}},"109":{start:{line:915,column:8},end:{line:917,column:10}},"110":{start:{line:918,column:8},end:{line:921,column:9}},"111":{start:{line:919,column:10},end:{line:919,column:27}},"112":{start:{line:920,column:10},end:{line:920,column:41}},"113":{start:{line:922,column:8},end:{line:922,column:21}},"114":{start:{line:925,column:17},end:{line:925,column:21}},"115":{start:{line:926,column:4},end:{line:1011,column:5}},"116":{start:{line:929,column:32},end:{line:929,column:37}},"117":{start:{line:931,column:38},end:{line:931,column:42}},"118":{start:{line:932,column:20},end:{line:932,column:43}},"119":{start:{line:933,column:6},end:{line:933,column:37}},"120":{start:{line:936,column:6},end:{line:961,column:7}},"121":{start:{line:937,column:51},end:{line:937,column:59}},"122":{start:{line:939,column:8},end:{line:941,column:9}},"123":{start:{line:942,column:8},end:{line:954,column:10}},"124":{start:{line:962,column:6},end:{line:964,column:7}},"125":{start:{line:963,column:8},end:{line:963,column:23}},"126":{start:{line:965,column:22},end:{line:965,column:28}},"127":{start:{line:966,column:6},end:{line:968,column:7}},"128":{start:{line:967,column:8},end:{line:967,column:29}},"129":{start:{line:970,column:6},end:{line:980,column:7}},"130":{start:{line:971,column:25},end:{line:975,column:9}},"131":{start:{line:976,column:8},end:{line:979,column:9}},"132":{start:{line:977,column:10},end:{line:977,column:33}},"133":{start:{line:978,column:10},end:{line:978,column:54}},"134":{start:{line:981,column:6},end:{line:1009,column:7}},"135":{start:{line:982,column:24},end:{line:984,column:9}},"136":{start:{line:985,column:8},end:{line:1008,column:9}},"137":{start:{line:986,column:26},end:{line:986,column:47}},"138":{start:{line:987,column:10},end:{line:1004,column:13}},"139":{start:{line:988,column:31},end:{line:990,column:13}},"140":{start:{line:993,column:24},end:{line:993,column:66}},"141":{start:{line:994,column:30},end:{line:994,column:46}},"142":{start:{line:997,column:12},end:{line:1003,column:13}},"143":{start:{line:1000,column:50},end:{line:1002,column:65}},"144":{start:{line:1005,column:10},end:{line:1005,column:55}},"145":{start:{line:1007,column:10},end:{line:1007,column:53}},"146":{start:{line:1010,column:6},end:{line:1010,column:49}},"147":{start:{line:1012,column:4},end:{line:1012,column:40}},"148":{start:{line:1020,column:4},end:{line:1020,column:37}},"149":{start:{line:1025,column:0},end:{line:1027,column:2}},"150":{start:{line:1026,column:2},end:{line:1026,column:49}},"151":{start:{line:1030,column:0},end:{line:1061,column:2}},"152":{start:{line:1032,column:2},end:{line:1038,column:3}},"153":{start:{line:1037,column:4},end:{line:1037,column:17}},"154":{start:{line:1042,column:6},end:{line:1045,column:7}},"155":{start:{line:1047,column:2},end:{line:1060,column:4}},"156":{start:{line:1053,column:6},end:{line:1055,column:46}},"157":{start:{line:1069,column:2},end:{line:1070,column:62}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:66,column:42},end:{line:66,column:43}},loc:{start:{line:66,column:54},end:{line:83,column:1}},line:66},"1":{name:"(anonymous_1)",decl:{start:{line:438,column:2},end:{line:438,column:3}},loc:{start:{line:438,column:17},end:{line:625,column:3}},line:438},"2":{name:"(anonymous_2)",decl:{start:{line:573,column:25},end:{line:573,column:26}},loc:{start:{line:573,column:43},end:{line:583,column:5}},line:573},"3":{name:"(anonymous_3)",decl:{start:{line:574,column:27},end:{line:574,column:28}},loc:{start:{line:574,column:51},end:{line:582,column:7}},line:574},"4":{name:"(anonymous_4)",decl:{start:{line:605,column:48},end:{line:605,column:49}},loc:{start:{line:605,column:68},end:{line:624,column:5}},line:605},"5":{name:"(anonymous_5)",decl:{start:{line:609,column:47},end:{line:609,column:48}},loc:{start:{line:611,column:14},end:{line:622,column:9}},line:611},"6":{name:"(anonymous_6)",decl:{start:{line:616,column:27},end:{line:616,column:28}},loc:{start:{line:616,column:40},end:{line:621,column:11}},line:616},"7":{name:"(anonymous_7)",decl:{start:{line:633,column:2},end:{line:633,column:3}},loc:{start:{line:635,column:4},end:{line:639,column:3}},line:635},"8":{name:"(anonymous_8)",decl:{start:{line:649,column:2},end:{line:649,column:3}},loc:{start:{line:649,column:35},end:{line:651,column:3}},line:649},"9":{name:"(anonymous_9)",decl:{start:{line:654,column:2},end:{line:654,column:3}},loc:{start:{line:654,column:48},end:{line:670,column:3}},line:654},"10":{name:"(anonymous_10)",decl:{start:{line:673,column:2},end:{line:673,column:3}},loc:{start:{line:673,column:31},end:{line:683,column:3}},line:673},"11":{name:"(anonymous_11)",decl:{start:{line:686,column:2},end:{line:686,column:3}},loc:{start:{line:686,column:47},end:{line:696,column:3}},line:686},"12":{name:"(anonymous_12)",decl:{start:{line:699,column:2},end:{line:699,column:3}},loc:{start:{line:699,column:43},end:{line:705,column:3}},line:699},"13":{name:"(anonymous_13)",decl:{start:{line:708,column:2},end:{line:708,column:3}},loc:{start:{line:708,column:53},end:{line:728,column:3}},line:708},"14":{name:"(anonymous_14)",decl:{start:{line:731,column:2},end:{line:731,column:3}},loc:{start:{line:733,column:4},end:{line:750,column:3}},line:733},"15":{name:"(anonymous_15)",decl:{start:{line:743,column:52},end:{line:743,column:53}},loc:{start:{line:743,column:67},end:{line:747,column:7}},line:743},"16":{name:"(anonymous_16)",decl:{start:{line:753,column:2},end:{line:753,column:3}},loc:{start:{line:757,column:5},end:{line:788,column:3}},line:757},"17":{name:"(anonymous_17)",decl:{start:{line:783,column:44},end:{line:783,column:45}},loc:{start:{line:783,column:50},end:{line:785,column:7}},line:783},"18":{name:"(anonymous_18)",decl:{start:{line:791,column:2},end:{line:791,column:3}},loc:{start:{line:791,column:36},end:{line:810,column:3}},line:791},"19":{name:"(anonymous_19)",decl:{start:{line:800,column:47},end:{line:800,column:48}},loc:{start:{line:800,column:60},end:{line:805,column:5}},line:800},"20":{name:"(anonymous_20)",decl:{start:{line:813,column:2},end:{line:813,column:3}},loc:{start:{line:813,column:48},end:{line:835,column:3}},line:813},"21":{name:"(anonymous_21)",decl:{start:{line:838,column:2},end:{line:838,column:3}},loc:{start:{line:838,column:33},end:{line:843,column:3}},line:838},"22":{name:"(anonymous_22)",decl:{start:{line:855,column:2},end:{line:855,column:3}},loc:{start:{line:858,column:5},end:{line:1013,column:3}},line:858},"23":{name:"(anonymous_23)",decl:{start:{line:867,column:13},end:{line:867,column:14}},loc:{start:{line:867,column:25},end:{line:869,column:5}},line:867},"24":{name:"(anonymous_24)",decl:{start:{line:870,column:52},end:{line:870,column:53}},loc:{start:{line:870,column:65},end:{line:870,column:68}},line:870},"25":{name:"(anonymous_25)",decl:{start:{line:872,column:47},end:{line:872,column:48}},loc:{start:{line:872,column:66},end:{line:880,column:5}},line:872},"26":{name:"(anonymous_26)",decl:{start:{line:883,column:10},end:{line:883,column:11}},loc:{start:{line:883,column:19},end:{line:883,column:35}},line:883},"27":{name:"(anonymous_27)",decl:{start:{line:889,column:37},end:{line:889,column:38}},loc:{start:{line:889,column:64},end:{line:908,column:5}},line:889},"28":{name:"(anonymous_28)",decl:{start:{line:912,column:35},end:{line:912,column:36}},loc:{start:{line:912,column:62},end:{line:923,column:7}},line:912},"29":{name:"(anonymous_29)",decl:{start:{line:987,column:29},end:{line:987,column:30}},loc:{start:{line:987,column:67},end:{line:1004,column:11}},line:987},"30":{name:"(anonymous_30)",decl:{start:{line:1019,column:2},end:{line:1019,column:3}},loc:{start:{line:1019,column:23},end:{line:1021,column:3}},line:1019},"31":{name:"(anonymous_31)",decl:{start:{line:1025,column:23},end:{line:1025,column:24}},loc:{start:{line:1025,column:33},end:{line:1027,column:1}},line:1025},"32":{name:"(anonymous_32)",decl:{start:{line:1030,column:23},end:{line:1030,column:24}},loc:{start:{line:1030,column:66},end:{line:1061,column:1}},line:1030},"33":{name:"(anonymous_33)",decl:{start:{line:1050,column:22},end:{line:1050,column:23}},loc:{start:{line:1050,column:31},end:{line:1056,column:5}},line:1050},"34":{name:"escapeRegex",decl:{start:{line:1068,column:16},end:{line:1068,column:27}},loc:{start:{line:1068,column:34},end:{line:1071,column:1}},line:1068}},branchMap:{"0":{loc:{start:{line:68,column:2},end:{line:72,column:3}},type:"if",locations:[{start:{line:68,column:2},end:{line:72,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:68},"1":{loc:{start:{line:73,column:2},end:{line:75,column:3}},type:"if",locations:[{start:{line:73,column:2},end:{line:75,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:73},"2":{loc:{start:{line:76,column:2},end:{line:80,column:3}},type:"if",locations:[{start:{line:76,column:2},end:{line:80,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:76},"3":{loc:{start:{line:608,column:6},end:{line:623,column:7}},type:"if",locations:[{start:{line:608,column:6},end:{line:623,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:608},"4":{loc:{start:{line:612,column:10},end:{line:614,column:11}},type:"if",locations:[{start:{line:612,column:10},end:{line:614,column:11}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:612},"5":{loc:{start:{line:617,column:12},end:{line:619,column:13}},type:"if",locations:[{start:{line:617,column:12},end:{line:619,column:13}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:617},"6":{loc:{start:{line:665,column:16},end:{line:667,column:7}},type:"binary-expr",locations:[{start:{line:665,column:16},end:{line:665,column:24}},{start:{line:665,column:28},end:{line:667,column:7}}],line:665},"7":{loc:{start:{line:679,column:4},end:{line:681,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:679},"8":{loc:{start:{line:701,column:4},end:{line:703,column:5}},type:"if",locations:[{start:{line:701,column:4},end:{line:703,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:701},"9":{loc:{start:{line:708,column:26},end:{line:708,column:51}},type:"default-arg",locations:[{start:{line:708,column:42},end:{line:708,column:51}}],line:708},"10":{loc:{start:{line:717,column:4},end:{line:719,column:5}},type:"if",locations:[{start:{line:717,column:4},end:{line:719,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:717},"11":{loc:{start:{line:717,column:8},end:{line:717,column:50}},type:"binary-expr",locations:[{start:{line:717,column:8},end:{line:717,column:21}},{start:{line:717,column:25},end:{line:717,column:50}}],line:717},"12":{loc:{start:{line:738,column:4},end:{line:740,column:5}},type:"if",locations:[{start:{line:738,column:4},end:{line:740,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:738},"13":{loc:{start:{line:759,column:16},end:{line:775,column:7}},type:"cond-expr",locations:[{start:{line:760,column:8},end:{line:767,column:7}},{start:{line:768,column:8},end:{line:775,column:7}}],line:759},"14":{loc:{start:{line:777,column:10},end:{line:779,column:29}},type:"cond-expr",locations:[{start:{line:778,column:10},end:{line:778,column:29}},{start:{line:779,column:10},end:{line:779,column:29}}],line:777},"15":{loc:{start:{line:781,column:4},end:{line:786,column:5}},type:"if",locations:[{start:{line:781,column:4},end:{line:786,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:781},"16":{loc:{start:{line:781,column:8},end:{line:781,column:37}},type:"binary-expr",locations:[{start:{line:781,column:8},end:{line:781,column:17}},{start:{line:781,column:21},end:{line:781,column:37}}],line:781},"17":{loc:{start:{line:793,column:4},end:{line:796,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:793},"18":{loc:{start:{line:802,column:6},end:{line:804,column:7}},type:"if",locations:[{start:{line:802,column:6},end:{line:804,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:802},"19":{loc:{start:{line:807,column:4},end:{line:809,column:5}},type:"if",locations:[{start:{line:807,column:4},end:{line:809,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:807},"20":{loc:{start:{line:816,column:4},end:{line:833,column:5}},type:"if",locations:[{start:{line:816,column:4},end:{line:833,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:816},"21":{loc:{start:{line:820,column:8},end:{line:823,column:32}},type:"cond-expr",locations:[{start:{line:821,column:12},end:{line:821,column:14}},{start:{line:823,column:12},end:{line:823,column:32}}],line:820},"22":{loc:{start:{line:823,column:12},end:{line:823,column:32}},type:"binary-expr",locations:[{start:{line:823,column:12},end:{line:823,column:19}},{start:{line:823,column:23},end:{line:823,column:32}}],line:823},"23":{loc:{start:{line:829,column:6},end:{line:831,column:7}},type:"if",locations:[{start:{line:829,column:6},end:{line:831,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:829},"24":{loc:{start:{line:840,column:4},end:{line:842,column:5}},type:"if",locations:[{start:{line:840,column:4},end:{line:842,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:840},"25":{loc:{start:{line:856,column:19},end:{line:856,column:40}},type:"default-arg",locations:[{start:{line:856,column:38},end:{line:856,column:40}}],line:856},"26":{loc:{start:{line:856,column:42},end:{line:856,column:57}},type:"default-arg",locations:[{start:{line:856,column:53},end:{line:856,column:57}}],line:856},"27":{loc:{start:{line:857,column:4},end:{line:857,column:19}},type:"default-arg",locations:[{start:{line:857,column:17},end:{line:857,column:19}}],line:857},"28":{loc:{start:{line:862,column:4},end:{line:864,column:5}},type:"if",locations:[{start:{line:862,column:4},end:{line:864,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:862},"29":{loc:{start:{line:875,column:6},end:{line:878,column:7}},type:"if",locations:[{start:{line:875,column:6},end:{line:878,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:875},"30":{loc:{start:{line:892,column:6},end:{line:894,column:7}},type:"if",locations:[{start:{line:892,column:6},end:{line:894,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:892},"31":{loc:{start:{line:895,column:20},end:{line:903,column:21}},type:"cond-expr",locations:[{start:{line:897,column:10},end:{line:902,column:9}},{start:{line:903,column:10},end:{line:903,column:21}}],line:895},"32":{loc:{start:{line:904,column:14},end:{line:906,column:7}},type:"binary-expr",locations:[{start:{line:904,column:14},end:{line:904,column:39}},{start:{line:904,column:43},end:{line:906,column:7}}],line:904},"33":{loc:{start:{line:904,column:22},end:{line:904,column:38}},type:"binary-expr",locations:[{start:{line:904,column:22},end:{line:904,column:33}},{start:{line:904,column:37},end:{line:904,column:38}}],line:904},"34":{loc:{start:{line:911,column:4},end:{line:924,column:5}},type:"if",locations:[{start:{line:911,column:4},end:{line:924,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:911},"35":{loc:{start:{line:915,column:16},end:{line:917,column:9}},type:"binary-expr",locations:[{start:{line:915,column:16},end:{line:915,column:46}},{start:{line:915,column:50},end:{line:917,column:9}}],line:915},"36":{loc:{start:{line:915,column:24},end:{line:915,column:45}},type:"binary-expr",locations:[{start:{line:915,column:24},end:{line:915,column:40}},{start:{line:915,column:44},end:{line:915,column:45}}],line:915},"37":{loc:{start:{line:918,column:8},end:{line:921,column:9}},type:"if",locations:[{start:{line:918,column:8},end:{line:921,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:918},"38":{loc:{start:{line:926,column:4},end:{line:1011,column:5}},type:"if",locations:[{start:{line:926,column:4},end:{line:1011,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:926},"39":{loc:{start:{line:939,column:8},end:{line:941,column:9}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:939},"40":{loc:{start:{line:943,column:10},end:{line:943,column:56}},type:"binary-expr",locations:[{start:{line:943,column:10},end:{line:943,column:35}},{start:{line:943,column:39},end:{line:943,column:51}},{start:{line:943,column:55},end:{line:943,column:56}}],line:943},"41":{loc:{start:{line:962,column:6},end:{line:964,column:7}},type:"if",locations:[{start:{line:962,column:6},end:{line:964,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:962},"42":{loc:{start:{line:966,column:6},end:{line:968,column:7}},type:"if",locations:[{start:{line:966,column:6},end:{line:968,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:966},"43":{loc:{start:{line:970,column:6},end:{line:980,column:7}},type:"if",locations:[{start:{line:970,column:6},end:{line:980,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:970},"44":{loc:{start:{line:970,column:10},end:{line:970,column:46}},type:"binary-expr",locations:[{start:{line:970,column:10},end:{line:970,column:19}},{start:{line:970,column:23},end:{line:970,column:46}}],line:970},"45":{loc:{start:{line:976,column:8},end:{line:979,column:9}},type:"if",locations:[{start:{line:976,column:8},end:{line:979,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:976},"46":{loc:{start:{line:981,column:6},end:{line:1009,column:7}},type:"if",locations:[{start:{line:981,column:6},end:{line:1009,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:981},"47":{loc:{start:{line:997,column:12},end:{line:1003,column:13}},type:"if",locations:[{start:{line:997,column:12},end:{line:1003,column:13}}],line:997},"48":{loc:{start:{line:998,column:14},end:{line:998,column:70}},type:"binary-expr",locations:[{start:{line:998,column:14},end:{line:998,column:48}},{start:{line:998,column:52},end:{line:998,column:70}}],line:998},"49":{loc:{start:{line:1026,column:16},end:{line:1026,column:47}},type:"cond-expr",locations:[{start:{line:1026,column:23},end:{line:1026,column:40}},{start:{line:1026,column:43},end:{line:1026,column:47}}],line:1026},"50":{loc:{start:{line:1032,column:2},end:{line:1038,column:3}},type:"if",locations:[{start:{line:1032,column:2},end:{line:1038,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:1032},"51":{loc:{start:{line:1032,column:6},end:{line:1035,column:29}},type:"binary-expr",locations:[{start:{line:1032,column:6},end:{line:1032,column:24}},{start:{line:1035,column:8},end:{line:1035,column:29}}],line:1032},"52":{loc:{start:{line:1044,column:8},end:{line:1044,column:79}},type:"cond-expr",locations:[{start:{line:1044,column:25},end:{line:1044,column:45}},{start:{line:1044,column:48},end:{line:1044,column:79}}],line:1044},"53":{loc:{start:{line:1053,column:13},end:{line:1055,column:45}},type:"binary-expr",locations:[{start:{line:1053,column:13},end:{line:1053,column:30}},{start:{line:1055,column:9},end:{line:1055,column:25}},{start:{line:1055,column:29},end:{line:1055,column:44}}],line:1053}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0],"8":[0,0],"9":[0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0],"26":[0],"27":[0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0],"40":[0,0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c071c7ca5fa446c8fd6fc1a11540ffe7b4562ffc"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_pmr8wb3j7=function(){return actualCoverage;};}return actualCoverage;}cov_pmr8wb3j7();import Formats from'./formats.js';import{// jamilih
jml,// typeson-registry
Typeson,getJSONType,structuredCloningThrowing}from'./vendor-imports.js';import{$e,$$e}from'./utils/templateUtils.js';import nullType from'./fundamentalTypes/nullType.js';import trueType from'./subTypes/trueType.js';import falseType from'./subTypes/falseType.js';import nanType from'./fundamentalTypes/nanType.js';import symbolType from'./fundamentalTypes/symbolType.js';import blobHTMLType from'./subTypes/blobHTMLType.js';import booleanType from'./fundamentalTypes/booleanType.js';import numberType from'./fundamentalTypes/numberType.js';import bigintType from'./fundamentalTypes/bigintType.js';import bigintObjectType from'./fundamentalTypes/bigintObjectType.js';import stringType from'./fundamentalTypes/stringType.js';import arrayReferenceType from'./fundamentalTypes/arrayReferenceType.js';import objectReferenceType from'./fundamentalTypes/objectReferenceType.js';import arrayType from'./fundamentalTypes/arrayType.js';import tupleType from'./fundamentalTypes/tupleType.js';import objectType from'./fundamentalTypes/objectType.js';import recordType from'./fundamentalTypes/recordType.js';import dateType from'./fundamentalTypes/dateType.js';import enumType from'./fundamentalTypes/enumType.js';import setType from'./fundamentalTypes/setType.js';import mapType from'./fundamentalTypes/mapType.js';import literalType from'./fundamentalTypes/literalType.js';import undefinedType from'./fundamentalTypes/undefinedType.js';import voidType from'./fundamentalTypes/voidType.js';import regexpType from'./fundamentalTypes/regexpType.js';import BooleanObjectType from'./fundamentalTypes/BooleanObjectType.js';import NumberObjectType from'./fundamentalTypes/NumberObjectType.js';import StringObjectType from'./fundamentalTypes/StringObjectType.js';// import sparseUndefinedType from './fundamentalTypes/sparseUndefinedType.js';
import SpecialRealNumberSuperType from'./superTypes/SpecialRealNumberType.js';import SpecialNumberSuperType from'./superTypes/SpecialNumberType.js';import errorType from'./fundamentalTypes/errorType.js';import errorsSpecialType from'./superTypes/errorsSpecialType.js';import fileType from'./fundamentalTypes/fileType.js';import filelistType from'./fundamentalTypes/filelistType.js';import blobType from'./fundamentalTypes/blobType.js';import domexceptionType from'./fundamentalTypes/domexceptionType.js';import domrectType from'./superTypes/domrectType.js';import dompointType from'./superTypes/dompointType.js';import dommatrixType from'./superTypes/dommatrixType.js';import buffersourceType from'./superTypes/buffersourceType.js';import noneditableType from'./fundamentalTypes/noneditableType.js';import neverType from'./fundamentalTypes/neverType.js';import promiseType from'./fundamentalTypes/promiseType.js';import functionType from'./fundamentalTypes/functionType.js';import catchType from'./fundamentalTypes/catchType.js';import nativeEnumType from'./fundamentalTypes/nativeEnumType.js';/**
 * Utility to retrieve the property value given a legend element.
 * @param {HTMLLegendElement} legend
 * @returns {string}
 */cov_pmr8wb3j7().s[0]++;export const getPropertyValueFromLegend=legend=>{cov_pmr8wb3j7().f[0]++;const propElem=(cov_pmr8wb3j7().s[1]++,$e(legend,'*[data-prop="true"]'));cov_pmr8wb3j7().s[2]++;if(!propElem){cov_pmr8wb3j7().b[0][0]++;cov_pmr8wb3j7().s[3]++;throw new Error('No property on the supplied legend element');}else{cov_pmr8wb3j7().b[0][1]++;}cov_pmr8wb3j7().s[4]++;if(propElem.nodeName.toLowerCase()==='input'){cov_pmr8wb3j7().b[1][0]++;cov_pmr8wb3j7().s[5]++;return/** @type {HTMLInputElement} */propElem.value;}else{cov_pmr8wb3j7().b[1][1]++;}cov_pmr8wb3j7().s[6]++;if(!propElem.textContent){cov_pmr8wb3j7().b[2][0]++;cov_pmr8wb3j7().s[7]++;throw new Error('No property with text present on the supplied legend element');}else{cov_pmr8wb3j7().b[2][1]++;}// 1-based to 0-based
cov_pmr8wb3j7().s[8]++;return String(Number.parseInt(propElem.textContent)-1);};/**
 * Any other possibilities than `div`?
 * @typedef {HTMLDivElement} RootElement
 */ /**
 * Utility to retrieve the type out of a type root element.
 * @callback GetTypeForRoot
 * @param {?RootElement} root
 * @returns {string} Why would it not exist?
 */ /**
 * Utility to get the value out of a type root element with a given
 *   state and path.
 * @callback GetValueForRoot
 * @param {RootElement} root
 * @param {StateObject} [stateObj]
 * @param {string} [currentPath]
 * @returns {StructuredCloneValue}
 */ /**
 * Utility to get the form control (e.g., input element) for a root.
 * @callback GetFormControlForRoot
 * @param {RootElement} root
 * @returns {null|
 *   HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|HTMLButtonElement}
 */ /**
 * Utility to get the value for a root using its ancestor and state.
 * @callback GetValueFromRootAncestor
 * @param {string|HTMLElement} selOrEl
 * @param {StateObject} [stateObj]
 * @returns {StructuredCloneValue}
 */ /**
 * @callback GetFormControlFromRootAncestor
 * @param {string|HTMLElement} selOrEl
 * @returns {null|HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|
 *   HTMLButtonElement}
 */ /**
 * @typedef {number} Integer
 */ /**
 * @callback GetOptionForType
 * @param {AvailableType} type
 * @param {import('./formatAndTypeChoices.js').ZodexSchema|
 *   undefined} [schemaContent]
 * @returns {[string, {value: AvailableType, title?: string}]}
 */ /**
 * @callback GetTypeOptionsForFormatAndState
 * @param {import('./formats.js').AvailableFormat} format
 * @param {string} [parserState]
 * @param {import('./formatAndTypeChoices.js').ZodexSchema|
 *   undefined} [schemaContent]
 * @param {import('./formatAndTypeChoices.js').ZodexSchema|
 *   undefined} [schemaOriginal]
 * @returns {{
 *   typeOptions: [string, {value: AvailableType, title?: string}][],
 *   schemaObjects: import('./formats/schema.js').ZodexSchema[]
 * }}
 */ /**
* @typedef {{
*   typeNamespace?: string,
*   "readonly"?: boolean,
*   format?: import('./formats.js').AvailableFormat,
*   formats?: import('./formats.js').default,
*   types?: Types,
*   error?: Error,
*   rootUI?: Element,
*   schema?: string,
*   schemaParent?: import('./formats/schema.js').ZodexSchema,
*   schemaContent?: import('./formats/schema.js').ZodexSchema,
*   specificSchema?: import('./formats/schema.js').ZodexSchema,
*   paths?: {[currentPath: string]: {
*     referentPath: string,
*     expectArrayReferent: boolean
*   }},
*   handlingReference?: boolean
* }} StateObject
*/ /* eslint-disable jsdoc/valid-types -- readonly reserved */ /**
 * @typedef {(cfg: {
 *   readonly?: boolean,
 *   resultType?: "both"|"keys"|"values",
 *   typeNamespace?: string,
 *   type: AvailableType,
 *   topRoot?: RootElement,
 *   bringIntoFocus?: boolean|undefined,
 *   buildTypeChoices?: import('./typeChoices.js').BuildTypeChoices,
 *   format: import('./formats.js').AvailableFormat,
 *   schemaContent?: import('./formats/schema.js').ZodexSchema
 *   specificSchemaObject?: import('./formats/schema.js').ZodexSchema
 *   value: StructuredCloneValue,
 *   hasValue: boolean,
 *   replaced?: StructuredCloneValue,
 *   schemaFallingBack?: boolean
 * }) => HTMLElement} GetUIForModeAndType
 */ /* eslint-enable jsdoc/valid-types -- readonly reserved */ /**
 * @typedef {(cfg: {
 *   form: HTMLFormElement,
 *   typeNamespace?: string,
 *   keySelectClass?: string,
 * }) => boolean} ValidValuesSet
 */ /**
 * @typedef {(cfg: {
 *   topRoot: RootElement
 * }) => void} ValidateAllReferences
 */ /**
 * @typedef {(cfg: {
 *   type: AvailableType,
 *   root: RootElement,
 *   topRoot?: RootElement,
 *   avoidReport?: boolean
 * }) => boolean} Validate
 */ /**
 * @typedef {(cfg: {
 *   type: AvailableType,
 *   root: RootElement,
 *   value: StructuredCloneValue,
 * }) => void} SetValue
 */ /**
 * @typedef {(s: string, cfg: {
 *   format: import('./formats.js').AvailableFormat,
 *   state?: string,
 *   endMatchTypeObjs?: TypeObject[]
 *   firstRun?: boolean,
 *   rootHolder?: [
 *     type: string,
 *     parent: {[key: string]: any}|undefined,
 *     parentPath: string|number|undefined,
 *     path: string
 *   ][],
 *   parent?: {[key: string]: any},
 *   parentPath?: string|number,
 *   schemaObject?: import('./formatAndTypeChoices.js').ZodexSchema|undefined
 *   schemaOriginal?: import('./formatAndTypeChoices.js').ZodexSchema|undefined
 * }) => [
*   value: StructuredCloneValue,
*   remnant: string,
*   beginOnly: boolean,
*   assign: boolean
* ]} GetValueForString
*/ /**
 * @typedef {(
 *   info: {topRoot: HTMLDivElement}
 * ) => void} CustomValidateAllReferences
 */ /**
 * @typedef {import('./formats.js').StructuredCloneValue} StructuredCloneValue
 */ /**
 * @typedef {import('jamilih').JamilihArray} JamilihArray
 */ /**
 * @typedef {{
 *   format: import('./formats.js').AvailableFormat,
 *   match: boolean|RegExpMatchArray|null
 *   endMatchTypeObjs: TypeObject[],
 *   remnant: string,
 *   rootHolder: [
 *     type: string,
 *     parent: object|undefined,
 *     parentPath: string|number|undefined,
 *     path: string
 *   ][],
 *   parent?: object,
 *   parentPath?: string|number,
 *   types?: Types
 *   schemaObject?: import('./formatAndTypeChoices.js').ZodexSchema|undefined
 * }} RootInfo
 */ /**
 * @typedef {(
 *   info: {
*     root: HTMLDivElement,
*     value: StructuredCloneValue
*   }
* ) => void} TypeObjectSetValue
 */ /**
 * @typedef {(
 *   s: string, info?: RootInfo
 * ) => {
 *   value?: StructuredCloneValue,
 *   remnant?: string,
 *   assign?: false
 * }} ToValue
 */ /**
 * @typedef {object} TypeObject
 * @property {[
 *   string, {value?: AvailableType, title?: string}?
 * ]} option Creates the option HTML. May set an option `title` or `value`
 * @property {boolean} [array] Private context variable. Whether or not
 *   it is an array. Do not use in other types.
 * @property {boolean} [map] Private context variable. Whether or not
 *   it is a `Map`. Do not use in other types.
 * @property {boolean} [set] Private context variable. Whether or not
 *   it is a `Set`. Do not use in other types.
 * @property {boolean} [record] Private context variable. Whether or not
 *   it is a `Record`. Do not use in other types.
 * @property {boolean} [tuple] Private context variable. Whether or not
 *   it is a tuple type. Do not use in other types.
 * @property {boolean} [filelist] Private context variable. Whether or not
 *   it is a `FileList` type. Do not use in other types.
 * @property {boolean} [sparse] Private context variable. Whether or not
 *   it is a sparse array. Do not use in other types.
 * @property {boolean} [valid] Private context variable. Whether or not
 *   it is a valid date. Do not use in other types.
 * @property {string[]} [regexEndings] Used for string parsing.
 * @property {RegExp|((nonGrouping?: boolean) => RegExp)} [stringRegex] Used
 *   for string parsing. If not present, use `stringRegexBegin` and
 *   `stringRegexEnd`.
 * @property {RegExp} [stringRegexBegin] Used for string parsing. If not
 *   present, use `stringRegex`
 * @property {RegExp} [stringRegexEnd] Used for string parsing. If not
 *   present, use `stringRegex`
 * @property {(
 *   v: StructuredCloneValue
 * ) => boolean} [valueMatch] Function to check whether this type or subtype
 *   matches
 * @property {string} [superType] The greater fundamental type to which
 *   the type belongs
 * @property {ToValue} [toValue] Converts from string to value. May use
 *   `stringRegex` to find components.
 * @property {(info: {
 *   root: HTMLDivElement,
 *   stateObj?: StateObject,
 *   currentPath?: string
 * }) =>
 *  StructuredCloneValue
 * } getValue Gets the value for the type
 * @property {TypeObjectSetValue} [setValue] Should set the value of the
 *   form's `getInput` element
 * @property {(info: {
 *   value?: StructuredCloneValue,
 *   typeNamespace?: string,
 *   type?: AvailableType,
 *   topRoot?: HTMLDivElement,
 *   resultType?: "keys"|"values"|"both",
 *   format: import('./formats.js').AvailableFormat,
 *   specificSchemaObject?: import('./formats/schema.js').ZodexSchema,
 *   types: Types
 *   bringIntoFocus?: boolean|undefined,
 *   buildTypeChoices?: import('./typeChoices.js').BuildTypeChoices,
 *   schemaContent?: import('./formats/schema.js').ZodexSchema
 *   replaced?: any
 * }) => JamilihArray} viewUI
 * @property {(info: {
 *   value?: StructuredCloneValue,
 *   typeNamespace?: string,
 *   bringIntoFocus?: boolean,
 *   format?: import('./formats.js').AvailableFormat,
 *   formats?: import('./formats.js').default,
 *   types: Types,
 *   resultType?: "keys"|"values"|"both",
 *   type?: AvailableType,
 *   forcedState?: string,
 *   buildTypeChoices?: import('./typeChoices.js').BuildTypeChoices,
 *   topRoot?: HTMLDivElement
 *   schemaContent?: import('./formats/schema.js').ZodexSchema,
 *   specificSchemaObject?: import('./formats/schema.js').ZodexSchema,
 *   schemaFallingBack?: boolean
 * }) => JamilihArray} editUI
 * @property {(info: {root: HTMLDivElement}) =>
 *   HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|
 *   HTMLButtonElement} getInput Gets the form control (with `value`)
 * @property {(
 *   info: {root: HTMLDivElement}
 * ) => HTMLSelectElement} [getSelect]
 * @property {(path: string, value: StructuredCloneValue) =>
 *   StructuredCloneValue} [resolveReference] Gets the reference. For array
 *   and object references types only
 * @property {(info: {root: HTMLDivElement, topRoot?: HTMLDivElement}) => {
 *   message?: string,
 *   valid: boolean
 * }} [validate] Message will be used if validity is false.
 * @property {(info: {
 *   topRoot: HTMLDivElement,
 *   types: Types
 * }) => void} [validateAll] For
 *   validation of array and object references only.
 * @property {{
 *   structuredCloning: {
 *     after: AvailableType,
 *     contexts: string[]
 *   }
 * }} [stateDependent] The type after which it should be placed and its
 *   context types
 */ /**
 * @typedef {"null"|"true"|"false"|"number"|"bigint"|"bigintObject"|
 *   "string"|"arrayReference"|
 *   "objectReference"|"array"|"object"|"date"|"userObject"|"undef"|
 *   "SpecialRealNumber"|"SpecialNumber"|"regexp"|"BooleanObject"|
 *   "NumberObject"|"StringObject"|"map"|"set"|"file"|"filelist"|"blobHTML"|
 *   "buffersource"|"dataview"|"imagedata"|"imagebitmap"|
 *   "int8array"|"uint8array"|"uint8clampedarray"|"int16array"|"uint16array"|
 *   "int32array"|"uint32array"|"float32array"|"float64array"|"ValidDate"|
 *   "arrayNonindexKeys"|"error"|"errors"|"blob"|"domexception"|"domrect"|
 *   "dompoint"|"dommatrix"|"resurrectable"|"boolean"|"nan"|"tuple"|
 *   "record"|"void"|"enum"|"literal"|"symbol"|"never"|"promise"|
 *   "function"|"catch"|"nativeEnum"
 * } AvailableType
 */ // Todo: When done with function/promise/symbol, move off here
/**
 * @typedef {TypeObject & {
*   childTypes: string[]
* }} SuperTypeObject
*/ /**
 *
 */class Types{/**
   *
   */constructor(){cov_pmr8wb3j7().f[1]++;cov_pmr8wb3j7().s[9]++;this.formats=new Formats();// Todo: Make customizable and test
/** @type {CustomValidateAllReferences|undefined} */cov_pmr8wb3j7().s[10]++;this.customValidateAllReferences=undefined;/**
     * @type {{
     *   [key in AvailableType]: Partial<TypeObject>|string[]
     * }}
     */cov_pmr8wb3j7().s[11]++;this.availableTypes={null:nullType,true:trueType,false:falseType,nan:nanType,// Schema type
symbol:symbolType,// Non-cloning type
boolean:booleanType,// Schema type
number:numberType,bigint:bigintType,bigintObject:bigintObjectType,string:stringType,arrayReference:arrayReferenceType,objectReference:objectReferenceType,array:arrayType,tuple:tupleType,// Schema type
// Note: We don't do for BooleanObject/NumberObject/StringObject, date,
//   regexp, as added properties on them are not being cloned (in Chrome
//   at least)
object:objectType,record:recordType,// Schema type
date:dateType,enum:enumType,// This type is only for throwing upon cloning errors:
// 'checkDataCloneException'
// This type might be supported by evaluable JS or config
//   passed in:
userObject:['User objects'],undef:undefinedType,void:voidType,SpecialRealNumber:SpecialRealNumberSuperType,SpecialNumber:SpecialNumberSuperType,error:errorType,errors:errorsSpecialType,regexp:regexpType,BooleanObject:BooleanObjectType,NumberObject:NumberObjectType,StringObject:StringObjectType,literal:literalType,map:mapType,set:setType,file:fileType,filelist:filelistType,blob:blobType,blobHTML:blobHTMLType,domexception:domexceptionType,domrect:domrectType,dompoint:dompointType,dommatrix:dommatrixType,resurrectable:noneditableType,never:neverType,promise:promiseType,function:functionType,catch:catchType,nativeEnum:nativeEnumType,buffersource:buffersourceType,dataview:{option:['DataView']},imagedata:{option:['ImageData']},imagebitmap:{option:['ImageBitmap']},// Typed Arrays
int8array:{option:['Int8Array']},uint8array:{option:['Uint8Array']},uint8clampedarray:{option:['Uint8ClampedArray']},int16array:{option:['Int16Array']},uint16array:{option:['Uint16Array']},int32array:{option:['Int32Array']},uint32array:{option:['Uint32Array']},float32array:{option:['Float32Array']},float64array:{option:['Float64Array']},// We're catching this instead of using this
// sparseUndefined: sparseUndefinedType,
ValidDate:{valid:true},/*
      sparseArrays: {
          sparse: true
      },
      */arrayNonindexKeys:{sparse:true}};/**
     * @param {[
     *   copyFrom: AvailableType, copyTo: AvailableType
     * ][]} replacements
     * @returns {void}
     */cov_pmr8wb3j7().s[12]++;const copyTypeObjs=replacements=>{cov_pmr8wb3j7().f[2]++;cov_pmr8wb3j7().s[13]++;replacements.forEach(([copyFrom,copyTo])=>{cov_pmr8wb3j7().f[3]++;cov_pmr8wb3j7().s[14]++;Object.assign(this.availableTypes[(/** @type {AvailableType} */copyTo)],this.availableTypes[(/** @type {AvailableType} */copyFrom)]);});};cov_pmr8wb3j7().s[15]++;copyTypeObjs([(/** @type {[AvailableType, AvailableType]} */['date','ValidDate']),// 'sparseArrays'
/** @type {[AvailableType, AvailableType]} */['array','arrayNonindexKeys']]);/**
     * @type {{
     *   [key: string]: {
     *     [key: string]: {type: AvailableType, after: AvailableType}[]
     *   }
     * }}
     */cov_pmr8wb3j7().s[16]++;this.contexts={};cov_pmr8wb3j7().s[17]++;Object.entries(this.availableTypes).forEach(([typ,typeObj])=>{cov_pmr8wb3j7().f[4]++;const type=(/** @type {AvailableType} */cov_pmr8wb3j7().s[18]++,typ);const{stateDependent}=(/** @type {TypeObject} */cov_pmr8wb3j7().s[19]++,typeObj);cov_pmr8wb3j7().s[20]++;if(stateDependent){cov_pmr8wb3j7().b[3][0]++;cov_pmr8wb3j7().s[21]++;Object.entries(stateDependent).forEach(([format,formatStateDependent])=>{cov_pmr8wb3j7().f[5]++;cov_pmr8wb3j7().s[22]++;if(!this.contexts[format]){cov_pmr8wb3j7().b[4][0]++;cov_pmr8wb3j7().s[23]++;this.contexts[format]={};}else{cov_pmr8wb3j7().b[4][1]++;}const{contexts,after}=(cov_pmr8wb3j7().s[24]++,formatStateDependent);cov_pmr8wb3j7().s[25]++;contexts.forEach(context=>{cov_pmr8wb3j7().f[6]++;cov_pmr8wb3j7().s[26]++;if(!this.contexts[format][context]){cov_pmr8wb3j7().b[5][0]++;cov_pmr8wb3j7().s[27]++;this.contexts[format][context]=[];}else{cov_pmr8wb3j7().b[5][1]++;}cov_pmr8wb3j7().s[28]++;this.contexts[format][context].push({type,after});});});}else{cov_pmr8wb3j7().b[3][1]++;}});}/**
   * @param {import('./formats.js').AvailableFormat} format
   * @param {StructuredCloneValue} record
   * @param {StateObject} stateObj
   * @returns {Promise<Element>}
   */async getControlsForFormatAndValue(format,record,stateObj){cov_pmr8wb3j7().f[7]++;cov_pmr8wb3j7().s[29]++;return(await this.formats.getControlsForFormatAndValue(this,format,record,stateObj)).rootUI;}/**
   * @param {import('./formats.js').AvailableFormat} format
   * @param {string} context
   * @returns {{
   *   type: AvailableType
   *   after: AvailableType
   * }[]}
   */getContextInfo(format,context){cov_pmr8wb3j7().f[8]++;cov_pmr8wb3j7().s[30]++;return this.contexts[format][context];}/** @type {GetValueForRoot} */getValueForRoot(root,stateObj,currentPath){cov_pmr8wb3j7().f[9]++;const typeObject=(/** @type {TypeObject} */cov_pmr8wb3j7().s[31]++,this.availableTypes[(/** @type {AvailableType} */Types.getTypeForRoot(root))]);// Ensure `stateObj` remains a reference if present
cov_pmr8wb3j7().s[32]++;return typeObject.getValue({root,/* istanbul ignore next -- Guard */stateObj:(cov_pmr8wb3j7().b[6][0]++,stateObj)??(cov_pmr8wb3j7().b[6][1]++,{types:this}),currentPath});}/** @type {GetFormControlForRoot} */getFormControlForRoot(root){cov_pmr8wb3j7().f[10]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[33]++,this.availableTypes[(/** @type {AvailableType} */Types.getTypeForRoot(root))]);/* istanbul ignore if -- All have except aliases */cov_pmr8wb3j7().s[34]++;if(!typeObj.getInput){return null;}else{cov_pmr8wb3j7().b[7][0]++;}cov_pmr8wb3j7().s[35]++;return typeObj.getInput({root});}/** @type {GetValueFromRootAncestor} */getValueFromRootAncestor(selOrEl,stateObj){cov_pmr8wb3j7().f[11]++;cov_pmr8wb3j7().s[36]++;return this.getValueForRoot(/** @type {RootElement} */$e(selOrEl,'div[data-type]'),{...stateObj,types:this,formats:this.formats});}/** @type {GetFormControlFromRootAncestor} */getFormControlFromRootAncestor(selOrEl){cov_pmr8wb3j7().f[12]++;const root=(/** @type {RootElement} */cov_pmr8wb3j7().s[37]++,$e(selOrEl,'div[data-type]'));cov_pmr8wb3j7().s[38]++;if(!root){cov_pmr8wb3j7().b[8][0]++;cov_pmr8wb3j7().s[39]++;return null;}else{cov_pmr8wb3j7().b[8][1]++;}cov_pmr8wb3j7().s[40]++;return this.getFormControlForRoot(root);}/** @type {GetOptionForType} */getOptionForType(type,schemaContent=(cov_pmr8wb3j7().b[9][0]++,undefined)){cov_pmr8wb3j7().f[13]++;const availableType=(/** @type {TypeObject} */cov_pmr8wb3j7().s[41]++,this.availableTypes[type]);/** @type {[string, {value?: AvailableType, title?: string}?]} */const optInfo=(cov_pmr8wb3j7().s[42]++,[...availableType.option]);cov_pmr8wb3j7().s[43]++;if((cov_pmr8wb3j7().b[11][0]++,schemaContent)&&(cov_pmr8wb3j7().b[11][1]++,schemaContent.description)){cov_pmr8wb3j7().b[10][0]++;cov_pmr8wb3j7().s[44]++;optInfo[0]=`${optInfo[0]} (${schemaContent.description})`;}else{cov_pmr8wb3j7().b[10][1]++;}cov_pmr8wb3j7().s[45]++;optInfo[1]={value:type,...optInfo[1]};cov_pmr8wb3j7().s[46]++;return/** @type {[string, {value: AvailableType, title?: string}]} */optInfo;}/** @type {GetTypeOptionsForFormatAndState} */getTypeOptionsForFormatAndState(format,parserState,schemaContent,schemaOriginal){cov_pmr8wb3j7().f[14]++;const typesForFormatAndState=(cov_pmr8wb3j7().s[47]++,this.formats.getTypesAndSchemasForFormatAndState(this,format,parserState,schemaContent,schemaOriginal));cov_pmr8wb3j7().s[48]++;if(!typesForFormatAndState){cov_pmr8wb3j7().b[12][0]++;cov_pmr8wb3j7().s[49]++;throw new Error('Unexpected type for format and state');}else{cov_pmr8wb3j7().b[12][1]++;}cov_pmr8wb3j7().s[50]++;return{typeOptions:typesForFormatAndState.types.map((type,idx)=>{cov_pmr8wb3j7().f[15]++;cov_pmr8wb3j7().s[51]++;return this.getOptionForType(type,typesForFormatAndState.schemaObjects[idx]);}),schemaObjects:typesForFormatAndState.schemaObjects};}/** @type {GetUIForModeAndType} */getUIForModeAndType({readonly,resultType,typeNamespace,type,topRoot,bringIntoFocus,buildTypeChoices,format,schemaContent,value,hasValue,replaced,specificSchemaObject,schemaFallingBack}){cov_pmr8wb3j7().f[16]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[52]++,this.availableTypes[type]);const arg=(cov_pmr8wb3j7().s[53]++,hasValue?(cov_pmr8wb3j7().b[13][0]++,{typeNamespace,type,buildTypeChoices,format,schemaContent,resultType,topRoot,bringIntoFocus,value,replaced,specificSchemaObject,schemaFallingBack,types:this}):(cov_pmr8wb3j7().b[13][1]++,{typeNamespace,type,buildTypeChoices,format,schemaContent,resultType,topRoot,bringIntoFocus,replaced,specificSchemaObject,schemaFallingBack,types:this}));const root=(/** @type {HTMLDivElement} */cov_pmr8wb3j7().s[54]++,jml(...(readonly?(cov_pmr8wb3j7().b[14][0]++,typeObj.viewUI(arg)):(cov_pmr8wb3j7().b[14][1]++,typeObj.editUI(arg)))));cov_pmr8wb3j7().s[55]++;if((cov_pmr8wb3j7().b[16][0]++,!readonly)&&(cov_pmr8wb3j7().b[16][1]++,typeObj.validate)){cov_pmr8wb3j7().b[15][0]++;const formControl=(cov_pmr8wb3j7().s[56]++,typeObj.getInput({root}));cov_pmr8wb3j7().s[57]++;formControl.addEventListener('input',()=>{cov_pmr8wb3j7().f[17]++;cov_pmr8wb3j7().s[58]++;this.validate({type,root,topRoot});});}else{cov_pmr8wb3j7().b[15][1]++;}cov_pmr8wb3j7().s[59]++;return root;}/** @type {ValidateAllReferences} */validateAllReferences({topRoot}){cov_pmr8wb3j7().f[18]++;cov_pmr8wb3j7().s[60]++;/* istanbul ignore if -- Unreachable? */if(!topRoot){console.log('No references present');return;}else{cov_pmr8wb3j7().b[17][0]++;}// Could just hard-code arrayReference and objectReference,
//  but we'll try to avoid depending on specific types
cov_pmr8wb3j7().s[61]++;Object.values(this.availableTypes).forEach(typeObj=>{cov_pmr8wb3j7().f[19]++;const typeObject=(/** @type {TypeObject} */cov_pmr8wb3j7().s[62]++,typeObj);cov_pmr8wb3j7().s[63]++;if(typeObject.validateAll){cov_pmr8wb3j7().b[18][0]++;cov_pmr8wb3j7().s[64]++;typeObject.validateAll({topRoot,types:this});}else{cov_pmr8wb3j7().b[18][1]++;}});cov_pmr8wb3j7().s[65]++;if(this.customValidateAllReferences){cov_pmr8wb3j7().b[19][0]++;cov_pmr8wb3j7().s[66]++;this.customValidateAllReferences({topRoot});}else{cov_pmr8wb3j7().b[19][1]++;}}/** @type {Validate} */validate({type,root,topRoot,avoidReport}){cov_pmr8wb3j7().f[20]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[67]++,this.availableTypes[type]);// Todo (low): We limit for now to input boxes which have `validate`
cov_pmr8wb3j7().s[68]++;if(typeObj.validate){cov_pmr8wb3j7().b[20][0]++;const{valid,message}=(cov_pmr8wb3j7().s[69]++,typeObj.validate({root,topRoot}));const formControl=(cov_pmr8wb3j7().s[70]++,typeObj.getInput({root}));cov_pmr8wb3j7().s[71]++;formControl.setCustomValidity(valid?(cov_pmr8wb3j7().b[21][0]++,''/* istanbul ignore next -- Should always have a message */):(cov_pmr8wb3j7().b[21][1]++,(cov_pmr8wb3j7().b[22][0]++,message)||(cov_pmr8wb3j7().b[22][1]++,'Invalid')));// We don't want a focus as `reportValidity` does in at least
//  some cases, but blur() would cause user to
//   leave input (used during input handler)
cov_pmr8wb3j7().s[72]++;if(!avoidReport){cov_pmr8wb3j7().b[23][0]++;cov_pmr8wb3j7().s[73]++;formControl.reportValidity();}else{cov_pmr8wb3j7().b[23][1]++;}cov_pmr8wb3j7().s[74]++;return valid;}else{cov_pmr8wb3j7().b[20][1]++;}cov_pmr8wb3j7().s[75]++;return true;}/** @type {SetValue} */setValue({type,root,value}){cov_pmr8wb3j7().f[21]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[76]++,this.availableTypes[type]);cov_pmr8wb3j7().s[77]++;if(typeObj.setValue){cov_pmr8wb3j7().b[24][0]++;cov_pmr8wb3j7().s[78]++;typeObj.setValue({root,value});}else{cov_pmr8wb3j7().b[24][1]++;}}// Todo (low): Should really add real parser
// Todo (low): Implement `getStringForValue` (e.g., to expose feature for
//          bookmarking object value currently in view); would not be
//          enough to iterate DOM to get string URL as we'd also like
//          the ability to have arbitrary JSON/structuredCloning sent to this
//          URL from other sites/programs (can currently pass in JSON
//          format to the URL, but that is still expecting our Router
//          string syntax)
/** @type {GetValueForString} */getValueForString(s,{format,state,endMatchTypeObjs=(cov_pmr8wb3j7().b[25][0]++,[]),firstRun=(cov_pmr8wb3j7().b[26][0]++,true),rootHolder=(cov_pmr8wb3j7().b[27][0]++,[]),parent,parentPath,schemaObject,schemaOriginal}){cov_pmr8wb3j7().f[22]++;const allowedTypes=(cov_pmr8wb3j7().s[79]++,this.formats.getTypesAndSchemasForFormatAndState(this,format,state,schemaObject,schemaOriginal)?.types);cov_pmr8wb3j7().s[80]++;if(!allowedTypes){cov_pmr8wb3j7().b[28][0]++;cov_pmr8wb3j7().s[81]++;throw new Error('Could not get types for format and state');}else{cov_pmr8wb3j7().b[28][1]++;}const allowedTypeObjs=(cov_pmr8wb3j7().s[82]++,Object.entries(this.availableTypes).filter(([type])=>{cov_pmr8wb3j7().f[23]++;cov_pmr8wb3j7().s[83]++;return allowedTypes.includes(/** @type {AvailableType} */type);}));const allowedTypeObjsVals=(cov_pmr8wb3j7().s[84]++,allowedTypeObjs.map(([,arr])=>{cov_pmr8wb3j7().f[24]++;cov_pmr8wb3j7().s[85]++;return arr;}));const reduced=(cov_pmr8wb3j7().s[86]++,allowedTypeObjsVals.reduce((array,typObj)=>{cov_pmr8wb3j7().f[25]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[87]++,typObj);let arr=(/** @type {string[]} */cov_pmr8wb3j7().s[88]++,array);cov_pmr8wb3j7().s[89]++;if(typeObj.regexEndings){cov_pmr8wb3j7().b[29][0]++;cov_pmr8wb3j7().s[90]++;arr.push(...typeObj.regexEndings);cov_pmr8wb3j7().s[91]++;arr=[...new Set(arr)];}else{cov_pmr8wb3j7().b[29][1]++;}cov_pmr8wb3j7().s[92]++;return arr;},[]));const endings=(cov_pmr8wb3j7().s[93]++,'|'+/** @type {string[]} */reduced.map(str=>{cov_pmr8wb3j7().f[26]++;cov_pmr8wb3j7().s[94]++;return escapeRegex(str);}).join('|'));/**
     * @type {RegExpMatchArray|boolean|null}
     */let match=(cov_pmr8wb3j7().s[95]++,null);let found=(cov_pmr8wb3j7().s[96]++,allowedTypeObjs.find(([/* _type */,typObj])=>{cov_pmr8wb3j7().f[27]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[97]++,typObj);let{stringRegex}=(cov_pmr8wb3j7().s[98]++,typeObj);cov_pmr8wb3j7().s[99]++;if(typeof typeObj.stringRegex==='function'){cov_pmr8wb3j7().b[30][0]++;cov_pmr8wb3j7().s[100]++;stringRegex=typeObj.stringRegex(true);}else{cov_pmr8wb3j7().b[30][1]++;}cov_pmr8wb3j7().s[101]++;stringRegex=stringRegex// Strip off terminal (dollar sign) when matching substrings
?(cov_pmr8wb3j7().b[31][0]++,new RegExp(/** @type {RegExp} */stringRegex.source.slice(0,-1)+'(?=$'+endings+')','u')):(cov_pmr8wb3j7().b[31][1]++,stringRegex);cov_pmr8wb3j7().s[102]++;match=(cov_pmr8wb3j7().b[32][0]++,Boolean((cov_pmr8wb3j7().b[33][0]++,stringRegex)&&(cov_pmr8wb3j7().b[33][1]++,s)))&&(cov_pmr8wb3j7().b[32][1]++,s.match(/** @type {RegExp} */stringRegex));cov_pmr8wb3j7().s[103]++;return match;}));let beginOnly=(cov_pmr8wb3j7().s[104]++,false);cov_pmr8wb3j7().s[105]++;if(found===undefined){cov_pmr8wb3j7().b[34][0]++;cov_pmr8wb3j7().s[106]++;found=allowedTypeObjs.find(([/* _type */,typObj])=>{cov_pmr8wb3j7().f[28]++;const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[107]++,typObj);const{stringRegexBegin}=(cov_pmr8wb3j7().s[108]++,typeObj);cov_pmr8wb3j7().s[109]++;match=(cov_pmr8wb3j7().b[35][0]++,Boolean((cov_pmr8wb3j7().b[36][0]++,stringRegexBegin)&&(cov_pmr8wb3j7().b[36][1]++,s)))&&(cov_pmr8wb3j7().b[35][1]++,s.match(/** @type {RegExp} */stringRegexBegin));cov_pmr8wb3j7().s[110]++;if(match){cov_pmr8wb3j7().b[37][0]++;cov_pmr8wb3j7().s[111]++;beginOnly=true;cov_pmr8wb3j7().s[112]++;endMatchTypeObjs.push(typeObj);}else{cov_pmr8wb3j7().b[37][1]++;}cov_pmr8wb3j7().s[113]++;return match;});}else{cov_pmr8wb3j7().b[34][1]++;}let assign=(cov_pmr8wb3j7().s[114]++,true);cov_pmr8wb3j7().s[115]++;if(found!==undefined){cov_pmr8wb3j7().b[38][0]++;// The `found` is evaluated again, so sets `match` to non-null
const mtch=(/** @type {RegExpMatchArray} */ /** @type {unknown} */cov_pmr8wb3j7().s[116]++,match);const[content,innerContent]=(cov_pmr8wb3j7().s[117]++,mtch);let remnant=(cov_pmr8wb3j7().s[118]++,s.slice(content.length));cov_pmr8wb3j7().s[119]++;s=s.slice(0,content.length);// console.log('s0', s, '::', remnant, match);
let valObj;cov_pmr8wb3j7().s[120]++;try{const typeObj=(/** @type {TypeObject} */cov_pmr8wb3j7().s[121]++,found[1]);/* istanbul ignore if -- TS guard */cov_pmr8wb3j7().s[122]++;if(!typeObj.toValue){throw new Error('Type has no `toValue` method');}else{cov_pmr8wb3j7().b[39][0]++;}cov_pmr8wb3j7().s[123]++;valObj=typeObj.toValue((cov_pmr8wb3j7().b[40][0]++,mtch.groups?.innerContent)||(cov_pmr8wb3j7().b[40][1]++,innerContent)||(cov_pmr8wb3j7().b[40][2]++,s),{types:this,format,match,endMatchTypeObjs,remnant,rootHolder,parent,parentPath,schemaObject});/* istanbul ignore next -- Good regexes should prevent */}catch(e){/* istanbul ignore next -- Good regexes should prevent */console.log('eee',e);/* istanbul ignore next -- Good regexes should prevent */throw e;}cov_pmr8wb3j7().s[124]++;if(valObj.assign===false){cov_pmr8wb3j7().b[41][0]++;cov_pmr8wb3j7().s[125]++;assign=false;}else{cov_pmr8wb3j7().b[41][1]++;}const{value}=(cov_pmr8wb3j7().s[126]++,valObj);cov_pmr8wb3j7().s[127]++;if(valObj.remnant!==undefined){cov_pmr8wb3j7().b[42][0]++;cov_pmr8wb3j7().s[128]++;({remnant}=valObj);}else{cov_pmr8wb3j7().b[42][1]++;}cov_pmr8wb3j7().s[129]++;if((cov_pmr8wb3j7().b[44][0]++,beginOnly)&&(cov_pmr8wb3j7().b[44][1]++,endMatchTypeObjs.length)){cov_pmr8wb3j7().b[43][0]++;const endMatch=(cov_pmr8wb3j7().s[130]++,remnant.match(/** @type {RegExp} */ /** @type {TypeObject} */endMatchTypeObjs.at(-1).stringRegexEnd));cov_pmr8wb3j7().s[131]++;if(endMatch){cov_pmr8wb3j7().b[45][0]++;cov_pmr8wb3j7().s[132]++;endMatchTypeObjs.pop();// Safe now to extract
cov_pmr8wb3j7().s[133]++;remnant=remnant.slice(endMatch[0].length);}else{cov_pmr8wb3j7().b[45][1]++;}}else{cov_pmr8wb3j7().b[43][1]++;}cov_pmr8wb3j7().s[134]++;if(firstRun){cov_pmr8wb3j7().b[46][0]++;const typeson=(cov_pmr8wb3j7().s[135]++,new Typeson().register(structuredCloningThrowing));cov_pmr8wb3j7().s[136]++;try{const topRoot=(cov_pmr8wb3j7().s[137]++,typeson.revive(value));cov_pmr8wb3j7().s[138]++;rootHolder.forEach(([type,parent,parentPath,path])=>{cov_pmr8wb3j7().f[29]++;const typeObject=(cov_pmr8wb3j7().s[139]++,this.availableTypes[(/** @type {AvailableType} */type+'Reference')]);// @ts-expect-error Reference method exists
const val=(cov_pmr8wb3j7().s[140]++,typeObject.resolveReference(path,topRoot));const basicType=(cov_pmr8wb3j7().s[141]++,getJSONType(val));// eslint-disable-next-line @stylistic/max-len -- Long
/* istanbul ignore else -- Successful reference always an object/array? */cov_pmr8wb3j7().s[142]++;if((cov_pmr8wb3j7().b[48][0]++,['array','object'].includes(type))&&(cov_pmr8wb3j7().b[48][1]++,basicType===type)){cov_pmr8wb3j7().b[47][0]++;cov_pmr8wb3j7().s[143]++;/** @type {{[key: string]: any}} */parent[(/** @type {string|number} */parentPath)]=val;}else{}});cov_pmr8wb3j7().s[144]++;return[topRoot,remnant,beginOnly,assign];}catch(err){cov_pmr8wb3j7().s[145]++;console.log('failed Typeson revival',err);}}else{cov_pmr8wb3j7().b[46][1]++;}cov_pmr8wb3j7().s[146]++;return[value,remnant,beginOnly,assign];}else{cov_pmr8wb3j7().b[38][1]++;}cov_pmr8wb3j7().s[147]++;throw new Error('Bad parsing data');}/**
   * @param {AvailableType} type
   * @returns {Partial<TypeObject>|string[]}
   */getTypeObject(type){cov_pmr8wb3j7().f[30]++;cov_pmr8wb3j7().s[148]++;return this.availableTypes[type];}}/** @type {GetTypeForRoot} */cov_pmr8wb3j7().s[149]++;Types.getTypeForRoot=root=>{cov_pmr8wb3j7().f[31]++;cov_pmr8wb3j7().s[150]++;return String(root?(cov_pmr8wb3j7().b[49][0]++,root.dataset.type):(cov_pmr8wb3j7().b[49][1]++,root));};/** @type {ValidValuesSet} */cov_pmr8wb3j7().s[151]++;Types.validValuesSet=({form,typeNamespace,keySelectClass})=>{cov_pmr8wb3j7().f[32]++;cov_pmr8wb3j7().s[152]++;// If form is hidden, don't list errors by default
if((cov_pmr8wb3j7().b[51][0]++,!form.offsetParent)||(cov_pmr8wb3j7().b[51][1]++,// Not an invalid form (bad key or value)
// May be redundant as re-validating below
!form.checkValidity())){cov_pmr8wb3j7().b[50][0]++;cov_pmr8wb3j7().s[153]++;return false;}else{cov_pmr8wb3j7().b[50][1]++;}const typeChoices=(/** @type {(HTMLSelectElement & {$validate: () => boolean})[]} */cov_pmr8wb3j7().s[154]++,$$e(form,keySelectClass?(cov_pmr8wb3j7().b[52][0]++,`.${keySelectClass}`):(cov_pmr8wb3j7().b[52][1]++,`.typeChoices-${typeNamespace}`)));cov_pmr8wb3j7().s[155]++;return(// Specific value type set if present (any descendant, not
//   only the first) chosen
typeChoices.every(sel=>{cov_pmr8wb3j7().f[33]++;cov_pmr8wb3j7().s[156]++;// console.log('sel', sel.value !== '' && sel.$validate());
// Hidden are ok
return(cov_pmr8wb3j7().b[53][0]++,!sel.offsetParent)||// If present, must be valid
(cov_pmr8wb3j7().b[53][1]++,sel.value!=='')&&(cov_pmr8wb3j7().b[53][2]++,sel.$validate());})// Container of a specific type added (should always be present
//   if typeChoices non-empty)
// $e(form, '.typeContainer')
);};/**
 *
 * @param {string} str
 * @returns {string}
 */export function escapeRegex(str){cov_pmr8wb3j7().f[34]++;cov_pmr8wb3j7().s[157]++;return String(str).replaceAll(/[.\\+*?^[\]$(){}=!<>|:-]/gu,String.raw`\$&`);}export default Types;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,