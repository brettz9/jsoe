function cov_10hsn8kd3b(){var path="/Users/brett/jsoe/src/fundamentalTypes/catchType.js";var hash="3876d8d7eb6d7efd5e109e56ecbcf856702b55a3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/fundamentalTypes/catchType.js",statementMap:{"0":{start:{line:6,column:18},end:{line:135,column:1}},"1":{start:{line:11,column:4},end:{line:11,column:51}},"2":{start:{line:14,column:18},end:{line:14,column:66}},"3":{start:{line:15,column:4},end:{line:15,column:19}},"4":{start:{line:18,column:4},end:{line:18,column:75}},"5":{start:{line:22,column:4},end:{line:22,column:40}},"6":{start:{line:25,column:4},end:{line:25,column:39}},"7":{start:{line:33,column:4},end:{line:93,column:7}},"8":{start:{line:100,column:45},end:{line:103,column:14}},"9":{start:{line:104,column:4},end:{line:133,column:7}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:2},end:{line:9,column:3}},loc:{start:{line:9,column:17},end:{line:12,column:3}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:2},end:{line:13,column:3}},loc:{start:{line:13,column:14},end:{line:16,column:3}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:17,column:2},end:{line:17,column:3}},loc:{start:{line:17,column:20},end:{line:19,column:3}},line:17},"3":{name:"(anonymous_3)",decl:{start:{line:21,column:2},end:{line:21,column:3}},loc:{start:{line:21,column:27},end:{line:23,column:3}},line:21},"4":{name:"(anonymous_4)",decl:{start:{line:24,column:2},end:{line:24,column:3}},loc:{start:{line:24,column:20},end:{line:26,column:3}},line:24},"5":{name:"(anonymous_5)",decl:{start:{line:27,column:2},end:{line:27,column:3}},loc:{start:{line:32,column:5},end:{line:94,column:3}},line:32},"6":{name:"(anonymous_6)",decl:{start:{line:95,column:2},end:{line:95,column:3}},loc:{start:{line:98,column:5},end:{line:134,column:3}},line:98}},branchMap:{"0":{loc:{start:{line:14,column:18},end:{line:14,column:66}},type:"cond-expr",locations:[{start:{line:14,column:40},end:{line:14,column:54}},{start:{line:14,column:57},end:{line:14,column:66}}],line:14},"1":{loc:{start:{line:35,column:13},end:{line:35,column:61}},type:"binary-expr",locations:[{start:{line:35,column:13},end:{line:35,column:46}},{start:{line:35,column:50},end:{line:35,column:61}}],line:35},"2":{loc:{start:{line:106,column:13},end:{line:106,column:63}},type:"binary-expr",locations:[{start:{line:106,column:13},end:{line:106,column:46}},{start:{line:106,column:50},end:{line:106,column:63}}],line:106}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3876d8d7eb6d7efd5e109e56ecbcf856702b55a3"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_10hsn8kd3b=function(){return actualCoverage;};}return actualCoverage;}cov_10hsn8kd3b();import{$e}from'../utils/templateUtils.js';/**
 * @type {import('../types.js').TypeObject}
 */const catchType=(cov_10hsn8kd3b().s[0]++,{option:['Catch'],stringRegex:/^catch\((.*)\)$/u,valueMatch(x){cov_10hsn8kd3b().f[0]++;cov_10hsn8kd3b().s[1]++;// Todo: Should expand types here and in `toValue`
return['number','string'].includes(typeof x);},toValue(s){cov_10hsn8kd3b().f[1]++;const value=(cov_10hsn8kd3b().s[2]++,s.charAt(0)==='"'?(cov_10hsn8kd3b().b[0][0]++,s.slice(1,-1)):(cov_10hsn8kd3b().b[0][1]++,Number(s)));cov_10hsn8kd3b().s[3]++;return{value};},getInput({root}){cov_10hsn8kd3b().f[2]++;cov_10hsn8kd3b().s[4]++;return/** @type {HTMLTextAreaElement} */$e(root,'input,textarea');},// Todo: Fix/Test the following method
setValue({root,value}){cov_10hsn8kd3b().f[3]++;cov_10hsn8kd3b().s[5]++;this.getInput({root}).value=value;},getValue({root}){cov_10hsn8kd3b().f[4]++;cov_10hsn8kd3b().s[6]++;return this.getInput({root}).value;},viewUI({specificSchemaObject,types,resultType,typeNamespace,topRoot,format,bringIntoFocus,buildTypeChoices,// schemaContent,
replaced,value}){cov_10hsn8kd3b().f[5]++;cov_10hsn8kd3b().s[7]++;return['span',{dataset:{type:'catch'},title:(cov_10hsn8kd3b().b[1][0]++,specificSchemaObject?.description)??(cov_10hsn8kd3b().b[1][1]++,'(a catch)')},[['b',['Catch']],['br'],'Default value',['br'],['div',{class:'defaultValue'},[types.getUIForModeAndType({readonly:true,specificSchemaObject:/** @type {import('zodex').SzCatch} */specificSchemaObject?.innerType,hasValue:true,value,resultType,typeNamespace,type:(/** @type {import('../types.js').AvailableType} */ /** @type {import('zodex').SzCatch} */specificSchemaObject?.innerType?.type),topRoot,bringIntoFocus,buildTypeChoices,format,// schemaContent,
replaced})]],'Catch value',['br'],['div',{class:'catchValue'},[types.getUIForModeAndType({readonly:true,specificSchemaObject:{...(/** @type {import('zodex').SzCatch} */specificSchemaObject?.innerType),description:'(catch value)'},hasValue:true,value:/** @type {import('zodex').SzCatch} */specificSchemaObject// @ts-expect-error Wait until change Zodex fork
.value,resultType,typeNamespace,type:(/** @type {import('../types.js').AvailableType} */ /** @type {import('zodex').SzCatch} */specificSchemaObject?.innerType?.type),topRoot,bringIntoFocus,buildTypeChoices,format,// schemaContent,
replaced})]]]];},editUI({format,type,buildTypeChoices,specificSchemaObject,topRoot,schemaContent,typeNamespace}){cov_10hsn8kd3b().f[6]++;const schemaValue=(/** @type {import('zodex').SzCatch} */cov_10hsn8kd3b().s[8]++,specificSchemaObject// @ts-expect-error Undo when Zodex may update to support
?.value);cov_10hsn8kd3b().s[9]++;return['div',{dataset:{type:'catch'},title:(cov_10hsn8kd3b().b[2][0]++,specificSchemaObject?.description)??(cov_10hsn8kd3b().b[2][1]++,'(a `catch`)')},[['label',[['b',{title:String(schemaValue)},['Value']],' ',...(/** @type {import('../typeChoices.js').BuildTypeChoices} */buildTypeChoices({// resultType,
// eslint-disable-next-line object-shorthand -- TS
topRoot:(/** @type {HTMLDivElement} */topRoot),// eslint-disable-next-line object-shorthand -- TS
format:(/** @type {import('../formats.js').AvailableFormat} */format),value:schemaValue,schemaOriginal:schemaContent,schemaContent:/** @type {import('zodex').SzCatch} */specificSchemaObject?.innerType,state:type,// itemIndex,
typeNamespace}).domArray)]]]];}});export default catchType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,