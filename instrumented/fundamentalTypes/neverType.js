function cov_74vijlzjr(){var path="/Users/brett/jsoe/src/fundamentalTypes/neverType.js";var hash="1bc0d5fbc8af370b4d72c8f28eb1b1b1bb48d334";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/fundamentalTypes/neverType.js",statementMap:{"0":{start:{line:6,column:18},end:{line:52,column:1}},"1":{start:{line:41,column:4},end:{line:50,column:7}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:40,column:2},end:{line:40,column:3}},loc:{start:{line:40,column:27},end:{line:51,column:3}},line:40}},branchMap:{},s:{"0":0,"1":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1bc0d5fbc8af370b4d72c8f28eb1b1b1bb48d334"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_74vijlzjr=function(){return actualCoverage;};}return actualCoverage;}cov_74vijlzjr();import{$e}from'../utils/templateUtils.js';/**
 * @type {import('../types.js').TypeObject}
 */const neverType=(cov_74vijlzjr().s[0]++,{stringRegex:/^never$/u,option:['Never'],/* istanbul ignore next -- Back-up in case shows */valueMatch(){/* istanbul ignore next -- Back-up in case shows */return false;},/* istanbul ignore next -- Back-up in case shows */toValue(/* _s */){/* istanbul ignore next -- Back-up in case shows */throw new Error('Cannot convert to value');},/* istanbul ignore next -- Back-up in case shows */getValue(){/* istanbul ignore next -- Back-up in case shows */return/** @type {import('../types.js').ToValue} */(/* istanbul ignore next -- Back-up in case shows */this.toValue)('');},/* istanbul ignore next -- Back-up in case shows */viewUI({specificSchemaObject}){/* istanbul ignore next -- Back-up in case shows */return['i',{dataset:{type:'never'},title:specificSchemaObject?.description??'(a `never`)'},['never']];},/* istanbul ignore next -- No dupe keys, array refs, or validation */getInput({root}){/* istanbul ignore next -- Back-up in case shows */return/** @type {HTMLInputElement} */$e(root,'input');},editUI({typeNamespace}){cov_74vijlzjr().f[0]++;cov_74vijlzjr().s[1]++;return['div',{dataset:{type:'never'}},[['label',['Never (no value present here)',['input',{type:'checkbox',name:`${typeNamespace}-never`,hidden:true}]]]]];}});export default neverType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfNzR2aWpsempyIiwiYWN0dWFsQ292ZXJhZ2UiLCIkZSIsIm5ldmVyVHlwZSIsInMiLCJzdHJpbmdSZWdleCIsIm9wdGlvbiIsInZhbHVlTWF0Y2giLCJ0b1ZhbHVlIiwiRXJyb3IiLCJnZXRWYWx1ZSIsInZpZXdVSSIsInNwZWNpZmljU2NoZW1hT2JqZWN0IiwiZGF0YXNldCIsInR5cGUiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZ2V0SW5wdXQiLCJyb290IiwiZWRpdFVJIiwidHlwZU5hbWVzcGFjZSIsImYiLCJuYW1lIiwiaGlkZGVuIl0sInNvdXJjZXMiOlsibmV2ZXJUeXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7JGV9IGZyb20gJy4uL3V0aWxzL3RlbXBsYXRlVXRpbHMuanMnO1xuXG4vKipcbiAqIEB0eXBlIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuVHlwZU9iamVjdH1cbiAqL1xuY29uc3QgbmV2ZXJUeXBlID0ge1xuICBzdHJpbmdSZWdleDogL15uZXZlciQvdSxcbiAgb3B0aW9uOiBbJ05ldmVyJ10sXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIEJhY2stdXAgaW4gY2FzZSBzaG93cyAqL1xuICB2YWx1ZU1hdGNoICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtLSBCYWNrLXVwIGluIGNhc2Ugc2hvd3MgKi9cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIEJhY2stdXAgaW4gY2FzZSBzaG93cyAqL1xuICB0b1ZhbHVlICgvKiBfcyAqLykge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIEJhY2stdXAgaW4gY2FzZSBzaG93cyAqL1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNvbnZlcnQgdG8gdmFsdWUnKTtcbiAgfSxcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gQmFjay11cCBpbiBjYXNlIHNob3dzICovXG4gIGdldFZhbHVlICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtLSBCYWNrLXVwIGluIGNhc2Ugc2hvd3MgKi9cbiAgICByZXR1cm4gLyoqIEB0eXBlIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuVG9WYWx1ZX0gKi8gKFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gQmFjay11cCBpbiBjYXNlIHNob3dzICovXG4gICAgICB0aGlzLnRvVmFsdWVcbiAgICApKCcnKTtcbiAgfSxcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gQmFjay11cCBpbiBjYXNlIHNob3dzICovXG4gIHZpZXdVSSAoe3NwZWNpZmljU2NoZW1hT2JqZWN0fSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIEJhY2stdXAgaW4gY2FzZSBzaG93cyAqL1xuICAgIHJldHVybiBbJ2knLCB7XG4gICAgICBkYXRhc2V0OiB7dHlwZTogJ25ldmVyJ30sXG4gICAgICB0aXRsZTogc3BlY2lmaWNTY2hlbWFPYmplY3Q/LmRlc2NyaXB0aW9uID8/ICcoYSBgbmV2ZXJgKSdcbiAgICB9LCBbJ25ldmVyJ11dO1xuICB9LFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtLSBObyBkdXBlIGtleXMsIGFycmF5IHJlZnMsIG9yIHZhbGlkYXRpb24gKi9cbiAgZ2V0SW5wdXQgKHtyb290fSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0tIEJhY2stdXAgaW4gY2FzZSBzaG93cyAqL1xuICAgIHJldHVybiAvKiogQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9ICovICgkZShyb290LCAnaW5wdXQnKSk7XG4gIH0sXG4gIGVkaXRVSSAoe3R5cGVOYW1lc3BhY2V9KSB7XG4gICAgcmV0dXJuIFsnZGl2Jywge2RhdGFzZXQ6IHt0eXBlOiAnbmV2ZXInfX0sIFtcbiAgICAgIFsnbGFiZWwnLCBbXG4gICAgICAgICdOZXZlciAobm8gdmFsdWUgcHJlc2VudCBoZXJlKScsXG4gICAgICAgIFsnaW5wdXQnLCB7XG4gICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcbiAgICAgICAgICBuYW1lOiBgJHt0eXBlTmFtZXNwYWNlfS1uZXZlcmAsXG4gICAgICAgICAgaGlkZGVuOiB0cnVlXG4gICAgICAgIH1dXG4gICAgICBdXVxuICAgIF1dO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBuZXZlclR5cGU7XG4iXSwibWFwcGluZ3MiOiJnMkJBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlosT0FBUUUsRUFBRSxLQUFPLDJCQUEyQixDQUU1QztBQUNBO0FBQ0EsR0FDQSxLQUFNLENBQUFDLFNBQVMsRUFBQUgsYUFBQSxHQUFBSSxDQUFBLE1BQUcsQ0FDaEJDLFdBQVcsQ0FBRSxVQUFVLENBQ3ZCQyxNQUFNLENBQUUsQ0FBQyxPQUFPLENBQUMsQ0FDakIsbURBQ0FDLFVBQVVBLENBQUEsQ0FBSSxDQUNaLG1EQUNBLE1BQU8sTUFBSyxDQUNkLENBQUMsQ0FDRCxtREFDQUMsT0FBT0EsQ0FBRSxTQUFVLENBQ2pCLG1EQUNBLEtBQU0sSUFBSSxDQUFBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FDNUMsQ0FBQyxDQUNELG1EQUNBQyxRQUFRQSxDQUFBLENBQUksQ0FDVixtREFDQSxNQUFPLDRDQUE2QyxDQUNsRCxtREFDQSxJQUFJLENBQUNGLE9BQU8sRUFDWixFQUFFLENBQUMsQ0FDUCxDQUFDLENBQ0QsbURBQ0FHLE1BQU1BLENBQUUsQ0FBQ0Msb0JBQW9CLENBQUMsQ0FBRSxDQUM5QixtREFDQSxNQUFPLENBQUMsR0FBRyxDQUFFLENBQ1hDLE9BQU8sQ0FBRSxDQUFDQyxJQUFJLENBQUUsT0FBTyxDQUFDLENBQ3hCQyxLQUFLLENBQUVILG9CQUFvQixFQUFFSSxXQUFXLEVBQUksYUFDOUMsQ0FBQyxDQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FDZixDQUFDLENBQ0QscUVBQ0FDLFFBQVFBLENBQUUsQ0FBQ0MsSUFBSSxDQUFDLENBQUUsQ0FDaEIsbURBQ0EsTUFBTywrQkFBaUNoQixFQUFFLENBQUNnQixJQUFJLENBQUUsT0FBTyxDQUFDLENBQzNELENBQUMsQ0FDREMsTUFBTUEsQ0FBRSxDQUFDQyxhQUFhLENBQUMsQ0FBRSxDQUFBcEIsYUFBQSxHQUFBcUIsQ0FBQSxNQUFBckIsYUFBQSxHQUFBSSxDQUFBLE1BQ3ZCLE1BQU8sQ0FBQyxLQUFLLENBQUUsQ0FBQ1MsT0FBTyxDQUFFLENBQUNDLElBQUksQ0FBRSxPQUFPLENBQUMsQ0FBQyxDQUFFLENBQ3pDLENBQUMsT0FBTyxDQUFFLENBQ1IsK0JBQStCLENBQy9CLENBQUMsT0FBTyxDQUFFLENBQ1JBLElBQUksQ0FBRSxVQUFVLENBQ2hCUSxJQUFJLENBQUUsR0FBR0YsYUFBYSxRQUFRLENBQzlCRyxNQUFNLENBQUUsSUFDVixDQUFDLENBQUMsQ0FDSCxDQUFDLENBQ0gsQ0FBQyxDQUNKLENBQ0YsQ0FBQyxFQUVELGNBQWUsQ0FBQXBCLFNBQVMiLCJpZ25vcmVMaXN0IjpbXX0=