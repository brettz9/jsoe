function cov_132oqssb06(){var path="/Users/brett/jsoe/src/fundamentalTypes/functionType.js";var hash="6223fe4dff209b34145d9ae58e9cac63c93213b3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/fundamentalTypes/functionType.js",statementMap:{"0":{start:{line:7,column:21},end:{line:85,column:1}},"1":{start:{line:12,column:4},end:{line:12,column:35}},"2":{start:{line:15,column:4},end:{line:15,column:66}},"3":{start:{line:18,column:4},end:{line:18,column:40}},"4":{start:{line:21,column:4},end:{line:21,column:39}},"5":{start:{line:24,column:4},end:{line:24,column:60}},"6":{start:{line:38,column:30},end:{line:38,column:62}},"7":{start:{line:39,column:74},end:{line:41,column:62}},"8":{start:{line:42,column:4},end:{line:42,column:31}},"9":{start:{line:44,column:4},end:{line:44,column:44}},"10":{start:{line:46,column:4},end:{line:83,column:7}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:11,column:2},end:{line:11,column:3}},loc:{start:{line:11,column:14},end:{line:13,column:3}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:14,column:2},end:{line:14,column:3}},loc:{start:{line:14,column:20},end:{line:16,column:3}},line:14},"2":{name:"(anonymous_2)",decl:{start:{line:17,column:2},end:{line:17,column:3}},loc:{start:{line:17,column:27},end:{line:19,column:3}},line:17},"3":{name:"(anonymous_3)",decl:{start:{line:20,column:2},end:{line:20,column:3}},loc:{start:{line:20,column:20},end:{line:22,column:3}},line:20},"4":{name:"(anonymous_4)",decl:{start:{line:23,column:2},end:{line:23,column:3}},loc:{start:{line:23,column:19},end:{line:25,column:3}},line:23},"5":{name:"(anonymous_5)",decl:{start:{line:26,column:2},end:{line:26,column:3}},loc:{start:{line:29,column:5},end:{line:84,column:3}},line:29}},branchMap:{"0":{loc:{start:{line:39,column:74},end:{line:41,column:62}},type:"binary-expr",locations:[{start:{line:39,column:74},end:{line:41,column:11}},{start:{line:41,column:15},end:{line:41,column:62}}],line:39},"1":{loc:{start:{line:75,column:75},end:{line:77,column:35}},type:"binary-expr",locations:[{start:{line:75,column:75},end:{line:77,column:18}},{start:{line:77,column:22},end:{line:77,column:35}}],line:75}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6223fe4dff209b34145d9ae58e9cac63c93213b3"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_132oqssb06=function(){return actualCoverage;};}return actualCoverage;}cov_132oqssb06();import{$e}from'../utils/templateUtils.js';import{copyObject}from'../utils/objects.js';/**
 * @type {import('../types.js').TypeObject}
 */const functionType=(cov_132oqssb06().s[0]++,{option:['function'],stringRegex:/^function\((.*)\): (.*)$/u,// Todo: Fix all the following methods up to `editUI` to work with children
toValue(s){cov_132oqssb06().f[0]++;cov_132oqssb06().s[1]++;return{value:s.slice(8,-1)};},getInput({root}){cov_132oqssb06().f[1]++;cov_132oqssb06().s[2]++;return/** @type {HTMLTextAreaElement} */$e(root,'input');},setValue({root,value}){cov_132oqssb06().f[2]++;cov_132oqssb06().s[3]++;this.getInput({root}).value=value;},getValue({root}){cov_132oqssb06().f[3]++;cov_132oqssb06().s[4]++;return this.getInput({root}).value;},viewUI({value}){cov_132oqssb06().f[4]++;cov_132oqssb06().s[5]++;return['span',{dataset:{type:'function'}},[value]];},editUI({format,type,buildTypeChoices,specificSchemaObject,topRoot,schemaContent,typeNamespace}){cov_132oqssb06().f[5]++;// Todo: Could make a function instance result type which builds a Function
//        like `new Function('arg1', 'return !arg1');` this just builds a
//        specific function schema instance, and can't have a meaningful
//        `getValue`, etc.; add to demo with tests; could also add to
//        use with `Promise` so that could also build a meaningful
//        implementation
// We want to allow overriding its descriptions
const specificSchemaObj=(cov_132oqssb06().s[6]++,copyObject(specificSchemaObject));const argsTuple=(/** @type {import('zodex').SzFunction<any, any>} */cov_132oqssb06().s[7]++,(cov_132oqssb06().b[0][0]++,specificSchemaObj?.args)??(cov_132oqssb06().b[0][1]++,{type:'tuple',items:[],rest:{type:'any'}}));cov_132oqssb06().s[8]++;argsTuple.description='';// This `description` not in use, but could support
cov_132oqssb06().s[9]++;argsTuple.rest.description='Argument';cov_132oqssb06().s[10]++;return['div',{dataset:{type:'function'}},[['b',['Arguments']],['br'],...(/** @type {import('../typeChoices.js').BuildTypeChoices} */buildTypeChoices({// resultType,
// eslint-disable-next-line object-shorthand -- TS
topRoot:(/** @type {HTMLDivElement} */topRoot),// eslint-disable-next-line object-shorthand -- TS
format:(/** @type {import('../formats.js').AvailableFormat} */format),schemaOriginal:schemaContent,schemaContent:argsTuple,// schemaState,
state:type,// itemIndex,
typeNamespace}).domArray),['b',['Returns']],['br'],...(/** @type {import('../typeChoices.js').BuildTypeChoices} */buildTypeChoices({// resultType,
// eslint-disable-next-line object-shorthand -- TS
topRoot:(/** @type {HTMLDivElement} */topRoot),// eslint-disable-next-line object-shorthand -- TS
format:(/** @type {import('../formats.js').AvailableFormat} */format),schemaOriginal:schemaContent,schemaContent:/** @type {import('zodex').SzFunction<any, any>} */(cov_132oqssb06().b[1][0]++,specificSchemaObj?.returns)??(cov_132oqssb06().b[1][1]++,{type:'any'}),// schemaState,
state:type,// itemIndex,
typeNamespace}).domArray)]];}});export default functionType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTMyb3Fzc2IwNiIsImFjdHVhbENvdmVyYWdlIiwiJGUiLCJjb3B5T2JqZWN0IiwiZnVuY3Rpb25UeXBlIiwicyIsIm9wdGlvbiIsInN0cmluZ1JlZ2V4IiwidG9WYWx1ZSIsImYiLCJ2YWx1ZSIsInNsaWNlIiwiZ2V0SW5wdXQiLCJyb290Iiwic2V0VmFsdWUiLCJnZXRWYWx1ZSIsInZpZXdVSSIsImRhdGFzZXQiLCJ0eXBlIiwiZWRpdFVJIiwiZm9ybWF0IiwiYnVpbGRUeXBlQ2hvaWNlcyIsInNwZWNpZmljU2NoZW1hT2JqZWN0IiwidG9wUm9vdCIsInNjaGVtYUNvbnRlbnQiLCJ0eXBlTmFtZXNwYWNlIiwic3BlY2lmaWNTY2hlbWFPYmoiLCJhcmdzVHVwbGUiLCJiIiwiYXJncyIsIml0ZW1zIiwicmVzdCIsImRlc2NyaXB0aW9uIiwic2NoZW1hT3JpZ2luYWwiLCJzdGF0ZSIsImRvbUFycmF5IiwicmV0dXJucyJdLCJzb3VyY2VzIjpbImZ1bmN0aW9uVHlwZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyRlfSBmcm9tICcuLi91dGlscy90ZW1wbGF0ZVV0aWxzLmpzJztcbmltcG9ydCB7Y29weU9iamVjdH0gZnJvbSAnLi4vdXRpbHMvb2JqZWN0cy5qcyc7XG5cbi8qKlxuICogQHR5cGUge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5UeXBlT2JqZWN0fVxuICovXG5jb25zdCBmdW5jdGlvblR5cGUgPSB7XG4gIG9wdGlvbjogWydmdW5jdGlvbiddLFxuICBzdHJpbmdSZWdleDogL15mdW5jdGlvblxcKCguKilcXCk6ICguKikkL3UsXG4gIC8vIFRvZG86IEZpeCBhbGwgdGhlIGZvbGxvd2luZyBtZXRob2RzIHVwIHRvIGBlZGl0VUlgIHRvIHdvcmsgd2l0aCBjaGlsZHJlblxuICB0b1ZhbHVlIChzKSB7XG4gICAgcmV0dXJuIHt2YWx1ZTogcy5zbGljZSg4LCAtMSl9O1xuICB9LFxuICBnZXRJbnB1dCAoe3Jvb3R9KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7SFRNTFRleHRBcmVhRWxlbWVudH0gKi8gKCRlKHJvb3QsICdpbnB1dCcpKTtcbiAgfSxcbiAgc2V0VmFsdWUgKHtyb290LCB2YWx1ZX0pIHtcbiAgICB0aGlzLmdldElucHV0KHtyb290fSkudmFsdWUgPSB2YWx1ZTtcbiAgfSxcbiAgZ2V0VmFsdWUgKHtyb290fSkge1xuICAgIHJldHVybiB0aGlzLmdldElucHV0KHtyb290fSkudmFsdWU7XG4gIH0sXG4gIHZpZXdVSSAoe3ZhbHVlfSkge1xuICAgIHJldHVybiBbJ3NwYW4nLCB7ZGF0YXNldDoge3R5cGU6ICdmdW5jdGlvbid9fSwgW3ZhbHVlXV07XG4gIH0sXG4gIGVkaXRVSSAoe1xuICAgIGZvcm1hdCwgdHlwZSwgYnVpbGRUeXBlQ2hvaWNlcywgc3BlY2lmaWNTY2hlbWFPYmplY3QsXG4gICAgdG9wUm9vdCwgc2NoZW1hQ29udGVudCwgdHlwZU5hbWVzcGFjZVxuICB9KSB7XG4gICAgLy8gVG9kbzogQ291bGQgbWFrZSBhIGZ1bmN0aW9uIGluc3RhbmNlIHJlc3VsdCB0eXBlIHdoaWNoIGJ1aWxkcyBhIEZ1bmN0aW9uXG4gICAgLy8gICAgICAgIGxpa2UgYG5ldyBGdW5jdGlvbignYXJnMScsICdyZXR1cm4gIWFyZzEnKTtgIHRoaXMganVzdCBidWlsZHMgYVxuICAgIC8vICAgICAgICBzcGVjaWZpYyBmdW5jdGlvbiBzY2hlbWEgaW5zdGFuY2UsIGFuZCBjYW4ndCBoYXZlIGEgbWVhbmluZ2Z1bFxuICAgIC8vICAgICAgICBgZ2V0VmFsdWVgLCBldGMuOyBhZGQgdG8gZGVtbyB3aXRoIHRlc3RzOyBjb3VsZCBhbHNvIGFkZCB0b1xuICAgIC8vICAgICAgICB1c2Ugd2l0aCBgUHJvbWlzZWAgc28gdGhhdCBjb3VsZCBhbHNvIGJ1aWxkIGEgbWVhbmluZ2Z1bFxuICAgIC8vICAgICAgICBpbXBsZW1lbnRhdGlvblxuXG4gICAgLy8gV2Ugd2FudCB0byBhbGxvdyBvdmVycmlkaW5nIGl0cyBkZXNjcmlwdGlvbnNcbiAgICBjb25zdCBzcGVjaWZpY1NjaGVtYU9iaiA9IGNvcHlPYmplY3Qoc3BlY2lmaWNTY2hlbWFPYmplY3QpO1xuICAgIGNvbnN0IGFyZ3NUdXBsZSA9IC8qKiBAdHlwZSB7aW1wb3J0KCd6b2RleCcpLlN6RnVuY3Rpb248YW55LCBhbnk+fSAqLyAoXG4gICAgICBzcGVjaWZpY1NjaGVtYU9ialxuICAgICk/LmFyZ3MgPz8ge3R5cGU6ICd0dXBsZScsIGl0ZW1zOiBbXSwgcmVzdDoge3R5cGU6ICdhbnknfX07XG4gICAgYXJnc1R1cGxlLmRlc2NyaXB0aW9uID0gJyc7XG4gICAgLy8gVGhpcyBgZGVzY3JpcHRpb25gIG5vdCBpbiB1c2UsIGJ1dCBjb3VsZCBzdXBwb3J0XG4gICAgYXJnc1R1cGxlLnJlc3QuZGVzY3JpcHRpb24gPSAnQXJndW1lbnQnO1xuXG4gICAgcmV0dXJuIFsnZGl2Jywge2RhdGFzZXQ6IHt0eXBlOiAnZnVuY3Rpb24nfX0sIFtcbiAgICAgIFsnYicsIFsnQXJndW1lbnRzJ11dLFxuICAgICAgWydiciddLFxuICAgICAgLi4uKC8qKiBAdHlwZSB7aW1wb3J0KCcuLi90eXBlQ2hvaWNlcy5qcycpLkJ1aWxkVHlwZUNob2ljZXN9ICovIChcbiAgICAgICAgYnVpbGRUeXBlQ2hvaWNlc1xuICAgICAgKSh7XG4gICAgICAgIC8vIHJlc3VsdFR5cGUsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBvYmplY3Qtc2hvcnRoYW5kIC0tIFRTXG4gICAgICAgIHRvcFJvb3Q6IC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovICh0b3BSb290KSxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG9iamVjdC1zaG9ydGhhbmQgLS0gVFNcbiAgICAgICAgZm9ybWF0OiAvKiogQHR5cGUge2ltcG9ydCgnLi4vZm9ybWF0cy5qcycpLkF2YWlsYWJsZUZvcm1hdH0gKi8gKGZvcm1hdCksXG4gICAgICAgIHNjaGVtYU9yaWdpbmFsOiBzY2hlbWFDb250ZW50LFxuICAgICAgICBzY2hlbWFDb250ZW50OiBhcmdzVHVwbGUsXG4gICAgICAgIC8vIHNjaGVtYVN0YXRlLFxuICAgICAgICBzdGF0ZTogdHlwZSxcbiAgICAgICAgLy8gaXRlbUluZGV4LFxuICAgICAgICB0eXBlTmFtZXNwYWNlXG4gICAgICB9KS5kb21BcnJheSksXG4gICAgICBbJ2InLCBbJ1JldHVybnMnXV0sXG4gICAgICBbJ2JyJ10sXG4gICAgICAuLi4oLyoqIEB0eXBlIHtpbXBvcnQoJy4uL3R5cGVDaG9pY2VzLmpzJykuQnVpbGRUeXBlQ2hvaWNlc30gKi8gKFxuICAgICAgICBidWlsZFR5cGVDaG9pY2VzXG4gICAgICApKHtcbiAgICAgICAgLy8gcmVzdWx0VHlwZSxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG9iamVjdC1zaG9ydGhhbmQgLS0gVFNcbiAgICAgICAgdG9wUm9vdDogLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi8gKHRvcFJvb3QpLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb2JqZWN0LXNob3J0aGFuZCAtLSBUU1xuICAgICAgICBmb3JtYXQ6IC8qKiBAdHlwZSB7aW1wb3J0KCcuLi9mb3JtYXRzLmpzJykuQXZhaWxhYmxlRm9ybWF0fSAqLyAoZm9ybWF0KSxcbiAgICAgICAgc2NoZW1hT3JpZ2luYWw6IHNjaGVtYUNvbnRlbnQsXG4gICAgICAgIHNjaGVtYUNvbnRlbnQ6IC8qKiBAdHlwZSB7aW1wb3J0KCd6b2RleCcpLlN6RnVuY3Rpb248YW55LCBhbnk+fSAqLyAoXG4gICAgICAgICAgc3BlY2lmaWNTY2hlbWFPYmpcbiAgICAgICAgKT8ucmV0dXJucyA/PyB7dHlwZTogJ2FueSd9LFxuICAgICAgICAvLyBzY2hlbWFTdGF0ZSxcbiAgICAgICAgc3RhdGU6IHR5cGUsXG4gICAgICAgIC8vIGl0ZW1JbmRleCxcbiAgICAgICAgdHlwZU5hbWVzcGFjZVxuICAgICAgfSkuZG9tQXJyYXkpXG4gICAgXV07XG4gIH1cbn07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