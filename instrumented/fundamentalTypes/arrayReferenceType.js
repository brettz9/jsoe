function cov_qg2ca7sty(){var path="/Users/brett/jsoe/src/fundamentalTypes/arrayReferenceType.js";var hash="d11cc2dd0e7abf0cc682feaea0e51b0e379021fb";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/fundamentalTypes/arrayReferenceType.js",statementMap:{"0":{start:{line:10,column:27},end:{line:216,column:1}},"1":{start:{line:17,column:55},end:{line:17,column:59}},"2":{start:{line:18,column:17},end:{line:18,column:55}},"3":{start:{line:19,column:4},end:{line:19,column:59}},"4":{start:{line:20,column:4},end:{line:20,column:27}},"5":{start:{line:23,column:17},end:{line:23,column:22}},"6":{start:{line:24,column:4},end:{line:31,column:5}},"7":{start:{line:25,column:6},end:{line:30,column:9}},"8":{start:{line:26,column:8},end:{line:26,column:34}},"9":{start:{line:27,column:8},end:{line:29,column:9}},"10":{start:{line:28,column:10},end:{line:28,column:38}},"11":{start:{line:32,column:4},end:{line:32,column:18}},"12":{start:{line:43,column:4},end:{line:43,column:63}},"13":{start:{line:46,column:4},end:{line:46,column:40}},"14":{start:{line:49,column:25},end:{line:49,column:52}},"15":{start:{line:52,column:4},end:{line:63,column:5}},"16":{start:{line:53,column:6},end:{line:55,column:7}},"17":{start:{line:54,column:8},end:{line:54,column:28}},"18":{start:{line:56,column:6},end:{line:61,column:8}},"19":{start:{line:62,column:6},end:{line:62,column:40}},"20":{start:{line:64,column:4},end:{line:64,column:30}},"21":{start:{line:67,column:19},end:{line:67,column:23}},"22":{start:{line:68,column:18},end:{line:68,column:39}},"23":{start:{line:69,column:17},end:{line:69,column:28}},"24":{start:{line:75,column:27},end:{line:77,column:5}},"25":{start:{line:76,column:6},end:{line:76,column:37}},"26":{start:{line:79,column:4},end:{line:83,column:5}},"27":{start:{line:80,column:6},end:{line:82,column:8}},"28":{start:{line:84,column:4},end:{line:89,column:5}},"29":{start:{line:85,column:6},end:{line:88,column:8}},"30":{start:{line:91,column:19},end:{line:93,column:10}},"31":{start:{line:94,column:28},end:{line:102,column:5}},"32":{start:{line:95,column:6},end:{line:101,column:8}},"33":{start:{line:104,column:4},end:{line:143,column:5}},"34":{start:{line:105,column:6},end:{line:142,column:7}},"35":{start:{line:110,column:24},end:{line:114,column:9}},"36":{start:{line:115,column:36},end:{line:119,column:9}},"37":{start:{line:116,column:22},end:{line:118,column:11}},"38":{start:{line:120,column:31},end:{line:120,column:68}},"39":{start:{line:121,column:8},end:{line:124,column:9}},"40":{start:{line:122,column:10},end:{line:122,column:51}},"41":{start:{line:123,column:10},end:{line:123,column:22}},"42":{start:{line:125,column:8},end:{line:128,column:11}},"43":{start:{line:129,column:8},end:{line:132,column:9}},"44":{start:{line:130,column:10},end:{line:130,column:43}},"45":{start:{line:131,column:10},end:{line:131,column:22}},"46":{start:{line:134,column:8},end:{line:138,column:9}},"47":{start:{line:135,column:10},end:{line:136,column:37}},"48":{start:{line:137,column:10},end:{line:137,column:22}},"49":{start:{line:139,column:8},end:{line:139,column:21}},"50":{start:{line:141,column:8},end:{line:141,column:39}},"51":{start:{line:157,column:25},end:{line:157,column:55}},"52":{start:{line:158,column:70},end:{line:167,column:15}},"53":{start:{line:169,column:4},end:{line:174,column:5}},"54":{start:{line:170,column:6},end:{line:173,column:8}},"55":{start:{line:175,column:4},end:{line:177,column:6}},"56":{start:{line:181,column:6},end:{line:181,column:29}},"57":{start:{line:183,column:4},end:{line:190,column:7}},"58":{start:{line:184,column:6},end:{line:189,column:9}},"59":{start:{line:193,column:4},end:{line:195,column:38}},"60":{start:{line:201,column:19},end:{line:201,column:23}},"61":{start:{line:202,column:4},end:{line:214,column:7}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:2},end:{line:14,column:3}},loc:{start:{line:14,column:20},end:{line:21,column:3}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:2},end:{line:22,column:3}},loc:{start:{line:22,column:33},end:{line:33,column:3}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:25,column:40},end:{line:25,column:41}},loc:{start:{line:25,column:54},end:{line:30,column:7}},line:25},"3":{name:"(anonymous_3)",decl:{start:{line:42,column:2},end:{line:42,column:3}},loc:{start:{line:42,column:20},end:{line:44,column:3}},line:42},"4":{name:"(anonymous_4)",decl:{start:{line:45,column:2},end:{line:45,column:3}},loc:{start:{line:45,column:27},end:{line:47,column:3}},line:45},"5":{name:"(anonymous_5)",decl:{start:{line:48,column:2},end:{line:48,column:3}},loc:{start:{line:48,column:43},end:{line:65,column:3}},line:48},"6":{name:"(anonymous_6)",decl:{start:{line:66,column:2},end:{line:66,column:3}},loc:{start:{line:66,column:29},end:{line:178,column:3}},line:66},"7":{name:"(anonymous_7)",decl:{start:{line:75,column:27},end:{line:75,column:28}},loc:{start:{line:75,column:40},end:{line:77,column:5}},line:75},"8":{name:"(anonymous_8)",decl:{start:{line:94,column:28},end:{line:94,column:29}},loc:{start:{line:94,column:34},end:{line:102,column:5}},line:94},"9":{name:"(anonymous_9)",decl:{start:{line:105,column:41},end:{line:105,column:42}},loc:{start:{line:105,column:58},end:{line:140,column:7}},line:105},"10":{name:"(anonymous_10)",decl:{start:{line:116,column:10},end:{line:116,column:11}},loc:{start:{line:116,column:22},end:{line:118,column:11}},line:116},"11":{name:"(anonymous_11)",decl:{start:{line:179,column:2},end:{line:179,column:3}},loc:{start:{line:179,column:33},end:{line:191,column:3}},line:179},"12":{name:"(anonymous_12)",decl:{start:{line:183,column:53},end:{line:183,column:54}},loc:{start:{line:183,column:63},end:{line:190,column:5}},line:183},"13":{name:"(anonymous_13)",decl:{start:{line:192,column:2},end:{line:192,column:3}},loc:{start:{line:192,column:19},end:{line:196,column:3}},line:192},"14":{name:"(anonymous_14)",decl:{start:{line:200,column:2},end:{line:200,column:3}},loc:{start:{line:200,column:55},end:{line:215,column:3}},line:200}},branchMap:{"0":{loc:{start:{line:24,column:4},end:{line:31,column:5}},type:"if",locations:[{start:{line:24,column:4},end:{line:31,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:24},"1":{loc:{start:{line:27,column:8},end:{line:29,column:9}},type:"if",locations:[{start:{line:27,column:8},end:{line:29,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:27},"2":{loc:{start:{line:52,column:4},end:{line:63,column:5}},type:"if",locations:[{start:{line:52,column:4},end:{line:63,column:5}}],line:52},"3":{loc:{start:{line:53,column:6},end:{line:55,column:7}},type:"if",locations:[{start:{line:53,column:6},end:{line:55,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:53},"4":{loc:{start:{line:79,column:4},end:{line:83,column:5}},type:"if",locations:[{start:{line:79,column:4},end:{line:83,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:79},"5":{loc:{start:{line:84,column:4},end:{line:89,column:5}},type:"if",locations:[{start:{line:84,column:4},end:{line:89,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:84},"6":{loc:{start:{line:91,column:19},end:{line:93,column:10}},type:"binary-expr",locations:[{start:{line:91,column:19},end:{line:91,column:26}}],line:91},"7":{loc:{start:{line:104,column:4},end:{line:143,column:5}},type:"if",locations:[{start:{line:104,column:4},end:{line:143,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:104},"8":{loc:{start:{line:105,column:6},end:{line:142,column:7}},type:"if",locations:[{start:{line:105,column:6},end:{line:142,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:105},"9":{loc:{start:{line:121,column:8},end:{line:124,column:9}},type:"if",locations:[{start:{line:121,column:8},end:{line:124,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:121},"10":{loc:{start:{line:129,column:8},end:{line:132,column:9}},type:"if",locations:[{start:{line:129,column:8},end:{line:132,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:129},"11":{loc:{start:{line:134,column:8},end:{line:138,column:9}},type:"if",locations:[{start:{line:134,column:8},end:{line:138,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:134},"12":{loc:{start:{line:158,column:70},end:{line:167,column:15}},type:"cond-expr",locations:[{start:{line:163,column:8},end:{line:163,column:15}},{start:{line:164,column:9},end:{line:167,column:14}}],line:158},"13":{loc:{start:{line:164,column:9},end:{line:167,column:14}},type:"cond-expr",locations:[{start:{line:165,column:10},end:{line:165,column:18}},{start:{line:167,column:10},end:{line:167,column:14}}],line:164},"14":{loc:{start:{line:169,column:4},end:{line:174,column:5}},type:"if",locations:[{start:{line:169,column:4},end:{line:174,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:169},"15":{loc:{start:{line:200,column:26},end:{line:200,column:36}},type:"default-arg",locations:[{start:{line:200,column:34},end:{line:200,column:36}}],line:200}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},b:{"0":[0,0],"1":[0,0],"2":[0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d11cc2dd0e7abf0cc682feaea0e51b0e379021fb"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_qg2ca7sty=function(){return actualCoverage;};}return actualCoverage;}cov_qg2ca7sty();import Types,{getPropertyValueFromLegend}from'../types.js';import{$e,$$e,DOM}from'../utils/templateUtils.js';import{getJSONPointerParts}from'../utils/jsonPointer.js';/**
 * @type {import('../types.js').TypeObject & {type: "array"}}
 */const arrayReferenceType=(cov_qg2ca7sty().s[0]++,{option:['Array reference'],type:'array',stringRegex:/^arrayRef\((?:|\/[^)]*)\)$/u,toValue(s,info){cov_qg2ca7sty().f[0]++;const{rootHolder,parent,parentPath}=(/** @type {import('../types.js').RootInfo} */cov_qg2ca7sty().s[1]++,info);const path=(cov_qg2ca7sty().s[2]++,s.slice(`${this.type}Ref(`.length,-1));cov_qg2ca7sty().s[3]++;rootHolder.push([this.type,parent,parentPath,path]);cov_qg2ca7sty().s[4]++;return{assign:false};},resolveReference(path,value){cov_qg2ca7sty().f[1]++;let parent=(cov_qg2ca7sty().s[5]++,value);cov_qg2ca7sty().s[6]++;if(path!==''){cov_qg2ca7sty().b[0][0]++;cov_qg2ca7sty().s[7]++;getJSONPointerParts(path).forEach(pathPart=>{cov_qg2ca7sty().f[2]++;cov_qg2ca7sty().s[8]++;parent=parent[pathPart];cov_qg2ca7sty().s[9]++;if(!parent){cov_qg2ca7sty().b[1][0]++;cov_qg2ca7sty().s[10]++;throw new Error('Bad path');}else{cov_qg2ca7sty().b[1][1]++;}});}else{cov_qg2ca7sty().b[0][1]++;}cov_qg2ca7sty().s[11]++;return parent;},stateDependent:{structuredCloning:{// after: 'sparseArrays',
after:'arrayNonindexKeys',contexts:['arrayNonindexKeys','object','set']// contexts: ['sparseArrays', 'object']
}},getInput({root}){cov_qg2ca7sty().f[3]++;cov_qg2ca7sty().s[12]++;return/** @type {HTMLInputElement} */$e(root,'input');},setValue({root,value}){cov_qg2ca7sty().f[4]++;cov_qg2ca7sty().s[13]++;this.getInput({root}).value=value;},getValue({root,stateObj,currentPath}){cov_qg2ca7sty().f[5]++;const referentPath=(cov_qg2ca7sty().s[14]++,this.getInput({root}).value);// eslint-disable-next-line @stylistic/max-len -- Long
/* istanbul ignore else -- ArrayRef will not be a root, so should have stateObj */cov_qg2ca7sty().s[15]++;if(stateObj){cov_qg2ca7sty().b[2][0]++;cov_qg2ca7sty().s[16]++;if(!stateObj.paths){cov_qg2ca7sty().b[3][0]++;cov_qg2ca7sty().s[17]++;stateObj.paths={};}else{cov_qg2ca7sty().b[3][1]++;}cov_qg2ca7sty().s[18]++;stateObj.paths[(/** @type {string} */currentPath)]={referentPath,// Todo (low): Should be utilized along with
//   other validation checking
expectArrayReferent:this.type==='array'};cov_qg2ca7sty().s[19]++;stateObj.handlingReference=true;}else{}cov_qg2ca7sty().s[20]++;console.log(referentPath);},validate({root,topRoot}){cov_qg2ca7sty().f[6]++;const{type}=(cov_qg2ca7sty().s[21]++,this);const input=(cov_qg2ca7sty().s[22]++,this.getInput({root}));const path=(cov_qg2ca7sty().s[23]++,input.value);/**
     * @param {string|undefined} message
     * @returns {{valid: false, message: string|undefined}}
     */cov_qg2ca7sty().s[24]++;const invalidMessage=message=>{cov_qg2ca7sty().f[7]++;cov_qg2ca7sty().s[25]++;return{valid:false,message};};cov_qg2ca7sty().s[26]++;if(input.validity.patternMismatch){cov_qg2ca7sty().b[4][0]++;cov_qg2ca7sty().s[27]++;return invalidMessage('You must use a path beginning with "/" (or the empty string)');}else{cov_qg2ca7sty().b[4][1]++;}cov_qg2ca7sty().s[28]++;if(/~([^01]|$)/u.test(path)){cov_qg2ca7sty().b[5][0]++;cov_qg2ca7sty().s[29]++;return invalidMessage('You must use a valid JSON Pointer (with '+'tildes followed by 0 or 1)');}else{cov_qg2ca7sty().b[5][1]++;}let referent=(cov_qg2ca7sty().s[30]++,(cov_qg2ca7sty().b[6][0]++,topRoot)||/* istanbul ignore next -- Should always exist? */root);cov_qg2ca7sty().s[31]++;const isObjectOrArray=()=>{cov_qg2ca7sty().f[8]++;cov_qg2ca7sty().s[32]++;return['array','object','arrayNonindexKeys'// 'sparseArrays'
].includes(Types.getTypeForRoot(referent));};let message;cov_qg2ca7sty().s[33]++;if(path!==''){cov_qg2ca7sty().b[7][0]++;cov_qg2ca7sty().s[34]++;// If empty string, referent will be topRoot
if(getJSONPointerParts(path).some((pathPart,i)=>{cov_qg2ca7sty().f[9]++;// Todo (low): We should also support `arrayReference` and
//    `objectReference`, but will need to resolve and bear
//    in mind that references may need to be added out of
//    order)
const legends=(cov_qg2ca7sty().s[35]++,DOM.filterChildElements(// Ensure we are only getting one array level at a time
/** @type {HTMLElement} */$e(referent,'.arrayItems'),['fieldset','legend']));const childPropertyValues=(cov_qg2ca7sty().s[36]++,legends.map(legend=>{cov_qg2ca7sty().f[10]++;cov_qg2ca7sty().s[37]++;return getPropertyValueFromLegend(/** @type {HTMLLegendElement} */legend);}));const partMatchIndex=(cov_qg2ca7sty().s[38]++,childPropertyValues.indexOf(pathPart));cov_qg2ca7sty().s[39]++;if(partMatchIndex===-1){cov_qg2ca7sty().b[9][0]++;cov_qg2ca7sty().s[40]++;message="Specified path doesn't exist";cov_qg2ca7sty().s[41]++;return true;}else{cov_qg2ca7sty().b[9][1]++;}cov_qg2ca7sty().s[42]++;referent=/** @type {HTMLDivElement} */$e(/** @type {HTMLElement} */legends[partMatchIndex].parentElement,'div[data-type]');cov_qg2ca7sty().s[43]++;if(referent===root){cov_qg2ca7sty().b[10][0]++;cov_qg2ca7sty().s[44]++;message="Can't reference self";cov_qg2ca7sty().s[45]++;return true;}else{cov_qg2ca7sty().b[10][1]++;}// Condition that path isn't an object/array
cov_qg2ca7sty().s[46]++;if(!isObjectOrArray()){cov_qg2ca7sty().b[11][0]++;cov_qg2ca7sty().s[47]++;message=`Referent portion (at segment ${i}) is `+`not an object or array`;cov_qg2ca7sty().s[48]++;return true;}else{cov_qg2ca7sty().b[11][1]++;}cov_qg2ca7sty().s[49]++;return false;})){cov_qg2ca7sty().b[8][0]++;cov_qg2ca7sty().s[50]++;return invalidMessage(message);}else{cov_qg2ca7sty().b[8][1]++;}}else{cov_qg2ca7sty().b[7][1]++;}// Root can only be an object or array unless it is itself
// else if (!isObjectOrArray()) {
//   return invalidMessage('Referent is not an object or array');
// }
// UI prevents array/object references at root
// Condition to forbid path to self
// if (referent === root) {
//   return invalidMessage("Can't reference self");
// }
// Condition to confirm that referenced element is an array or
//    object (or reference) with the designated `type`
const referentType=(cov_qg2ca7sty().s[51]++,Types.getTypeForRoot(referent));const referentBaseType=(/** @type {(string|null|undefined)[]} */cov_qg2ca7sty().s[52]++,['array','arrayNonindexKeys'// 'sparseArrays'
].includes(referentType)?(cov_qg2ca7sty().b[12][0]++,'array'):(cov_qg2ca7sty().b[12][1]++,referentType==='object'?(cov_qg2ca7sty().b[13][0]++,'object'/* istanbul ignore next -- Bad ref should have been caught earlier */):(cov_qg2ca7sty().b[13][1]++,null)));cov_qg2ca7sty().s[53]++;if(referentBaseType!==type){cov_qg2ca7sty().b[14][0]++;cov_qg2ca7sty().s[54]++;return invalidMessage('Reference must match expected reference type '+'(array or object)');}else{cov_qg2ca7sty().b[14][1]++;}cov_qg2ca7sty().s[55]++;return{valid:true};},validateAll({types,topRoot}){cov_qg2ca7sty().f[11]++;const type=(/** @type {import('../types.js').AvailableType} */cov_qg2ca7sty().s[56]++,`${this.type}Reference`);cov_qg2ca7sty().s[57]++;$$e(topRoot,`div[data-type="${type}"]`).forEach(root=>{cov_qg2ca7sty().f[12]++;cov_qg2ca7sty().s[58]++;types.validate({type,// eslint-disable-next-line object-shorthand -- TS
root:(/** @type {HTMLDivElement} */root),topRoot});});},viewUI({value}){cov_qg2ca7sty().f[13]++;cov_qg2ca7sty().s[59]++;return['i',{dataset:{type:`${this.type}Reference`}},[`${this.type}Ref(${value})`]];},// Note: The `value` here must not be the object itself (the
//    circular object/array) as the `value` usually should be,
//    but instead the array/object path
editUI({typeNamespace,value=(cov_qg2ca7sty().b[15][0]++,'')/* , topRoot */}){cov_qg2ca7sty().f[14]++;const{type}=(cov_qg2ca7sty().s[60]++,this);cov_qg2ca7sty().s[61]++;return['div',{dataset:{type:`${type}Reference`}},[['label',[`JSON Pointer path to ${type} (leave blank for path to root) `,['input',{name:`${typeNamespace}-${type}Reference`,type:'text',pattern:'^(|/.*)$',value}]]]// Todo (low): Add button to enable mode (supporting
//    scrolling) for clicking on desired referent element
]];}});export default arrayReferenceType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,