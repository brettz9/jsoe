function cov_2i9f9gddfq(){var path="/Users/brett/jsoe/src/formats/structuredCloning.js";var hash="2fd98cda2ae3953896d77c4c77ffa15289f3f798";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/formats/structuredCloning.js",statementMap:{"0":{start:{line:14,column:45},end:{line:20,column:2}},"1":{start:{line:17,column:2},end:{line:19,column:38}},"2":{start:{line:46,column:28},end:{line:323,column:1}},"3":{start:{line:51,column:6},end:{line:51,column:14}},"4":{start:{line:53,column:73},end:{line:53,column:77}},"5":{start:{line:61,column:18},end:{line:61,column:20}},"6":{start:{line:66,column:24},end:{line:66,column:26}},"7":{start:{line:69,column:19},end:{line:69,column:21}},"8":{start:{line:71,column:2},end:{line:322,column:4}},"9":{start:{line:83,column:8},end:{line:83,column:19}},"10":{start:{line:84,column:4},end:{line:86,column:5}},"11":{start:{line:85,column:6},end:{line:85,column:13}},"12":{start:{line:87,column:4},end:{line:89,column:5}},"13":{start:{line:88,column:6},end:{line:88,column:13}},"14":{start:{line:90,column:4},end:{line:92,column:5}},"15":{start:{line:91,column:6},end:{line:91,column:13}},"16":{start:{line:93,column:4},end:{line:95,column:5}},"17":{start:{line:94,column:6},end:{line:94,column:13}},"18":{start:{line:96,column:4},end:{line:100,column:5}},"19":{start:{line:99,column:6},end:{line:99,column:13}},"20":{start:{line:104,column:4},end:{line:106,column:5}},"21":{start:{line:105,column:6},end:{line:105,column:13}},"22":{start:{line:109,column:4},end:{line:111,column:5}},"23":{start:{line:115,column:19},end:{line:115,column:24}},"24":{start:{line:118,column:18},end:{line:121,column:15}},"25":{start:{line:123,column:15},end:{line:123,column:39}},"26":{start:{line:125,column:6},end:{line:125,column:53}},"27":{start:{line:126,column:23},end:{line:126,column:60}},"28":{start:{line:129,column:4},end:{line:170,column:5}},"29":{start:{line:130,column:6},end:{line:130,column:57}},"30":{start:{line:131,column:6},end:{line:131,column:72}},"31":{start:{line:132,column:6},end:{line:141,column:9}},"32":{start:{line:148,column:6},end:{line:169,column:7}},"33":{start:{line:149,column:8},end:{line:164,column:11}},"34":{start:{line:166,column:8},end:{line:166,column:38}},"35":{start:{line:167,column:8},end:{line:167,column:52}},"36":{start:{line:168,column:8},end:{line:168,column:15}},"37":{start:{line:172,column:24},end:{line:176,column:23}},"38":{start:{line:180,column:20},end:{line:181,column:62}},"39":{start:{line:182,column:4},end:{line:184,column:5}},"40":{start:{line:183,column:6},end:{line:183,column:29}},"41":{start:{line:186,column:4},end:{line:188,column:5}},"42":{start:{line:187,column:6},end:{line:187,column:39}},"43":{start:{line:194,column:4},end:{line:232,column:5}},"44":{start:{line:196,column:6},end:{line:210,column:9}},"45":{start:{line:211,column:6},end:{line:214,column:27}},"46":{start:{line:216,column:6},end:{line:218,column:7}},"47":{start:{line:217,column:8},end:{line:217,column:35}},"48":{start:{line:223,column:6},end:{line:230,column:7}},"49":{start:{line:224,column:37},end:{line:229,column:11}},"50":{start:{line:225,column:10},end:{line:228,column:31}},"51":{start:{line:231,column:6},end:{line:231,column:13}},"52":{start:{line:233,column:4},end:{line:235,column:5}},"53":{start:{line:234,column:6},end:{line:234,column:38}},"54":{start:{line:240,column:4},end:{line:321,column:7}},"55":{start:{line:241,column:17},end:{line:241,column:36}},"56":{start:{line:250,column:6},end:{line:252,column:7}},"57":{start:{line:251,column:8},end:{line:251,column:15}},"58":{start:{line:256,column:6},end:{line:266,column:7}},"59":{start:{line:257,column:8},end:{line:260,column:9}},"60":{start:{line:259,column:10},end:{line:259,column:22}},"61":{start:{line:261,column:30},end:{line:261,column:54}},"62":{start:{line:262,column:8},end:{line:263,column:66}},"63":{start:{line:265,column:8},end:{line:265,column:15}},"64":{start:{line:270,column:19},end:{line:277,column:8}},"65":{start:{line:280,column:6},end:{line:282,column:7}},"66":{start:{line:284,column:6},end:{line:299,column:7}},"67":{start:{line:285,column:8},end:{line:290,column:11}},"68":{start:{line:291,column:8},end:{line:298,column:11}},"69":{start:{line:301,column:6},end:{line:320,column:7}},"70":{start:{line:302,column:8},end:{line:307,column:12}},"71":{start:{line:312,column:8},end:{line:319,column:9}},"72":{start:{line:313,column:39},end:{line:318,column:13}},"73":{start:{line:314,column:12},end:{line:317,column:22}},"74":{start:{line:331,column:21},end:{line:335,column:1}},"75":{start:{line:332,column:2},end:{line:334,column:5}},"76":{start:{line:333,column:4},end:{line:333,column:76}},"77":{start:{line:362,column:46},end:{line:460,column:1}},"78":{start:{line:366,column:15},end:{line:366,column:49}},"79":{start:{line:367,column:72},end:{line:367,column:76}},"80":{start:{line:368,column:25},end:{line:370,column:10}},"81":{start:{line:372,column:2},end:{line:374,column:3}},"82":{start:{line:387,column:20},end:{line:393,column:3}},"83":{start:{line:389,column:6},end:{line:389,column:26}},"84":{start:{line:391,column:4},end:{line:391,column:32}},"85":{start:{line:392,column:4},end:{line:392,column:14}},"86":{start:{line:395,column:2},end:{line:418,column:3}},"87":{start:{line:398,column:4},end:{line:404,column:7}},"88":{start:{line:405,column:4},end:{line:417,column:5}},"89":{start:{line:406,column:6},end:{line:408,column:7}},"90":{start:{line:407,column:8},end:{line:407,column:37}},"91":{start:{line:409,column:6},end:{line:409,column:27}},"92":{start:{line:410,column:6},end:{line:416,column:7}},"93":{start:{line:411,column:8},end:{line:415,column:10}},"94":{start:{line:420,column:2},end:{line:439,column:5}},"95":{start:{line:423,column:8},end:{line:423,column:42}},"96":{start:{line:427,column:8},end:{line:427,column:15}},"97":{start:{line:428,column:4},end:{line:436,column:5}},"98":{start:{line:434,column:6},end:{line:434,column:26}},"99":{start:{line:435,column:6},end:{line:435,column:18}},"100":{start:{line:438,column:4},end:{line:438,column:17}},"101":{start:{line:441,column:2},end:{line:455,column:3}},"102":{start:{line:444,column:4},end:{line:450,column:7}},"103":{start:{line:445,column:6},end:{line:448,column:7}},"104":{start:{line:446,column:8},end:{line:446,column:28}},"105":{start:{line:447,column:8},end:{line:447,column:20}},"106":{start:{line:449,column:6},end:{line:449,column:19}},"107":{start:{line:451,column:4},end:{line:454,column:5}},"108":{start:{line:452,column:6},end:{line:452,column:76}},"109":{start:{line:453,column:6},end:{line:453,column:32}},"110":{start:{line:456,column:2},end:{line:459,column:4}},"111":{start:{line:463,column:26},end:{line:601,column:1}},"112":{start:{line:466,column:4},end:{line:468,column:5}},"113":{start:{line:471,column:4},end:{line:504,column:7}},"114":{start:{line:472,column:37},end:{line:484,column:7}},"115":{start:{line:474,column:10},end:{line:482,column:13}},"116":{start:{line:481,column:12},end:{line:481,column:52}},"117":{start:{line:485,column:6},end:{line:490,column:8}},"118":{start:{line:491,column:22},end:{line:493,column:41}},"119":{start:{line:494,column:6},end:{line:494,column:35}},"120":{start:{line:497,column:6},end:{line:503,column:7}},"121":{start:{line:498,column:8},end:{line:498,column:31}},"122":{start:{line:500,column:8},end:{line:502,column:11}},"123":{start:{line:507,column:4},end:{line:520,column:5}},"124":{start:{line:508,column:29},end:{line:510,column:10}},"125":{start:{line:511,column:26},end:{line:511,column:74}},"126":{start:{line:512,column:6},end:{line:515,column:9}},"127":{start:{line:513,column:29},end:{line:513,column:58}},"128":{start:{line:514,column:8},end:{line:514,column:57}},"129":{start:{line:516,column:6},end:{line:519,column:8}},"130":{start:{line:524,column:4},end:{line:529,column:5}},"131":{start:{line:525,column:6},end:{line:528,column:8}},"132":{start:{line:530,column:4},end:{line:535,column:5}},"133":{start:{line:531,column:6},end:{line:534,column:8}},"134":{start:{line:536,column:4},end:{line:539,column:6}},"135":{start:{line:555,column:22},end:{line:555,column:34}},"136":{start:{line:556,column:4},end:{line:564,column:7}},"137":{start:{line:565,column:4},end:{line:599,column:6}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:49},end:{line:16,column:50}},loc:{start:{line:16,column:56},end:{line:20,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:46,column:28},end:{line:46,column:29}},loc:{start:{line:46,column:42},end:{line:323,column:1}},line:46},"2":{name:"(anonymous_2)",decl:{start:{line:71,column:9},end:{line:71,column:10}},loc:{start:{line:71,column:26},end:{line:322,column:3}},line:71},"3":{name:"(anonymous_3)",decl:{start:{line:224,column:56},end:{line:224,column:57}},loc:{start:{line:224,column:66},end:{line:229,column:9}},line:224},"4":{name:"(anonymous_4)",decl:{start:{line:240,column:15},end:{line:240,column:16}},loc:{start:{line:240,column:21},end:{line:321,column:5}},line:240},"5":{name:"(anonymous_5)",decl:{start:{line:256,column:36},end:{line:256,column:37}},loc:{start:{line:256,column:49},end:{line:264,column:7}},line:256},"6":{name:"(anonymous_6)",decl:{start:{line:313,column:58},end:{line:313,column:59}},loc:{start:{line:313,column:68},end:{line:318,column:11}},line:313},"7":{name:"(anonymous_7)",decl:{start:{line:331,column:21},end:{line:331,column:22}},loc:{start:{line:331,column:52},end:{line:335,column:1}},line:331},"8":{name:"(anonymous_8)",decl:{start:{line:332,column:23},end:{line:332,column:24}},loc:{start:{line:332,column:58},end:{line:334,column:3}},line:332},"9":{name:"(anonymous_9)",decl:{start:{line:362,column:46},end:{line:362,column:47}},loc:{start:{line:365,column:5},end:{line:460,column:1}},line:365},"10":{name:"(anonymous_10)",decl:{start:{line:387,column:20},end:{line:387,column:21}},loc:{start:{line:387,column:36},end:{line:393,column:3}},line:387},"11":{name:"(anonymous_11)",decl:{start:{line:420,column:22},end:{line:420,column:23}},loc:{start:{line:420,column:41},end:{line:439,column:3}},line:420},"12":{name:"(anonymous_12)",decl:{start:{line:444,column:24},end:{line:444,column:25}},loc:{start:{line:444,column:43},end:{line:450,column:5}},line:444},"13":{name:"(anonymous_13)",decl:{start:{line:464,column:2},end:{line:464,column:3}},loc:{start:{line:464,column:30},end:{line:505,column:3}},line:464},"14":{name:"(anonymous_14)",decl:{start:{line:471,column:23},end:{line:471,column:24}},loc:{start:{line:471,column:44},end:{line:504,column:5}},line:471},"15":{name:"(anonymous_15)",decl:{start:{line:473,column:8},end:{line:473,column:9}},loc:{start:{line:473,column:25},end:{line:483,column:9}},line:473},"16":{name:"(anonymous_16)",decl:{start:{line:480,column:17},end:{line:480,column:18}},loc:{start:{line:480,column:27},end:{line:482,column:11}},line:480},"17":{name:"(anonymous_17)",decl:{start:{line:506,column:2},end:{line:506,column:3}},loc:{start:{line:506,column:44},end:{line:553,column:3}},line:506},"18":{name:"(anonymous_18)",decl:{start:{line:512,column:26},end:{line:512,column:27}},loc:{start:{line:512,column:45},end:{line:515,column:7}},line:512},"19":{name:"(anonymous_19)",decl:{start:{line:554,column:2},end:{line:554,column:3}},loc:{start:{line:554,column:11},end:{line:600,column:3}},line:554}},branchMap:{"0":{loc:{start:{line:17,column:9},end:{line:19,column:37}},type:"binary-expr",locations:[{start:{line:17,column:9},end:{line:17,column:10}},{start:{line:17,column:14},end:{line:17,column:35}},{start:{line:17,column:39},end:{line:17,column:56}},{start:{line:19,column:10},end:{line:19,column:37}}],line:17},"1":{loc:{start:{line:84,column:4},end:{line:86,column:5}},type:"if",locations:[{start:{line:84,column:4},end:{line:86,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:84},"2":{loc:{start:{line:87,column:4},end:{line:89,column:5}},type:"if",locations:[{start:{line:87,column:4},end:{line:89,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:87},"3":{loc:{start:{line:87,column:8},end:{line:87,column:66}},type:"binary-expr",locations:[{start:{line:87,column:8},end:{line:87,column:29}},{start:{line:87,column:33},end:{line:87,column:66}}],line:87},"4":{loc:{start:{line:90,column:4},end:{line:92,column:5}},type:"if",locations:[{start:{line:90,column:4},end:{line:92,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:90},"5":{loc:{start:{line:90,column:8},end:{line:90,column:72}},type:"binary-expr",locations:[{start:{line:90,column:8},end:{line:90,column:29}},{start:{line:90,column:34},end:{line:90,column:48}},{start:{line:90,column:52},end:{line:90,column:71}}],line:90},"6":{loc:{start:{line:93,column:4},end:{line:95,column:5}},type:"if",locations:[{start:{line:93,column:4},end:{line:95,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:93},"7":{loc:{start:{line:93,column:8},end:{line:93,column:37}},type:"binary-expr",locations:[{start:{line:93,column:8},end:{line:93,column:20}},{start:{line:93,column:24},end:{line:93,column:37}}],line:93},"8":{loc:{start:{line:96,column:4},end:{line:100,column:5}},type:"if",locations:[{start:{line:96,column:4},end:{line:100,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:96},"9":{loc:{start:{line:96,column:8},end:{line:98,column:5}},type:"binary-expr",locations:[{start:{line:96,column:8},end:{line:96,column:30}},{start:{line:97,column:6},end:{line:97,column:25}},{start:{line:97,column:29},end:{line:97,column:56}},{start:{line:97,column:60},end:{line:97,column:80}}],line:96},"10":{loc:{start:{line:104,column:4},end:{line:106,column:5}},type:"if",locations:[{start:{line:104,column:4},end:{line:106,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:104},"11":{loc:{start:{line:104,column:8},end:{line:104,column:56}},type:"binary-expr",locations:[{start:{line:104,column:8},end:{line:104,column:29}},{start:{line:104,column:33},end:{line:104,column:56}}],line:104},"12":{loc:{start:{line:109,column:4},end:{line:111,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:109},"13":{loc:{start:{line:118,column:18},end:{line:121,column:15}},type:"cond-expr",locations:[{start:{line:119,column:8},end:{line:119,column:27}},{start:{line:121,column:8},end:{line:121,column:15}}],line:118},"14":{loc:{start:{line:126,column:23},end:{line:126,column:60}},type:"cond-expr",locations:[{start:{line:126,column:35},end:{line:126,column:37}},{start:{line:126,column:40},end:{line:126,column:60}}],line:126},"15":{loc:{start:{line:129,column:4},end:{line:170,column:5}},type:"if",locations:[{start:{line:129,column:4},end:{line:170,column:5}},{start:{line:142,column:11},end:{line:170,column:5}}],line:129},"16":{loc:{start:{line:131,column:16},end:{line:131,column:71}},type:"cond-expr",locations:[{start:{line:131,column:35},end:{line:131,column:51}},{start:{line:131,column:54},end:{line:131,column:71}}],line:131},"17":{loc:{start:{line:180,column:20},end:{line:181,column:62}},type:"binary-expr",locations:[{start:{line:180,column:20},end:{line:180,column:34}},{start:{line:181,column:6},end:{line:181,column:62}}],line:180},"18":{loc:{start:{line:182,column:4},end:{line:184,column:5}},type:"if",locations:[{start:{line:182,column:4},end:{line:184,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:182},"19":{loc:{start:{line:186,column:4},end:{line:188,column:5}},type:"if",locations:[{start:{line:186,column:4},end:{line:188,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:186},"20":{loc:{start:{line:194,column:4},end:{line:232,column:5}},type:"if",locations:[{start:{line:194,column:4},end:{line:232,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:194},"21":{loc:{start:{line:204,column:23},end:{line:204,column:46}},type:"binary-expr",locations:[{start:{line:204,column:23},end:{line:204,column:29}},{start:{line:204,column:33},end:{line:204,column:46}}],line:204},"22":{loc:{start:{line:216,column:6},end:{line:218,column:7}},type:"if",locations:[{start:{line:216,column:6},end:{line:218,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:216},"23":{loc:{start:{line:223,column:6},end:{line:230,column:7}},type:"if",locations:[{start:{line:223,column:6},end:{line:230,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:223},"24":{loc:{start:{line:233,column:4},end:{line:235,column:5}},type:"if",locations:[{start:{line:233,column:4},end:{line:235,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:233},"25":{loc:{start:{line:250,column:6},end:{line:252,column:7}},type:"if",locations:[{start:{line:250,column:6},end:{line:252,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:250},"26":{loc:{start:{line:250,column:10},end:{line:250,column:50}},type:"binary-expr",locations:[{start:{line:250,column:10},end:{line:250,column:13}},{start:{line:250,column:17},end:{line:250,column:50}}],line:250},"27":{loc:{start:{line:256,column:6},end:{line:266,column:7}},type:"if",locations:[{start:{line:256,column:6},end:{line:266,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:256},"28":{loc:{start:{line:256,column:10},end:{line:264,column:8}},type:"binary-expr",locations:[{start:{line:256,column:10},end:{line:256,column:18}},{start:{line:256,column:22},end:{line:264,column:8}}],line:256},"29":{loc:{start:{line:257,column:8},end:{line:260,column:9}},type:"if",locations:[{start:{line:257,column:8},end:{line:260,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:257},"30":{loc:{start:{line:257,column:12},end:{line:258,column:54}},type:"binary-expr",locations:[{start:{line:257,column:12},end:{line:257,column:31}},{start:{line:258,column:11},end:{line:258,column:25}},{start:{line:258,column:29},end:{line:258,column:53}}],line:257},"31":{loc:{start:{line:262,column:16},end:{line:263,column:64}},type:"binary-expr",locations:[{start:{line:262,column:16},end:{line:262,column:29}},{start:{line:262,column:33},end:{line:262,column:47}},{start:{line:263,column:10},end:{line:263,column:64}}],line:262},"32":{loc:{start:{line:276,column:23},end:{line:276,column:46}},type:"binary-expr",locations:[{start:{line:276,column:23},end:{line:276,column:29}},{start:{line:276,column:33},end:{line:276,column:46}}],line:276},"33":{loc:{start:{line:280,column:6},end:{line:282,column:7}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:280},"34":{loc:{start:{line:284,column:6},end:{line:299,column:7}},type:"if",locations:[{start:{line:284,column:6},end:{line:299,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:284},"35":{loc:{start:{line:301,column:6},end:{line:320,column:7}},type:"if",locations:[{start:{line:301,column:6},end:{line:320,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:301},"36":{loc:{start:{line:312,column:8},end:{line:319,column:9}},type:"if",locations:[{start:{line:312,column:8},end:{line:319,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:312},"37":{loc:{start:{line:372,column:2},end:{line:374,column:3}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:372},"38":{loc:{start:{line:395,column:2},end:{line:418,column:3}},type:"if",locations:[{start:{line:395,column:2},end:{line:418,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:395},"39":{loc:{start:{line:405,column:4},end:{line:417,column:5}},type:"if",locations:[{start:{line:405,column:4},end:{line:417,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:405},"40":{loc:{start:{line:406,column:6},end:{line:408,column:7}},type:"if",locations:[{start:{line:406,column:6},end:{line:408,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:406},"41":{loc:{start:{line:406,column:10},end:{line:406,column:51}},type:"binary-expr",locations:[{start:{line:406,column:10},end:{line:406,column:21}},{start:{line:406,column:25},end:{line:406,column:51}}],line:406},"42":{loc:{start:{line:410,column:6},end:{line:416,column:7}},type:"if",locations:[{start:{line:410,column:6},end:{line:416,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:410},"43":{loc:{start:{line:428,column:4},end:{line:436,column:5}},type:"if",locations:[{start:{line:428,column:4},end:{line:436,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:428},"44":{loc:{start:{line:429,column:6},end:{line:432,column:50}},type:"binary-expr",locations:[{start:{line:429,column:7},end:{line:429,column:16}},{start:{line:429,column:20},end:{line:429,column:30}},{start:{line:431,column:8},end:{line:431,column:29}},{start:{line:431,column:33},end:{line:431,column:46}},{start:{line:432,column:7},end:{line:432,column:17}},{start:{line:432,column:21},end:{line:432,column:49}}],line:429},"45":{loc:{start:{line:441,column:2},end:{line:455,column:3}},type:"if",locations:[{start:{line:441,column:2},end:{line:455,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:441},"46":{loc:{start:{line:445,column:6},end:{line:448,column:7}},type:"if",locations:[{start:{line:445,column:6},end:{line:448,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:445},"47":{loc:{start:{line:451,column:4},end:{line:454,column:5}},type:"if",locations:[{start:{line:451,column:4},end:{line:454,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:451},"48":{loc:{start:{line:466,column:4},end:{line:468,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:466},"49":{loc:{start:{line:497,column:6},end:{line:503,column:7}},type:"if",locations:[{start:{line:497,column:6},end:{line:503,column:7}},{start:{line:499,column:13},end:{line:503,column:7}}],line:497},"50":{loc:{start:{line:507,column:4},end:{line:520,column:5}},type:"if",locations:[{start:{line:507,column:4},end:{line:520,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:507},"51":{loc:{start:{line:507,column:8},end:{line:507,column:65}},type:"binary-expr",locations:[{start:{line:507,column:8},end:{line:507,column:13}},{start:{line:507,column:17},end:{line:507,column:65}}],line:507},"52":{loc:{start:{line:508,column:29},end:{line:510,column:10}},type:"binary-expr",locations:[{start:{line:508,column:29},end:{line:508,column:74}}],line:508},"53":{loc:{start:{line:524,column:4},end:{line:529,column:5}},type:"if",locations:[{start:{line:524,column:4},end:{line:529,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:524},"54":{loc:{start:{line:530,column:4},end:{line:535,column:5}},type:"if",locations:[{start:{line:530,column:4},end:{line:535,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:530}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},b:{"0":[0,0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0],"31":[0,0,0],"32":[0,0],"33":[0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0,0,0,0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0],"53":[0,0],"54":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2fd98cda2ae3953896d77c4c77ffa15289f3f798"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2i9f9gddfq=function(){return actualCoverage;};}return actualCoverage;}cov_2i9f9gddfq();import{Typeson,unescapeKeyPathComponent,structuredCloningThrowing,resurrectable as noneditable,toStringTag}from'../vendor-imports.js';import{buildTypeChoices}from'../typeChoices.js';import{typesonPathToJSONPointer}from'../utils/jsonPointer.js';import json from'./json.js';// We modify resurrectable in hopes an including application doesn't need it
/** @type {import('typeson').TypeSpecSet} */cov_2i9f9gddfq().s[0]++;noneditable.resurrectable.test=/** @type {import('typeson').Tester} */x=>{cov_2i9f9gddfq().f[0]++;cov_2i9f9gddfq().s[1]++;return(cov_2i9f9gddfq().b[0][0]++,x)&&(cov_2i9f9gddfq().b[0][1]++,typeof x==='object')&&(cov_2i9f9gddfq().b[0][2]++,!Array.isArray(x))&&(cov_2i9f9gddfq().b[0][3]++,// Could be a user object with a string tag, but we can't tell
toStringTag(x)!=='Object');};/**
 * Delegates data-based UI building to method for adding child elements (a
 *   method which is housed in the array type object).
 * @typedef {(info: {
 *   propName: string,
 *   type: import('../types.js').AvailableType,
 *   value: import('../formats.js').StructuredCloneValue,
 *   bringIntoFocus?: boolean,
 *   setAValue?: boolean,
 *   schemaContent?: import('../formats/schema.js').ZodexSchema,
 *   mustBeOptional?: boolean
 * }) => HTMLElement|null} AddAndSetArrayElement
 */ /**
 * @typedef {import('typeson-registry').EncapsulateObserver} EncapsulateObserver
 */ /**
 * Obtains state-specific data and returns an observer that can build a UI based
 *   on data it receives.
 * @param {import('../types.js').StateObject} stateObj
 * @returns {EncapsulateObserver}
 */cov_2i9f9gddfq().s[2]++;const encapsulateObserver=stateObj=>{cov_2i9f9gddfq().f[1]++;const{typeNamespace,readonly,format:frmt,schemaContent,formats,types}=(cov_2i9f9gddfq().s[3]++,stateObj);const format=(/** @type {import('../formats.js').AvailableFormat} */cov_2i9f9gddfq().s[4]++,frmt);/**
   * Matches keypaths to the HTML UI Element.
   * @type {{[key: string]: HTMLElement & {
   *   $addAndSetArrayElement: AddAndSetArrayElement
   * }}}
   */const parents=(cov_2i9f9gddfq().s[5]++,{});/**
   * @type {{[key: string]: import('zodex').SzType|undefined}}
   */const schemaParents=(cov_2i9f9gddfq().s[6]++,{});/** @type {string[]} */const mapPaths=(cov_2i9f9gddfq().s[7]++,[]);cov_2i9f9gddfq().s[8]++;return observerObj=>{cov_2i9f9gddfq().f[2]++;const{type,cyclic,keypath,value,replaced,cyclicKeypath,endIterateIn,endIterateOwn,endIterateUnsetNumeric,clone}=(cov_2i9f9gddfq().s[9]++,observerObj);cov_2i9f9gddfq().s[10]++;if('replaced'in observerObj){cov_2i9f9gddfq().b[1][0]++;cov_2i9f9gddfq().s[11]++;return;}else{cov_2i9f9gddfq().b[1][1]++;}cov_2i9f9gddfq().s[12]++;if((cov_2i9f9gddfq().b[3][0]++,cyclic==='readonly')&&(cov_2i9f9gddfq().b[3][1]++,!Array.isArray(observerObj.value))){cov_2i9f9gddfq().b[2][0]++;cov_2i9f9gddfq().s[13]++;return;}else{cov_2i9f9gddfq().b[2][1]++;}cov_2i9f9gddfq().s[14]++;if((cov_2i9f9gddfq().b[5][0]++,cyclic==='readonly')&&((cov_2i9f9gddfq().b[5][1]++,type==='set')||(cov_2i9f9gddfq().b[5][2]++,type==='filelist'))){cov_2i9f9gddfq().b[4][0]++;cov_2i9f9gddfq().s[15]++;return;}else{cov_2i9f9gddfq().b[4][1]++;}cov_2i9f9gddfq().s[16]++;if((cov_2i9f9gddfq().b[7][0]++,endIterateIn)||(cov_2i9f9gddfq().b[7][1]++,endIterateOwn)){cov_2i9f9gddfq().b[6][0]++;cov_2i9f9gddfq().s[17]++;return;}else{cov_2i9f9gddfq().b[6][1]++;}cov_2i9f9gddfq().s[18]++;if((cov_2i9f9gddfq().b[9][0]++,endIterateUnsetNumeric)||(cov_2i9f9gddfq().b[9][1]++,clone===undefined)&&(cov_2i9f9gddfq().b[9][2]++,cyclicKeypath===undefined)&&(cov_2i9f9gddfq().b[9][3]++,Array.isArray(value))){cov_2i9f9gddfq().b[8][0]++;cov_2i9f9gddfq().s[19]++;return;}else{cov_2i9f9gddfq().b[8][1]++;}// What other situations is this firing twice, and it
//   shouldn't reach here?
cov_2i9f9gddfq().s[20]++;if((cov_2i9f9gddfq().b[11][0]++,observerObj.replacing)&&(cov_2i9f9gddfq().b[11][1]++,type==='negativeZero')){cov_2i9f9gddfq().b[10][0]++;cov_2i9f9gddfq().s[21]++;return;}else{cov_2i9f9gddfq().b[10][1]++;}/* istanbul ignore if -- Not part of format */cov_2i9f9gddfq().s[22]++;if(type==='sparseUndefined'){// We'll handle otherwise
return;}else{cov_2i9f9gddfq().b[12][0]++;}/** @type {import('../types.js').AvailableType} */let newType;let newValue=(cov_2i9f9gddfq().s[23]++,value);/* schema: || format.startsWith('schema-') */const state=(cov_2i9f9gddfq().s[24]++,format==='structuredCloning'?(cov_2i9f9gddfq().b[13][0]++,'arrayNonindexKeys'// ? 'sparseArrays'
):(cov_2i9f9gddfq().b[13][1]++,'array'));const li=(cov_2i9f9gddfq().s[25]++,keypath.lastIndexOf('.'));const arrayOrObjectPropertyName=(cov_2i9f9gddfq().s[26]++,unescapeKeyPathComponent(keypath.slice(li+1)));const parentPath=(cov_2i9f9gddfq().s[27]++,li===-1?(cov_2i9f9gddfq().b[14][0]++,''):(cov_2i9f9gddfq().b[14][1]++,keypath.slice(0,li)));let schema,mustBeOptional;cov_2i9f9gddfq().s[28]++;if(typeof cyclicKeypath==='string'){cov_2i9f9gddfq().b[15][0]++;cov_2i9f9gddfq().s[29]++;newValue=typesonPathToJSONPointer(cyclicKeypath);cov_2i9f9gddfq().s[30]++;newType=type==='array'?(cov_2i9f9gddfq().b[16][0]++,'arrayReference'):(cov_2i9f9gddfq().b[16][1]++,'objectReference');cov_2i9f9gddfq().s[31]++;({newType,schema,mustBeOptional}=canonicalTypeToAvailableTypeAndSchema(/** @type {import('../types.js').default} */types,/** @type {import('../formats.js').default} */formats,format,state,newType,value,arrayOrObjectPropertyName,schemaParents[parentPath],stateObj));// Todo (low): Add accurate state for second argument
}else{cov_2i9f9gddfq().b[15][1]++;cov_2i9f9gddfq().s[32]++;// console.log(
//   // keypath
//   'schemaParents', keypath, parentPath, value,
//   arrayOrObjectPropertyName, schemaParents[parentPath]
// );
try{cov_2i9f9gddfq().s[33]++;({newType,schema,mustBeOptional}=canonicalTypeToAvailableTypeAndSchema(/** @type {import('../types.js').default} */types,/** @type {import('../formats.js').default} */formats,format,state,/**
           * @type {import('../types.js').AvailableType}
           */type,value,arrayOrObjectPropertyName,schemaParents[parentPath],stateObj));// Todo (low): Add state for second argument
}catch(err){cov_2i9f9gddfq().s[34]++;console.log('err',type,err);cov_2i9f9gddfq().s[35]++;stateObj.error=/** @type {Error} */err;cov_2i9f9gddfq().s[36]++;return;}}const hasChildren=(cov_2i9f9gddfq().s[37]++,['array','object','set','map',// 'sparseArrays',
'arrayNonindexKeys'].includes(newType));// Maps are followed up by arrays which we don't want as such;
//  we track the paths to avoid reporting these child arrays
const mapType=(cov_2i9f9gddfq().s[38]++,(cov_2i9f9gddfq().b[17][0]++,type==='map')&&(cov_2i9f9gddfq().b[17][1]++,Object.prototype.toString.call(value)==='[object Map]'));cov_2i9f9gddfq().s[39]++;if(mapType){cov_2i9f9gddfq().b[18][0]++;cov_2i9f9gddfq().s[40]++;mapPaths.push(keypath);}else{cov_2i9f9gddfq().b[18][1]++;}cov_2i9f9gddfq().s[41]++;if(schema){cov_2i9f9gddfq().b[19][0]++;cov_2i9f9gddfq().s[42]++;stateObj.specificSchema=schema;}else{cov_2i9f9gddfq().b[19][1]++;}// console.log('is', stateObj.schemaContent);
// console.log('but could set to', schema);
// console.log('arrayOrObjectPropertyName', arrayOrObjectPropertyName);
cov_2i9f9gddfq().s[43]++;if(!stateObj.rootUI){cov_2i9f9gddfq().b[20][0]++;cov_2i9f9gddfq().s[44]++;// console.log('vvvv0', newType, newValue);
stateObj.rootUI=types?.getUIForModeAndType({readonly,typeNamespace,type:newType,bringIntoFocus:false,buildTypeChoices,format,specificSchemaObject:schema,schemaContent:(cov_2i9f9gddfq().b[21][0]++,schema)??(cov_2i9f9gddfq().b[21][1]++,schemaContent),value:newValue,hasValue:true,// Not currently in use but may be convenient for a
//     type wanting the serialized data
replaced});cov_2i9f9gddfq().s[45]++;parents['']=/**
      * @type {HTMLElement &
      *   {$addAndSetArrayElement: AddAndSetArrayElement}}
      */stateObj.rootUI;cov_2i9f9gddfq().s[46]++;if(schema){cov_2i9f9gddfq().b[22][0]++;cov_2i9f9gddfq().s[47]++;schemaParents['']=schema;}else{cov_2i9f9gddfq().b[22][1]++;}// Since we're skipping the array elements, we need to add the
//   map element to the array index where the array children
//   will be found (which we do want)
cov_2i9f9gddfq().s[48]++;if(mapType){cov_2i9f9gddfq().b[23][0]++;cov_2i9f9gddfq().s[49]++;/** @type {Map<any, any>} */[...value].forEach((_,i)=>{cov_2i9f9gddfq().f[3]++;cov_2i9f9gddfq().s[50]++;parents[i]=/**
          * @type {HTMLElement &
          *   {$addAndSetArrayElement: AddAndSetArrayElement}}
          */stateObj.rootUI;});}else{cov_2i9f9gddfq().b[23][1]++;}cov_2i9f9gddfq().s[51]++;return;}else{cov_2i9f9gddfq().b[20][1]++;}cov_2i9f9gddfq().s[52]++;if(schema){cov_2i9f9gddfq().b[24][0]++;cov_2i9f9gddfq().s[53]++;schemaParents[keypath]=schema;}else{cov_2i9f9gddfq().b[24][1]++;}// Todo (low): If could be async, use async encapsulate method
// Todo (low): Handle `awaitingTypesonPromise` with place-holder
// Todo (low): Handle `resolvingTypesonPromise` to replace place-holder
cov_2i9f9gddfq().s[54]++;setTimeout(()=>{cov_2i9f9gddfq().f[4]++;const ui=(cov_2i9f9gddfq().s[55]++,parents[parentPath]);// These errors occur, e.g., if `replacing` not first added and then
//   a converted object gets treated as the root UI (e.g., for `regexp`
//   or `blobHTML` at root)
// If there isn't a problem in Typeson with transmitting the `readonly`
//   status recursively down the object (should be no need to check
//   for circulars there?), could change Typeson to report `readonly`
//   for the nested items, in which case, we could block out `readonly`
//   instead of doing this here
cov_2i9f9gddfq().s[56]++;if((cov_2i9f9gddfq().b[26][0]++,!ui)||(cov_2i9f9gddfq().b[26][1]++,!('$addAndSetArrayElement'in ui))){cov_2i9f9gddfq().b[25][0]++;cov_2i9f9gddfq().s[57]++;return;}else{cov_2i9f9gddfq().b[25][1]++;}// Skip the array structures immediately following the Map,
//   as map needs to handle
cov_2i9f9gddfq().s[58]++;if((cov_2i9f9gddfq().b[28][0]++,!mapType)&&(cov_2i9f9gddfq().b[28][1]++,mapPaths.some(mapPath=>{cov_2i9f9gddfq().f[5]++;cov_2i9f9gddfq().s[59]++;if((cov_2i9f9gddfq().b[30][0]++,mapPath===keypath)||(cov_2i9f9gddfq().b[30][1]++,mapPath==='')&&(cov_2i9f9gddfq().b[30][2]++,/^\d+$/u.test(keypath))){cov_2i9f9gddfq().b[29][0]++;cov_2i9f9gddfq().s[60]++;return true;}else{cov_2i9f9gddfq().b[29][1]++;}const trailingIndex=(cov_2i9f9gddfq().s[61]++,keypath.match(/\.\d+$/u));cov_2i9f9gddfq().s[62]++;return(cov_2i9f9gddfq().b[31][0]++,trailingIndex)&&(cov_2i9f9gddfq().b[31][1]++,mapPath!=='')&&(cov_2i9f9gddfq().b[31][2]++,keypath.slice(0,-trailingIndex[0].length)===mapPath);}))){cov_2i9f9gddfq().b[27][0]++;cov_2i9f9gddfq().s[63]++;return;}else{cov_2i9f9gddfq().b[27][1]++;}// console.log('vvvv', newType, '::', newValue, '::', newValue?.cause);
const root=(cov_2i9f9gddfq().s[64]++,ui.$addAndSetArrayElement({mustBeOptional,propName:arrayOrObjectPropertyName,type:newType,value:newValue,bringIntoFocus:false,schemaContent:(cov_2i9f9gddfq().b[32][0]++,schema)??(cov_2i9f9gddfq().b[32][1]++,schemaContent)}));/* istanbul ignore if -- Guard for `null` return */cov_2i9f9gddfq().s[65]++;if(!root){return;}else{cov_2i9f9gddfq().b[33][0]++;}cov_2i9f9gddfq().s[66]++;if(!readonly){cov_2i9f9gddfq().b[34][0]++;cov_2i9f9gddfq().s[67]++;types?.setValue({type:newType,// eslint-disable-next-line object-shorthand -- TS
root:(/** @type {HTMLDivElement} */root),value:newValue});cov_2i9f9gddfq().s[68]++;types?.validate({type:newType,// eslint-disable-next-line object-shorthand -- TS
root:(/** @type {HTMLDivElement} */root),topRoot:(/** @type {HTMLDivElement} */stateObj.rootUI),// We don't want focus when values auto-added
avoidReport:true});}else{cov_2i9f9gddfq().b[34][1]++;}cov_2i9f9gddfq().s[69]++;if(hasChildren){cov_2i9f9gddfq().b[35][0]++;cov_2i9f9gddfq().s[70]++;parents[keypath]=/**
          * @type {HTMLElement &
          *   {$addAndSetArrayElement: AddAndSetArrayElement}}
          */root;// Since we're skipping the array elements, we need to add the
//   map element to the array index where the array children
//   will be found (which we do want)
cov_2i9f9gddfq().s[71]++;if(mapType){cov_2i9f9gddfq().b[36][0]++;cov_2i9f9gddfq().s[72]++;/** @type {Map<any, any>} */[...value].forEach((_,i)=>{cov_2i9f9gddfq().f[6]++;cov_2i9f9gddfq().s[73]++;parents[`${keypath}.${i}`]=/**
            * @type {HTMLElement &
            *   {$addAndSetArrayElement: AddAndSetArrayElement}}
            */root;});}else{cov_2i9f9gddfq().b[36][1]++;}}else{cov_2i9f9gddfq().b[35][1]++;}});};};/**
 * Performs replacements on a list of types.
 * @param {string[]} originTypes
 * @param {[originType: string, replacementType: string][]} replacements
 * @returns {void}
 */cov_2i9f9gddfq().s[74]++;const replaceTypes=(originTypes,replacements)=>{cov_2i9f9gddfq().f[7]++;cov_2i9f9gddfq().s[75]++;replacements.forEach(([originType,replacementType])=>{cov_2i9f9gddfq().f[8]++;cov_2i9f9gddfq().s[76]++;originTypes.splice(originTypes.indexOf(originType),1,replacementType);});};/**
 * Converts a (typeson structured cloning) type to a type name relevant for the
 *   format, state, value, and schema content, and may supply a child type if
 *   there is a match. Also returns relevant schema for the type.
 * @param {import('../types.js').default} types The Types object containing
 *   type-specific data.
 * @param {import('../formats.js').default} formats The Formats object
 *   containing format-specific data.
 * @param {import('../formats.js').AvailableFormat} format The current format.
 * @param {string} state The current state.
 * @param {import('../types.js').AvailableType} valType The value type being
 *   checked.
 * @param {import('../formats.js').StructuredCloneValue} v The value being
 *   checked.
 * @param {string} arrayOrObjectPropertyName
 * @param {import('zodex').SzType|undefined} parentSchema
 * @param {import('../types.js').StateObject} stateObj The schema content
 *   being checked.
 * @throws {Error} May throw if data found to be invalid.
 * @returns {{
 *   newType: import('../types.js').AvailableType,
 *   schema?: import('zodex').SzType|undefined,
 *   mustBeOptional?: boolean
 * }} Schema and type info.
 */cov_2i9f9gddfq().s[77]++;const canonicalTypeToAvailableTypeAndSchema=(types,formats,format,state,valType,v,arrayOrObjectPropertyName,parentSchema,stateObj)=>{cov_2i9f9gddfq().f[9]++;const frmt=(cov_2i9f9gddfq().s[78]++,formats.getAvailableFormat(format));const{getTypesAndSchemasForState,convertFromTypeson,testInvalid}=(cov_2i9f9gddfq().s[79]++,frmt);const allowableTypes=(cov_2i9f9gddfq().s[80]++,getTypesAndSchemasForState.call(frmt,types,state,stateObj.schemaContent)?.types);/* istanbul ignore if -- Guard */cov_2i9f9gddfq().s[81]++;if(!allowableTypes){throw new Error('Unexpected undefined type for state');}else{cov_2i9f9gddfq().b[37][0]++;}/**
   * @type {import('../types.js').AvailableType|undefined}
   */let ret;/**
   * Throws an error with information about the new value type.
   * @param {string} newValType The new value type being recorded.
   * @throws {Error} The invalid Error being thrown.
   * @returns {never} Always throws instead of returning.
   */cov_2i9f9gddfq().s[82]++;const isInvalid=newValType=>{cov_2i9f9gddfq().f[10]++;const err=(/** @type {Error & {newValType: string}} */cov_2i9f9gddfq().s[83]++,new Error('Invalid'));cov_2i9f9gddfq().s[84]++;err.newValType=newValType;cov_2i9f9gddfq().s[85]++;throw err;};let schema;cov_2i9f9gddfq().s[86]++;if(convertFromTypeson){cov_2i9f9gddfq().b[38][0]++;let newValType;let mustBeOptional;cov_2i9f9gddfq().s[87]++;({type:newValType,schema,mustBeOptional}=convertFromTypeson(valType,types,v,arrayOrObjectPropertyName,parentSchema,stateObj));cov_2i9f9gddfq().s[88]++;if(typeof newValType==='string'){cov_2i9f9gddfq().b[39][0]++;cov_2i9f9gddfq().s[89]++;if((cov_2i9f9gddfq().b[41][0]++,testInvalid)&&(cov_2i9f9gddfq().b[41][1]++,testInvalid(newValType,v))){cov_2i9f9gddfq().b[40][0]++;cov_2i9f9gddfq().s[90]++;return isInvalid(newValType);}else{cov_2i9f9gddfq().b[40][1]++;}cov_2i9f9gddfq().s[91]++;valType=newValType;cov_2i9f9gddfq().s[92]++;if(schema){cov_2i9f9gddfq().b[42][0]++;cov_2i9f9gddfq().s[93]++;return{newType:valType,schema,mustBeOptional};}else{cov_2i9f9gddfq().b[42][1]++;}}else{cov_2i9f9gddfq().b[39][1]++;}}else{cov_2i9f9gddfq().b[38][1]++;}cov_2i9f9gddfq().s[94]++;allowableTypes.some(allowableType=>{cov_2i9f9gddfq().f[11]++;const typeObj=(/** @type {import('../types.js').TypeObject & {childTypes: string[]}} */cov_2i9f9gddfq().s[95]++,types.getTypeObject(allowableType));const{valueMatch,superType,childTypes}=(cov_2i9f9gddfq().s[96]++,typeObj);cov_2i9f9gddfq().s[97]++;if((cov_2i9f9gddfq().b[44][0]++,superType)&&(cov_2i9f9gddfq().b[44][1]++,valueMatch)&&(cov_2i9f9gddfq().b[44][2]++,// Using, e.g., for `true` and `false` subtypes
superType===valType)&&(cov_2i9f9gddfq().b[44][3]++,valueMatch(v))||(cov_2i9f9gddfq().b[44][4]++,childTypes)&&(cov_2i9f9gddfq().b[44][5]++,childTypes.includes(valType))){cov_2i9f9gddfq().b[43][0]++;cov_2i9f9gddfq().s[98]++;ret=allowableType;cov_2i9f9gddfq().s[99]++;return true;}else{cov_2i9f9gddfq().b[43][1]++;}cov_2i9f9gddfq().s[100]++;return false;});cov_2i9f9gddfq().s[101]++;if(ret===undefined){cov_2i9f9gddfq().b[45][0]++;cov_2i9f9gddfq().s[102]++;// We run this separately from the `childTypes` check above
//    to ensure `childTypes` have priority regardless of position
allowableTypes.some(allowableType=>{cov_2i9f9gddfq().f[12]++;cov_2i9f9gddfq().s[103]++;if(allowableType===valType){cov_2i9f9gddfq().b[46][0]++;cov_2i9f9gddfq().s[104]++;ret=allowableType;cov_2i9f9gddfq().s[105]++;return true;}else{cov_2i9f9gddfq().b[46][1]++;}cov_2i9f9gddfq().s[106]++;return false;});cov_2i9f9gddfq().s[107]++;if(ret===undefined){cov_2i9f9gddfq().b[47][0]++;cov_2i9f9gddfq().s[108]++;console.log('AALLLowableTypes',state,allowableTypes,'::',valType);cov_2i9f9gddfq().s[109]++;return isInvalid(valType);}else{cov_2i9f9gddfq().b[47][1]++;}}else{cov_2i9f9gddfq().b[45][1]++;}cov_2i9f9gddfq().s[110]++;return{newType:ret,schema};};/** @type {import('../formats.js').Format} */const structuredCloning=(cov_2i9f9gddfq().s[111]++,{iterate(records,stateObj){cov_2i9f9gddfq().f[13]++;cov_2i9f9gddfq().s[112]++;/* istanbul ignore if -- Just a guard */if(!stateObj.format){stateObj.format='structuredCloning';}else{cov_2i9f9gddfq().b[48][0]++;}// Todo: Replace this with async typeson?
// eslint-disable-next-line promise/avoid-new -- Our own API for now
cov_2i9f9gddfq().s[113]++;return new Promise((resolve,reject)=>{cov_2i9f9gddfq().f[14]++;const structuredCloningFixed=(cov_2i9f9gddfq().s[114]++,structuredCloningThrowing.filter(typeSpecSet=>{cov_2i9f9gddfq().f[15]++;cov_2i9f9gddfq().s[115]++;return![// Not yet supported within JSOE
'imagedata','imagebitmap','cryptokey','domquad'].some(prop=>{cov_2i9f9gddfq().f[16]++;cov_2i9f9gddfq().s[116]++;return Object.hasOwn(typeSpecSet,prop);});}));cov_2i9f9gddfq().s[117]++;structuredCloningFixed.splice(// Add after userObjects
1,0,noneditable);const typeson=(cov_2i9f9gddfq().s[118]++,new Typeson({encapsulateObserver:encapsulateObserver(stateObj)}).register(structuredCloningFixed));cov_2i9f9gddfq().s[119]++;typeson.encapsulate(records);// Todo (low): We might want to run async encapsulate for
//   async types (and put this after Promise resolves)
cov_2i9f9gddfq().s[120]++;if(stateObj.error){cov_2i9f9gddfq().b[49][0]++;cov_2i9f9gddfq().s[121]++;reject(stateObj.error);}else{cov_2i9f9gddfq().b[49][1]++;cov_2i9f9gddfq().s[122]++;resolve(/** @type {Required<import('../types.js').StateObject>} */stateObj);}});},getTypesAndSchemasForState(types,state){cov_2i9f9gddfq().f[17]++;cov_2i9f9gddfq().s[123]++;if((cov_2i9f9gddfq().b[51][0]++,state)&&(cov_2i9f9gddfq().b[51][1]++,types.getContextInfo('structuredCloning',state))){cov_2i9f9gddfq().b[50][0]++;const typesForFormat=(cov_2i9f9gddfq().s[124]++,(cov_2i9f9gddfq().b[52][0]++,this.getTypesAndSchemasForState(types)?.types)||/* istanbul ignore next -- types should be an array */[]);const contextInfo=(cov_2i9f9gddfq().s[125]++,types.getContextInfo('structuredCloning',state));cov_2i9f9gddfq().s[126]++;contextInfo.forEach(({type,after})=>{cov_2i9f9gddfq().f[18]++;const precedingIdx=(cov_2i9f9gddfq().s[127]++,typesForFormat.indexOf(after));cov_2i9f9gddfq().s[128]++;typesForFormat.splice(precedingIdx+1,0,type);});cov_2i9f9gddfq().s[129]++;return{types:typesForFormat,schemaObjects:[]};}else{cov_2i9f9gddfq().b[50][1]++;}// Todo: Introduce new keys (to `Types.contexts`?) which could be used to
//         determine a delimited group of children (rather
//         than manual exception handling as we do here)
cov_2i9f9gddfq().s[130]++;if(state==='errorsArray'){cov_2i9f9gddfq().b[53][0]++;cov_2i9f9gddfq().s[131]++;return{types:['error','errors'],schemaObjects:[]};}else{cov_2i9f9gddfq().b[53][1]++;}cov_2i9f9gddfq().s[132]++;if(state==='filelistArray'){cov_2i9f9gddfq().b[54][0]++;cov_2i9f9gddfq().s[133]++;return{types:['file'],schemaObjects:[]};}else{cov_2i9f9gddfq().b[54][1]++;}cov_2i9f9gddfq().s[134]++;return{types:this.types(),schemaObjects:[]};/*
    // These have their children determined internally to array
    if (['map', 'set'].includes(state)) {return;}
    */ // These have their own internal numeric children instead
/*
    if (
      'int8array', 'uint8array', 'uint8clampedarray',
      'int16array', 'uint16array', 'int32array',
      'uint32array', 'float32array', 'float64array'
    ).includes(state)) {return;}
    */},types(){cov_2i9f9gddfq().f[19]++;const jsonTypes=(cov_2i9f9gddfq().s[135]++,json.types());cov_2i9f9gddfq().s[136]++;replaceTypes(jsonTypes,[['array',// We can rename to this instead of `arrayNonindexKeys` if we change
//  typeson-registry name
// 'sparseArrays',
'arrayNonindexKeys']]);cov_2i9f9gddfq().s[137]++;return[// This type is only for throwing upon cloning errors:
// 'checkDataCloneException'
// This type might be supported by evaluable JS or config passed in:
// 'userObject'
...jsonTypes,'undef',// Explicit undefined only
'bigint','bigintObject','SpecialNumber',// '`NaN`, `Infinity`, `-Infinity`, `-0`
'date','regexp','BooleanObject','NumberObject','StringObject','error','errors','blob','blobHTML','file','set','map','filelist','domexception','domrect','dompoint','dommatrix','buffersource','resurrectable'// Ok, but will need some work and/or decisions on how to present:
// 'cryptokey',
// 'domquad',
// 'imagedata', 'imagebitmap',
];}});export default structuredCloning;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,