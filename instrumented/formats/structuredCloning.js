function cov_2i9f9gddfq(){var path="/Users/brett/jsoe/src/formats/structuredCloning.js";var hash="93427fdd173f764ff55d23556671fe00fb5b6c0e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/formats/structuredCloning.js",statementMap:{"0":{start:{line:14,column:45},end:{line:20,column:2}},"1":{start:{line:17,column:2},end:{line:19,column:38}},"2":{start:{line:47,column:28},end:{line:342,column:1}},"3":{start:{line:52,column:6},end:{line:52,column:14}},"4":{start:{line:54,column:73},end:{line:54,column:77}},"5":{start:{line:62,column:18},end:{line:62,column:20}},"6":{start:{line:69,column:24},end:{line:69,column:26}},"7":{start:{line:72,column:19},end:{line:72,column:21}},"8":{start:{line:74,column:2},end:{line:341,column:4}},"9":{start:{line:86,column:8},end:{line:86,column:19}},"10":{start:{line:87,column:4},end:{line:89,column:5}},"11":{start:{line:88,column:6},end:{line:88,column:13}},"12":{start:{line:90,column:4},end:{line:92,column:5}},"13":{start:{line:91,column:6},end:{line:91,column:13}},"14":{start:{line:93,column:4},end:{line:95,column:5}},"15":{start:{line:94,column:6},end:{line:94,column:13}},"16":{start:{line:96,column:4},end:{line:98,column:5}},"17":{start:{line:97,column:6},end:{line:97,column:13}},"18":{start:{line:99,column:4},end:{line:103,column:5}},"19":{start:{line:102,column:6},end:{line:102,column:13}},"20":{start:{line:107,column:4},end:{line:109,column:5}},"21":{start:{line:108,column:6},end:{line:108,column:13}},"22":{start:{line:112,column:4},end:{line:114,column:5}},"23":{start:{line:118,column:19},end:{line:118,column:24}},"24":{start:{line:121,column:18},end:{line:124,column:15}},"25":{start:{line:126,column:15},end:{line:126,column:39}},"26":{start:{line:128,column:6},end:{line:128,column:53}},"27":{start:{line:129,column:23},end:{line:129,column:60}},"28":{start:{line:132,column:4},end:{line:179,column:5}},"29":{start:{line:133,column:6},end:{line:133,column:57}},"30":{start:{line:134,column:6},end:{line:134,column:72}},"31":{start:{line:135,column:6},end:{line:144,column:9}},"32":{start:{line:151,column:6},end:{line:178,column:7}},"33":{start:{line:155,column:8},end:{line:170,column:11}},"34":{start:{line:175,column:8},end:{line:175,column:38}},"35":{start:{line:176,column:8},end:{line:176,column:52}},"36":{start:{line:177,column:8},end:{line:177,column:15}},"37":{start:{line:181,column:24},end:{line:185,column:23}},"38":{start:{line:189,column:20},end:{line:190,column:62}},"39":{start:{line:191,column:4},end:{line:193,column:5}},"40":{start:{line:192,column:6},end:{line:192,column:29}},"41":{start:{line:195,column:4},end:{line:201,column:5}},"42":{start:{line:196,column:6},end:{line:196,column:39}},"43":{start:{line:197,column:6},end:{line:199,column:7}},"44":{start:{line:198,column:8},end:{line:198,column:38}},"45":{start:{line:200,column:6},end:{line:200,column:44}},"46":{start:{line:207,column:4},end:{line:245,column:5}},"47":{start:{line:209,column:6},end:{line:223,column:9}},"48":{start:{line:224,column:6},end:{line:227,column:27}},"49":{start:{line:229,column:6},end:{line:231,column:7}},"50":{start:{line:230,column:8},end:{line:230,column:48}},"51":{start:{line:236,column:6},end:{line:243,column:7}},"52":{start:{line:237,column:37},end:{line:242,column:11}},"53":{start:{line:238,column:10},end:{line:241,column:31}},"54":{start:{line:244,column:6},end:{line:244,column:13}},"55":{start:{line:247,column:4},end:{line:249,column:5}},"56":{start:{line:248,column:6},end:{line:248,column:51}},"57":{start:{line:258,column:4},end:{line:340,column:7}},"58":{start:{line:259,column:17},end:{line:259,column:36}},"59":{start:{line:268,column:6},end:{line:270,column:7}},"60":{start:{line:269,column:8},end:{line:269,column:15}},"61":{start:{line:274,column:6},end:{line:284,column:7}},"62":{start:{line:275,column:8},end:{line:278,column:9}},"63":{start:{line:277,column:10},end:{line:277,column:22}},"64":{start:{line:279,column:30},end:{line:279,column:54}},"65":{start:{line:280,column:8},end:{line:281,column:66}},"66":{start:{line:283,column:8},end:{line:283,column:15}},"67":{start:{line:288,column:19},end:{line:296,column:8}},"68":{start:{line:299,column:6},end:{line:301,column:7}},"69":{start:{line:303,column:6},end:{line:318,column:7}},"70":{start:{line:304,column:8},end:{line:309,column:11}},"71":{start:{line:310,column:8},end:{line:317,column:11}},"72":{start:{line:320,column:6},end:{line:339,column:7}},"73":{start:{line:321,column:8},end:{line:326,column:12}},"74":{start:{line:331,column:8},end:{line:338,column:9}},"75":{start:{line:332,column:39},end:{line:337,column:13}},"76":{start:{line:333,column:12},end:{line:336,column:22}},"77":{start:{line:350,column:21},end:{line:354,column:1}},"78":{start:{line:351,column:2},end:{line:353,column:5}},"79":{start:{line:352,column:4},end:{line:352,column:76}},"80":{start:{line:382,column:46},end:{line:483,column:1}},"81":{start:{line:386,column:15},end:{line:386,column:49}},"82":{start:{line:387,column:72},end:{line:387,column:76}},"83":{start:{line:388,column:25},end:{line:390,column:10}},"84":{start:{line:392,column:2},end:{line:394,column:3}},"85":{start:{line:407,column:20},end:{line:413,column:3}},"86":{start:{line:409,column:6},end:{line:409,column:26}},"87":{start:{line:411,column:4},end:{line:411,column:32}},"88":{start:{line:412,column:4},end:{line:412,column:14}},"89":{start:{line:415,column:2},end:{line:441,column:3}},"90":{start:{line:419,column:4},end:{line:426,column:7}},"91":{start:{line:427,column:4},end:{line:440,column:5}},"92":{start:{line:428,column:6},end:{line:430,column:7}},"93":{start:{line:429,column:8},end:{line:429,column:37}},"94":{start:{line:431,column:6},end:{line:431,column:27}},"95":{start:{line:432,column:6},end:{line:439,column:7}},"96":{start:{line:433,column:8},end:{line:438,column:10}},"97":{start:{line:443,column:2},end:{line:462,column:5}},"98":{start:{line:446,column:8},end:{line:446,column:42}},"99":{start:{line:450,column:8},end:{line:450,column:15}},"100":{start:{line:451,column:4},end:{line:459,column:5}},"101":{start:{line:457,column:6},end:{line:457,column:26}},"102":{start:{line:458,column:6},end:{line:458,column:18}},"103":{start:{line:461,column:4},end:{line:461,column:17}},"104":{start:{line:464,column:2},end:{line:478,column:3}},"105":{start:{line:467,column:4},end:{line:473,column:7}},"106":{start:{line:468,column:6},end:{line:471,column:7}},"107":{start:{line:469,column:8},end:{line:469,column:28}},"108":{start:{line:470,column:8},end:{line:470,column:20}},"109":{start:{line:472,column:6},end:{line:472,column:19}},"110":{start:{line:474,column:4},end:{line:477,column:5}},"111":{start:{line:475,column:6},end:{line:475,column:76}},"112":{start:{line:476,column:6},end:{line:476,column:32}},"113":{start:{line:479,column:2},end:{line:482,column:4}},"114":{start:{line:486,column:26},end:{line:622,column:1}},"115":{start:{line:489,column:4},end:{line:491,column:5}},"116":{start:{line:493,column:35},end:{line:505,column:5}},"117":{start:{line:495,column:8},end:{line:503,column:11}},"118":{start:{line:502,column:10},end:{line:502,column:50}},"119":{start:{line:506,column:4},end:{line:511,column:6}},"120":{start:{line:512,column:20},end:{line:514,column:39}},"121":{start:{line:516,column:4},end:{line:518,column:7}},"122":{start:{line:520,column:4},end:{line:522,column:5}},"123":{start:{line:521,column:6},end:{line:521,column:27}},"124":{start:{line:523,column:4},end:{line:525,column:7}},"125":{start:{line:528,column:4},end:{line:541,column:5}},"126":{start:{line:529,column:29},end:{line:531,column:10}},"127":{start:{line:532,column:26},end:{line:532,column:74}},"128":{start:{line:533,column:6},end:{line:536,column:9}},"129":{start:{line:534,column:29},end:{line:534,column:58}},"130":{start:{line:535,column:8},end:{line:535,column:57}},"131":{start:{line:537,column:6},end:{line:540,column:8}},"132":{start:{line:545,column:4},end:{line:550,column:5}},"133":{start:{line:546,column:6},end:{line:549,column:8}},"134":{start:{line:551,column:4},end:{line:556,column:5}},"135":{start:{line:552,column:6},end:{line:555,column:8}},"136":{start:{line:557,column:4},end:{line:560,column:6}},"137":{start:{line:576,column:22},end:{line:576,column:34}},"138":{start:{line:577,column:4},end:{line:585,column:7}},"139":{start:{line:586,column:4},end:{line:620,column:6}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:49},end:{line:16,column:50}},loc:{start:{line:16,column:56},end:{line:20,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:28},end:{line:47,column:29}},loc:{start:{line:47,column:42},end:{line:342,column:1}},line:47},"2":{name:"(anonymous_2)",decl:{start:{line:74,column:9},end:{line:74,column:10}},loc:{start:{line:74,column:26},end:{line:341,column:3}},line:74},"3":{name:"(anonymous_3)",decl:{start:{line:237,column:56},end:{line:237,column:57}},loc:{start:{line:237,column:66},end:{line:242,column:9}},line:237},"4":{name:"(anonymous_4)",decl:{start:{line:258,column:15},end:{line:258,column:16}},loc:{start:{line:258,column:21},end:{line:340,column:5}},line:258},"5":{name:"(anonymous_5)",decl:{start:{line:274,column:36},end:{line:274,column:37}},loc:{start:{line:274,column:49},end:{line:282,column:7}},line:274},"6":{name:"(anonymous_6)",decl:{start:{line:332,column:58},end:{line:332,column:59}},loc:{start:{line:332,column:68},end:{line:337,column:11}},line:332},"7":{name:"(anonymous_7)",decl:{start:{line:350,column:21},end:{line:350,column:22}},loc:{start:{line:350,column:52},end:{line:354,column:1}},line:350},"8":{name:"(anonymous_8)",decl:{start:{line:351,column:23},end:{line:351,column:24}},loc:{start:{line:351,column:58},end:{line:353,column:3}},line:351},"9":{name:"(anonymous_9)",decl:{start:{line:382,column:46},end:{line:382,column:47}},loc:{start:{line:385,column:5},end:{line:483,column:1}},line:385},"10":{name:"(anonymous_10)",decl:{start:{line:407,column:20},end:{line:407,column:21}},loc:{start:{line:407,column:36},end:{line:413,column:3}},line:407},"11":{name:"(anonymous_11)",decl:{start:{line:443,column:22},end:{line:443,column:23}},loc:{start:{line:443,column:41},end:{line:462,column:3}},line:443},"12":{name:"(anonymous_12)",decl:{start:{line:467,column:24},end:{line:467,column:25}},loc:{start:{line:467,column:43},end:{line:473,column:5}},line:467},"13":{name:"(anonymous_13)",decl:{start:{line:487,column:2},end:{line:487,column:3}},loc:{start:{line:487,column:36},end:{line:526,column:3}},line:487},"14":{name:"(anonymous_14)",decl:{start:{line:494,column:6},end:{line:494,column:7}},loc:{start:{line:494,column:23},end:{line:504,column:7}},line:494},"15":{name:"(anonymous_15)",decl:{start:{line:501,column:15},end:{line:501,column:16}},loc:{start:{line:501,column:25},end:{line:503,column:9}},line:501},"16":{name:"(anonymous_16)",decl:{start:{line:527,column:2},end:{line:527,column:3}},loc:{start:{line:527,column:44},end:{line:574,column:3}},line:527},"17":{name:"(anonymous_17)",decl:{start:{line:533,column:26},end:{line:533,column:27}},loc:{start:{line:533,column:45},end:{line:536,column:7}},line:533},"18":{name:"(anonymous_18)",decl:{start:{line:575,column:2},end:{line:575,column:3}},loc:{start:{line:575,column:11},end:{line:621,column:3}},line:575}},branchMap:{"0":{loc:{start:{line:17,column:9},end:{line:19,column:37}},type:"binary-expr",locations:[{start:{line:17,column:9},end:{line:17,column:10}},{start:{line:17,column:14},end:{line:17,column:35}},{start:{line:17,column:39},end:{line:17,column:56}},{start:{line:19,column:10},end:{line:19,column:37}}],line:17},"1":{loc:{start:{line:87,column:4},end:{line:89,column:5}},type:"if",locations:[{start:{line:87,column:4},end:{line:89,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:87},"2":{loc:{start:{line:90,column:4},end:{line:92,column:5}},type:"if",locations:[{start:{line:90,column:4},end:{line:92,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:90},"3":{loc:{start:{line:90,column:8},end:{line:90,column:66}},type:"binary-expr",locations:[{start:{line:90,column:8},end:{line:90,column:29}},{start:{line:90,column:33},end:{line:90,column:66}}],line:90},"4":{loc:{start:{line:93,column:4},end:{line:95,column:5}},type:"if",locations:[{start:{line:93,column:4},end:{line:95,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:93},"5":{loc:{start:{line:93,column:8},end:{line:93,column:72}},type:"binary-expr",locations:[{start:{line:93,column:8},end:{line:93,column:29}},{start:{line:93,column:34},end:{line:93,column:48}},{start:{line:93,column:52},end:{line:93,column:71}}],line:93},"6":{loc:{start:{line:96,column:4},end:{line:98,column:5}},type:"if",locations:[{start:{line:96,column:4},end:{line:98,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:96},"7":{loc:{start:{line:96,column:8},end:{line:96,column:37}},type:"binary-expr",locations:[{start:{line:96,column:8},end:{line:96,column:20}},{start:{line:96,column:24},end:{line:96,column:37}}],line:96},"8":{loc:{start:{line:99,column:4},end:{line:103,column:5}},type:"if",locations:[{start:{line:99,column:4},end:{line:103,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:99},"9":{loc:{start:{line:99,column:8},end:{line:101,column:5}},type:"binary-expr",locations:[{start:{line:99,column:8},end:{line:99,column:30}},{start:{line:100,column:6},end:{line:100,column:25}},{start:{line:100,column:29},end:{line:100,column:56}},{start:{line:100,column:60},end:{line:100,column:80}}],line:99},"10":{loc:{start:{line:107,column:4},end:{line:109,column:5}},type:"if",locations:[{start:{line:107,column:4},end:{line:109,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:107},"11":{loc:{start:{line:107,column:8},end:{line:107,column:56}},type:"binary-expr",locations:[{start:{line:107,column:8},end:{line:107,column:29}},{start:{line:107,column:33},end:{line:107,column:56}}],line:107},"12":{loc:{start:{line:112,column:4},end:{line:114,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:112},"13":{loc:{start:{line:121,column:18},end:{line:124,column:15}},type:"cond-expr",locations:[{start:{line:122,column:8},end:{line:122,column:27}},{start:{line:124,column:8},end:{line:124,column:15}}],line:121},"14":{loc:{start:{line:129,column:23},end:{line:129,column:60}},type:"cond-expr",locations:[{start:{line:129,column:35},end:{line:129,column:37}},{start:{line:129,column:40},end:{line:129,column:60}}],line:129},"15":{loc:{start:{line:132,column:4},end:{line:179,column:5}},type:"if",locations:[{start:{line:132,column:4},end:{line:179,column:5}},{start:{line:145,column:11},end:{line:179,column:5}}],line:132},"16":{loc:{start:{line:134,column:16},end:{line:134,column:71}},type:"cond-expr",locations:[{start:{line:134,column:35},end:{line:134,column:51}},{start:{line:134,column:54},end:{line:134,column:71}}],line:134},"17":{loc:{start:{line:189,column:20},end:{line:190,column:62}},type:"binary-expr",locations:[{start:{line:189,column:20},end:{line:189,column:34}},{start:{line:190,column:6},end:{line:190,column:62}}],line:189},"18":{loc:{start:{line:191,column:4},end:{line:193,column:5}},type:"if",locations:[{start:{line:191,column:4},end:{line:193,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:191},"19":{loc:{start:{line:195,column:4},end:{line:201,column:5}},type:"if",locations:[{start:{line:195,column:4},end:{line:201,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:195},"20":{loc:{start:{line:197,column:6},end:{line:199,column:7}},type:"if",locations:[{start:{line:197,column:6},end:{line:199,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:197},"21":{loc:{start:{line:207,column:4},end:{line:245,column:5}},type:"if",locations:[{start:{line:207,column:4},end:{line:245,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:207},"22":{loc:{start:{line:229,column:6},end:{line:231,column:7}},type:"if",locations:[{start:{line:229,column:6},end:{line:231,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:229},"23":{loc:{start:{line:236,column:6},end:{line:243,column:7}},type:"if",locations:[{start:{line:236,column:6},end:{line:243,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:236},"24":{loc:{start:{line:247,column:4},end:{line:249,column:5}},type:"if",locations:[{start:{line:247,column:4},end:{line:249,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:247},"25":{loc:{start:{line:268,column:6},end:{line:270,column:7}},type:"if",locations:[{start:{line:268,column:6},end:{line:270,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:268},"26":{loc:{start:{line:268,column:10},end:{line:268,column:50}},type:"binary-expr",locations:[{start:{line:268,column:10},end:{line:268,column:13}},{start:{line:268,column:17},end:{line:268,column:50}}],line:268},"27":{loc:{start:{line:274,column:6},end:{line:284,column:7}},type:"if",locations:[{start:{line:274,column:6},end:{line:284,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:274},"28":{loc:{start:{line:274,column:10},end:{line:282,column:8}},type:"binary-expr",locations:[{start:{line:274,column:10},end:{line:274,column:18}},{start:{line:274,column:22},end:{line:282,column:8}}],line:274},"29":{loc:{start:{line:275,column:8},end:{line:278,column:9}},type:"if",locations:[{start:{line:275,column:8},end:{line:278,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:275},"30":{loc:{start:{line:275,column:12},end:{line:276,column:54}},type:"binary-expr",locations:[{start:{line:275,column:12},end:{line:275,column:31}},{start:{line:276,column:11},end:{line:276,column:25}},{start:{line:276,column:29},end:{line:276,column:53}}],line:275},"31":{loc:{start:{line:280,column:16},end:{line:281,column:64}},type:"binary-expr",locations:[{start:{line:280,column:16},end:{line:280,column:29}},{start:{line:280,column:33},end:{line:280,column:47}},{start:{line:281,column:10},end:{line:281,column:64}}],line:280},"32":{loc:{start:{line:295,column:23},end:{line:295,column:46}},type:"binary-expr",locations:[{start:{line:295,column:23},end:{line:295,column:29}},{start:{line:295,column:33},end:{line:295,column:46}}],line:295},"33":{loc:{start:{line:299,column:6},end:{line:301,column:7}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:299},"34":{loc:{start:{line:303,column:6},end:{line:318,column:7}},type:"if",locations:[{start:{line:303,column:6},end:{line:318,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:303},"35":{loc:{start:{line:320,column:6},end:{line:339,column:7}},type:"if",locations:[{start:{line:320,column:6},end:{line:339,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:320},"36":{loc:{start:{line:331,column:8},end:{line:338,column:9}},type:"if",locations:[{start:{line:331,column:8},end:{line:338,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:331},"37":{loc:{start:{line:392,column:2},end:{line:394,column:3}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:392},"38":{loc:{start:{line:415,column:2},end:{line:441,column:3}},type:"if",locations:[{start:{line:415,column:2},end:{line:441,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:415},"39":{loc:{start:{line:427,column:4},end:{line:440,column:5}},type:"if",locations:[{start:{line:427,column:4},end:{line:440,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:427},"40":{loc:{start:{line:428,column:6},end:{line:430,column:7}},type:"if",locations:[{start:{line:428,column:6},end:{line:430,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:428},"41":{loc:{start:{line:428,column:10},end:{line:428,column:51}},type:"binary-expr",locations:[{start:{line:428,column:10},end:{line:428,column:21}},{start:{line:428,column:25},end:{line:428,column:51}}],line:428},"42":{loc:{start:{line:432,column:6},end:{line:439,column:7}},type:"if",locations:[{start:{line:432,column:6},end:{line:439,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:432},"43":{loc:{start:{line:451,column:4},end:{line:459,column:5}},type:"if",locations:[{start:{line:451,column:4},end:{line:459,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:451},"44":{loc:{start:{line:452,column:6},end:{line:455,column:50}},type:"binary-expr",locations:[{start:{line:452,column:7},end:{line:452,column:16}},{start:{line:452,column:20},end:{line:452,column:30}},{start:{line:454,column:8},end:{line:454,column:29}},{start:{line:454,column:33},end:{line:454,column:46}},{start:{line:455,column:7},end:{line:455,column:17}},{start:{line:455,column:21},end:{line:455,column:49}}],line:452},"45":{loc:{start:{line:464,column:2},end:{line:478,column:3}},type:"if",locations:[{start:{line:464,column:2},end:{line:478,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:464},"46":{loc:{start:{line:468,column:6},end:{line:471,column:7}},type:"if",locations:[{start:{line:468,column:6},end:{line:471,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:468},"47":{loc:{start:{line:474,column:4},end:{line:477,column:5}},type:"if",locations:[{start:{line:474,column:4},end:{line:477,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:474},"48":{loc:{start:{line:489,column:4},end:{line:491,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:489},"49":{loc:{start:{line:520,column:4},end:{line:522,column:5}},type:"if",locations:[{start:{line:520,column:4},end:{line:522,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:520},"50":{loc:{start:{line:528,column:4},end:{line:541,column:5}},type:"if",locations:[{start:{line:528,column:4},end:{line:541,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:528},"51":{loc:{start:{line:528,column:8},end:{line:528,column:65}},type:"binary-expr",locations:[{start:{line:528,column:8},end:{line:528,column:13}},{start:{line:528,column:17},end:{line:528,column:65}}],line:528},"52":{loc:{start:{line:529,column:29},end:{line:531,column:10}},type:"binary-expr",locations:[{start:{line:529,column:29},end:{line:529,column:74}}],line:529},"53":{loc:{start:{line:545,column:4},end:{line:550,column:5}},type:"if",locations:[{start:{line:545,column:4},end:{line:550,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:545},"54":{loc:{start:{line:551,column:4},end:{line:556,column:5}},type:"if",locations:[{start:{line:551,column:4},end:{line:556,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:551}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},b:{"0":[0,0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0],"31":[0,0,0],"32":[0,0],"33":[0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0,0,0,0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0],"53":[0,0],"54":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"93427fdd173f764ff55d23556671fe00fb5b6c0e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2i9f9gddfq=function(){return actualCoverage;};}return actualCoverage;}cov_2i9f9gddfq();import{Typeson,unescapeKeyPathComponent,structuredCloningThrowing,resurrectable as noneditable,toStringTag}from'../vendor-imports.js';import{buildTypeChoices}from'../typeChoices.js';import{typesonPathToJSONPointer}from'../utils/jsonPointer.js';import json from'./json.js';// We modify resurrectable in hopes an including application doesn't need it
/** @type {import('typeson').TypeSpecSet} */cov_2i9f9gddfq().s[0]++;noneditable.resurrectable.test=/** @type {import('typeson').Tester} */x=>{cov_2i9f9gddfq().f[0]++;cov_2i9f9gddfq().s[1]++;return(cov_2i9f9gddfq().b[0][0]++,x)&&(cov_2i9f9gddfq().b[0][1]++,typeof x==='object')&&(cov_2i9f9gddfq().b[0][2]++,!Array.isArray(x))&&(cov_2i9f9gddfq().b[0][3]++,// Could be a user object with a string tag, but we can't tell
toStringTag(x)!=='Object');};/**
 * Delegates data-based UI building to method for adding child elements (a
 *   method which is housed in the array type object).
 * @typedef {(info: {
 *   propName: string,
 *   type: import('../types.js').AvailableType,
 *   value: import('../formats.js').StructuredCloneValue,
 *   bringIntoFocus?: boolean,
 *   setAValue?: boolean,
 *   schemaContent?: import('../formats/schema.js').ZodexSchema,
 *   mustBeOptional?: boolean,
 *   schemaIdx?: number
 * }) => HTMLElement|null} AddAndSetArrayElement
 */ /**
 * @typedef {import('typeson-registry').EncapsulateObserver} EncapsulateObserver
 */ /**
 * Obtains state-specific data and returns an observer that can build a UI based
 *   on data it receives.
 * @param {import('../types.js').StateObject} stateObj
 * @returns {EncapsulateObserver}
 */cov_2i9f9gddfq().s[2]++;const encapsulateObserver=stateObj=>{cov_2i9f9gddfq().f[1]++;const{typeNamespace,readonly,format:frmt,schemaContent,formats,types}=(cov_2i9f9gddfq().s[3]++,stateObj);const format=(/** @type {import('../formats.js').AvailableFormat} */cov_2i9f9gddfq().s[4]++,frmt);/**
   * Matches keypaths to the HTML UI Element.
   * @type {{[key: string]: HTMLElement & {
   *   $addAndSetArrayElement: AddAndSetArrayElement
   * }}}
   */const parents=(cov_2i9f9gddfq().s[5]++,{});/**
   * @type {{
   *   [key: string]: [import('zodex').SzType, number|undefined]|undefined
   * }}
   */const schemaParents=(cov_2i9f9gddfq().s[6]++,{});/** @type {string[]} */const mapPaths=(cov_2i9f9gddfq().s[7]++,[]);cov_2i9f9gddfq().s[8]++;return observerObj=>{cov_2i9f9gddfq().f[2]++;const{type,cyclic,keypath,value,replaced,cyclicKeypath,endIterateIn,endIterateOwn,endIterateUnsetNumeric,clone}=(cov_2i9f9gddfq().s[9]++,observerObj);cov_2i9f9gddfq().s[10]++;if('replaced'in observerObj){cov_2i9f9gddfq().b[1][0]++;cov_2i9f9gddfq().s[11]++;return;}else{cov_2i9f9gddfq().b[1][1]++;}cov_2i9f9gddfq().s[12]++;if((cov_2i9f9gddfq().b[3][0]++,cyclic==='readonly')&&(cov_2i9f9gddfq().b[3][1]++,!Array.isArray(observerObj.value))){cov_2i9f9gddfq().b[2][0]++;cov_2i9f9gddfq().s[13]++;return;}else{cov_2i9f9gddfq().b[2][1]++;}cov_2i9f9gddfq().s[14]++;if((cov_2i9f9gddfq().b[5][0]++,cyclic==='readonly')&&((cov_2i9f9gddfq().b[5][1]++,type==='set')||(cov_2i9f9gddfq().b[5][2]++,type==='filelist'))){cov_2i9f9gddfq().b[4][0]++;cov_2i9f9gddfq().s[15]++;return;}else{cov_2i9f9gddfq().b[4][1]++;}cov_2i9f9gddfq().s[16]++;if((cov_2i9f9gddfq().b[7][0]++,endIterateIn)||(cov_2i9f9gddfq().b[7][1]++,endIterateOwn)){cov_2i9f9gddfq().b[6][0]++;cov_2i9f9gddfq().s[17]++;return;}else{cov_2i9f9gddfq().b[6][1]++;}cov_2i9f9gddfq().s[18]++;if((cov_2i9f9gddfq().b[9][0]++,endIterateUnsetNumeric)||(cov_2i9f9gddfq().b[9][1]++,clone===undefined)&&(cov_2i9f9gddfq().b[9][2]++,cyclicKeypath===undefined)&&(cov_2i9f9gddfq().b[9][3]++,Array.isArray(value))){cov_2i9f9gddfq().b[8][0]++;cov_2i9f9gddfq().s[19]++;return;}else{cov_2i9f9gddfq().b[8][1]++;}// What other situations is this firing twice, and it
//   shouldn't reach here?
cov_2i9f9gddfq().s[20]++;if((cov_2i9f9gddfq().b[11][0]++,observerObj.replacing)&&(cov_2i9f9gddfq().b[11][1]++,type==='negativeZero')){cov_2i9f9gddfq().b[10][0]++;cov_2i9f9gddfq().s[21]++;return;}else{cov_2i9f9gddfq().b[10][1]++;}/* istanbul ignore if -- Not part of format */cov_2i9f9gddfq().s[22]++;if(type==='sparseUndefined'){// We'll handle otherwise
return;}else{cov_2i9f9gddfq().b[12][0]++;}/** @type {import('../types.js').AvailableType} */let newType;let newValue=(cov_2i9f9gddfq().s[23]++,value);/* schema: || format.startsWith('schema-') */const state=(cov_2i9f9gddfq().s[24]++,format==='structuredCloning'?(cov_2i9f9gddfq().b[13][0]++,'arrayNonindexKeys'// ? 'sparseArrays'
):(cov_2i9f9gddfq().b[13][1]++,'array'));const li=(cov_2i9f9gddfq().s[25]++,keypath.lastIndexOf('.'));const arrayOrObjectPropertyName=(cov_2i9f9gddfq().s[26]++,unescapeKeyPathComponent(keypath.slice(li+1)));const parentPath=(cov_2i9f9gddfq().s[27]++,li===-1?(cov_2i9f9gddfq().b[14][0]++,''):(cov_2i9f9gddfq().b[14][1]++,keypath.slice(0,li)));let schema,schemaIdx,mustBeOptional;cov_2i9f9gddfq().s[28]++;if(typeof cyclicKeypath==='string'){cov_2i9f9gddfq().b[15][0]++;cov_2i9f9gddfq().s[29]++;newValue=typesonPathToJSONPointer(cyclicKeypath);cov_2i9f9gddfq().s[30]++;newType=type==='array'?(cov_2i9f9gddfq().b[16][0]++,'arrayReference'):(cov_2i9f9gddfq().b[16][1]++,'objectReference');cov_2i9f9gddfq().s[31]++;({newType,schema,schemaIdx,mustBeOptional}=canonicalTypeToAvailableTypeAndSchema(/** @type {import('../types.js').default} */types,/** @type {import('../formats.js').default} */formats,format,state,newType,value,arrayOrObjectPropertyName,schemaParents[parentPath],stateObj));// Todo (low): Add accurate state for second argument
}else{cov_2i9f9gddfq().b[15][1]++;cov_2i9f9gddfq().s[32]++;// console.log(
//   // keypath
//   'schemaParents', keypath, parentPath, value,
//   arrayOrObjectPropertyName, schemaParents[parentPath]
// );
try{cov_2i9f9gddfq().s[33]++;// console.log(
//   'VVVV0', JSON.stringify(parentPath), schemaParents // , stateObj
// );
({newType,schema,schemaIdx,mustBeOptional}=canonicalTypeToAvailableTypeAndSchema(/** @type {import('../types.js').default} */types,/** @type {import('../formats.js').default} */formats,format,state,/**
           * @type {import('../types.js').AvailableType}
           */type,value,arrayOrObjectPropertyName,schemaParents[parentPath],stateObj));// Todo (low): Add state for second argument
// console.log('VVVV1', value, schema);
// console.log('VVVV2',
//   JSON.stringify(stateObj.schemaContent, null, 2));
}catch(err){cov_2i9f9gddfq().s[34]++;console.log('err',type,err);cov_2i9f9gddfq().s[35]++;stateObj.error=/** @type {Error} */err;cov_2i9f9gddfq().s[36]++;return;}}const hasChildren=(cov_2i9f9gddfq().s[37]++,['array','object','set','map','tuple','record','filelist',// 'sparseArrays',
'arrayNonindexKeys'].includes(newType));// Maps are followed up by arrays which we don't want as such;
//  we track the paths to avoid reporting these child arrays
const mapType=(cov_2i9f9gddfq().s[38]++,(cov_2i9f9gddfq().b[17][0]++,type==='map')&&(cov_2i9f9gddfq().b[17][1]++,Object.prototype.toString.call(value)==='[object Map]'));cov_2i9f9gddfq().s[39]++;if(mapType){cov_2i9f9gddfq().b[18][0]++;cov_2i9f9gddfq().s[40]++;mapPaths.push(keypath);}else{cov_2i9f9gddfq().b[18][1]++;}cov_2i9f9gddfq().s[41]++;if(schema){cov_2i9f9gddfq().b[19][0]++;cov_2i9f9gddfq().s[42]++;stateObj.specificSchema=schema;cov_2i9f9gddfq().s[43]++;if(!stateObj.specificSchemas){cov_2i9f9gddfq().b[20][0]++;cov_2i9f9gddfq().s[44]++;stateObj.specificSchemas=[];}else{cov_2i9f9gddfq().b[20][1]++;}cov_2i9f9gddfq().s[45]++;stateObj.specificSchemas.push(schema);}else{cov_2i9f9gddfq().b[19][1]++;}// console.log('is', stateObj.schemaContent);
// console.log('but could set to', schema);
// console.log('arrayOrObjectPropertyName', arrayOrObjectPropertyName);
cov_2i9f9gddfq().s[46]++;if(!stateObj.rootUI){cov_2i9f9gddfq().b[21][0]++;cov_2i9f9gddfq().s[47]++;// console.log('vvvv0', newType, newValue);
stateObj.rootUI=types?.getUIForModeAndType({readonly,typeNamespace,type:newType,bringIntoFocus:false,buildTypeChoices,format,specificSchemaObject:schema,schemaContent,value:newValue,hasValue:true,// Not currently in use but may be convenient for a
//     type wanting the serialized data
replaced});cov_2i9f9gddfq().s[48]++;parents['']=/**
      * @type {HTMLElement &
      *   {$addAndSetArrayElement: AddAndSetArrayElement}}
      */stateObj.rootUI;cov_2i9f9gddfq().s[49]++;if(schema){cov_2i9f9gddfq().b[22][0]++;cov_2i9f9gddfq().s[50]++;schemaParents['']=[schema,schemaIdx];}else{cov_2i9f9gddfq().b[22][1]++;}// Since we're skipping the array elements, we need to add the
//   map element to the array index where the array children
//   will be found (which we do want)
cov_2i9f9gddfq().s[51]++;if(mapType){cov_2i9f9gddfq().b[23][0]++;cov_2i9f9gddfq().s[52]++;/** @type {Map<any, any>} */[...value].forEach((_,i)=>{cov_2i9f9gddfq().f[3]++;cov_2i9f9gddfq().s[53]++;parents[i]=/**
          * @type {HTMLElement &
          *   {$addAndSetArrayElement: AddAndSetArrayElement}}
          */stateObj.rootUI;});}else{cov_2i9f9gddfq().b[23][1]++;}cov_2i9f9gddfq().s[54]++;return;}else{cov_2i9f9gddfq().b[21][1]++;}cov_2i9f9gddfq().s[55]++;if(schema){cov_2i9f9gddfq().b[24][0]++;cov_2i9f9gddfq().s[56]++;schemaParents[keypath]=[schema,schemaIdx];}else{cov_2i9f9gddfq().b[24][1]++;}// console.log(
//   'schemaParents', newValue, JSON.stringify(parentPath),
//   schema, schemaParents
// );
// Todo (low): If could be async, use async encapsulate method
// Todo (low): Handle `awaitingTypesonPromise` with place-holder
// Todo (low): Handle `resolvingTypesonPromise` to replace place-holder
cov_2i9f9gddfq().s[57]++;setTimeout(()=>{cov_2i9f9gddfq().f[4]++;const ui=(cov_2i9f9gddfq().s[58]++,parents[parentPath]);// These errors occur, e.g., if `replacing` not first added and then
//   a converted object gets treated as the root UI (e.g., for `regexp`
//   or `blobHTML` at root)
// If there isn't a problem in Typeson with transmitting the `readonly`
//   status recursively down the object (should be no need to check
//   for circulars there?), could change Typeson to report `readonly`
//   for the nested items, in which case, we could block out `readonly`
//   instead of doing this here
cov_2i9f9gddfq().s[59]++;if((cov_2i9f9gddfq().b[26][0]++,!ui)||(cov_2i9f9gddfq().b[26][1]++,!('$addAndSetArrayElement'in ui))){cov_2i9f9gddfq().b[25][0]++;cov_2i9f9gddfq().s[60]++;return;}else{cov_2i9f9gddfq().b[25][1]++;}// Skip the array structures immediately following the Map,
//   as map needs to handle
cov_2i9f9gddfq().s[61]++;if((cov_2i9f9gddfq().b[28][0]++,!mapType)&&(cov_2i9f9gddfq().b[28][1]++,mapPaths.some(mapPath=>{cov_2i9f9gddfq().f[5]++;cov_2i9f9gddfq().s[62]++;if((cov_2i9f9gddfq().b[30][0]++,mapPath===keypath)||(cov_2i9f9gddfq().b[30][1]++,mapPath==='')&&(cov_2i9f9gddfq().b[30][2]++,/^\d+$/u.test(keypath))){cov_2i9f9gddfq().b[29][0]++;cov_2i9f9gddfq().s[63]++;return true;}else{cov_2i9f9gddfq().b[29][1]++;}const trailingIndex=(cov_2i9f9gddfq().s[64]++,keypath.match(/\.\d+$/u));cov_2i9f9gddfq().s[65]++;return(cov_2i9f9gddfq().b[31][0]++,trailingIndex)&&(cov_2i9f9gddfq().b[31][1]++,mapPath!=='')&&(cov_2i9f9gddfq().b[31][2]++,keypath.slice(0,-trailingIndex[0].length)===mapPath);}))){cov_2i9f9gddfq().b[27][0]++;cov_2i9f9gddfq().s[66]++;return;}else{cov_2i9f9gddfq().b[27][1]++;}// console.log('vvvv', newType, '::', newValue, '::', newValue?.cause);
const root=(cov_2i9f9gddfq().s[67]++,ui.$addAndSetArrayElement({mustBeOptional,propName:arrayOrObjectPropertyName,type:newType,value:newValue,bringIntoFocus:false,schemaIdx,schemaContent:(cov_2i9f9gddfq().b[32][0]++,schema)??(cov_2i9f9gddfq().b[32][1]++,schemaContent)}));/* istanbul ignore if -- Guard for `null` return */cov_2i9f9gddfq().s[68]++;if(!root){return;}else{cov_2i9f9gddfq().b[33][0]++;}cov_2i9f9gddfq().s[69]++;if(!readonly){cov_2i9f9gddfq().b[34][0]++;cov_2i9f9gddfq().s[70]++;types?.setValue({type:newType,// eslint-disable-next-line object-shorthand -- TS
root:(/** @type {HTMLDivElement} */root),value:newValue});cov_2i9f9gddfq().s[71]++;types?.validate({type:newType,// eslint-disable-next-line object-shorthand -- TS
root:(/** @type {HTMLDivElement} */root),topRoot:(/** @type {HTMLDivElement} */stateObj.rootUI),// We don't want focus when values auto-added
avoidReport:true});}else{cov_2i9f9gddfq().b[34][1]++;}cov_2i9f9gddfq().s[72]++;if(hasChildren){cov_2i9f9gddfq().b[35][0]++;cov_2i9f9gddfq().s[73]++;parents[keypath]=/**
          * @type {HTMLElement &
          *   {$addAndSetArrayElement: AddAndSetArrayElement}}
          */root;// Since we're skipping the array elements, we need to add the
//   map element to the array index where the array children
//   will be found (which we do want)
cov_2i9f9gddfq().s[74]++;if(mapType){cov_2i9f9gddfq().b[36][0]++;cov_2i9f9gddfq().s[75]++;/** @type {Map<any, any>} */[...value].forEach((_,i)=>{cov_2i9f9gddfq().f[6]++;cov_2i9f9gddfq().s[76]++;parents[`${keypath}.${i}`]=/**
            * @type {HTMLElement &
            *   {$addAndSetArrayElement: AddAndSetArrayElement}}
            */root;});}else{cov_2i9f9gddfq().b[36][1]++;}}else{cov_2i9f9gddfq().b[35][1]++;}});};};/**
 * Performs replacements on a list of types.
 * @param {string[]} originTypes
 * @param {[originType: string, replacementType: string][]} replacements
 * @returns {void}
 */cov_2i9f9gddfq().s[77]++;const replaceTypes=(originTypes,replacements)=>{cov_2i9f9gddfq().f[7]++;cov_2i9f9gddfq().s[78]++;replacements.forEach(([originType,replacementType])=>{cov_2i9f9gddfq().f[8]++;cov_2i9f9gddfq().s[79]++;originTypes.splice(originTypes.indexOf(originType),1,replacementType);});};/**
 * Converts a (typeson structured cloning) type to a type name relevant for the
 *   format, state, value, and schema content, and may supply a child type if
 *   there is a match. Also returns relevant schema for the type.
 * @param {import('../types.js').default} types The Types object containing
 *   type-specific data.
 * @param {import('../formats.js').default} formats The Formats object
 *   containing format-specific data.
 * @param {import('../formats.js').AvailableFormat} format The current format.
 * @param {string} state The current state.
 * @param {import('../types.js').AvailableType} valType The value type being
 *   checked.
 * @param {import('../formats.js').StructuredCloneValue} v The value being
 *   checked.
 * @param {string} arrayOrObjectPropertyName
 * @param {[import('zodex').SzType, number|undefined]|undefined} parentSchema
 * @param {import('../types.js').StateObject} stateObj The schema content
 *   being checked.
 * @throws {Error} May throw if data found to be invalid.
 * @returns {{
 *   newType: import('../types.js').AvailableType,
 *   schema?: import('zodex').SzType|undefined,
 *   mustBeOptional?: boolean,
 *   schemaIdx?: number
 * }} Schema and type info.
 */cov_2i9f9gddfq().s[80]++;const canonicalTypeToAvailableTypeAndSchema=(types,formats,format,state,valType,v,arrayOrObjectPropertyName,parentSchema,stateObj)=>{cov_2i9f9gddfq().f[9]++;const frmt=(cov_2i9f9gddfq().s[81]++,formats.getAvailableFormat(format));const{getTypesAndSchemasForState,convertFromTypeson,testInvalid}=(cov_2i9f9gddfq().s[82]++,frmt);const allowableTypes=(cov_2i9f9gddfq().s[83]++,getTypesAndSchemasForState.call(frmt,types,state,stateObj.schemaContent)?.types);/* istanbul ignore if -- Guard */cov_2i9f9gddfq().s[84]++;if(!allowableTypes){throw new Error('Unexpected undefined type for state');}else{cov_2i9f9gddfq().b[37][0]++;}/**
   * @type {import('../types.js').AvailableType|undefined}
   */let ret;/**
   * Throws an error with information about the new value type.
   * @param {string} newValType The new value type being recorded.
   * @throws {Error} The invalid Error being thrown.
   * @returns {never} Always throws instead of returning.
   */cov_2i9f9gddfq().s[85]++;const isInvalid=newValType=>{cov_2i9f9gddfq().f[10]++;const err=(/** @type {Error & {newValType: string}} */cov_2i9f9gddfq().s[86]++,new Error('Invalid'));cov_2i9f9gddfq().s[87]++;err.newValType=newValType;cov_2i9f9gddfq().s[88]++;throw err;};let schema;cov_2i9f9gddfq().s[89]++;if(convertFromTypeson){cov_2i9f9gddfq().b[38][0]++;let newValType;let mustBeOptional;let schemaIdx;cov_2i9f9gddfq().s[90]++;({type:newValType,schema,schemaIdx,mustBeOptional}=convertFromTypeson(valType,types,v,arrayOrObjectPropertyName,parentSchema,stateObj));cov_2i9f9gddfq().s[91]++;if(typeof newValType==='string'){cov_2i9f9gddfq().b[39][0]++;cov_2i9f9gddfq().s[92]++;if((cov_2i9f9gddfq().b[41][0]++,testInvalid)&&(cov_2i9f9gddfq().b[41][1]++,testInvalid(newValType,v))){cov_2i9f9gddfq().b[40][0]++;cov_2i9f9gddfq().s[93]++;return isInvalid(newValType);}else{cov_2i9f9gddfq().b[40][1]++;}cov_2i9f9gddfq().s[94]++;valType=newValType;cov_2i9f9gddfq().s[95]++;if(schema){cov_2i9f9gddfq().b[42][0]++;cov_2i9f9gddfq().s[96]++;return{newType:valType,schema,schemaIdx,mustBeOptional};}else{cov_2i9f9gddfq().b[42][1]++;}}else{cov_2i9f9gddfq().b[39][1]++;}}else{cov_2i9f9gddfq().b[38][1]++;}cov_2i9f9gddfq().s[97]++;allowableTypes.some(allowableType=>{cov_2i9f9gddfq().f[11]++;const typeObj=(/** @type {import('../types.js').TypeObject & {childTypes: string[]}} */cov_2i9f9gddfq().s[98]++,types.getTypeObject(allowableType));const{valueMatch,superType,childTypes}=(cov_2i9f9gddfq().s[99]++,typeObj);cov_2i9f9gddfq().s[100]++;if((cov_2i9f9gddfq().b[44][0]++,superType)&&(cov_2i9f9gddfq().b[44][1]++,valueMatch)&&(cov_2i9f9gddfq().b[44][2]++,// Using, e.g., for `true` and `false` subtypes
superType===valType)&&(cov_2i9f9gddfq().b[44][3]++,valueMatch(v))||(cov_2i9f9gddfq().b[44][4]++,childTypes)&&(cov_2i9f9gddfq().b[44][5]++,childTypes.includes(valType))){cov_2i9f9gddfq().b[43][0]++;cov_2i9f9gddfq().s[101]++;ret=allowableType;cov_2i9f9gddfq().s[102]++;return true;}else{cov_2i9f9gddfq().b[43][1]++;}cov_2i9f9gddfq().s[103]++;return false;});cov_2i9f9gddfq().s[104]++;if(ret===undefined){cov_2i9f9gddfq().b[45][0]++;cov_2i9f9gddfq().s[105]++;// We run this separately from the `childTypes` check above
//    to ensure `childTypes` have priority regardless of position
allowableTypes.some(allowableType=>{cov_2i9f9gddfq().f[12]++;cov_2i9f9gddfq().s[106]++;if(allowableType===valType){cov_2i9f9gddfq().b[46][0]++;cov_2i9f9gddfq().s[107]++;ret=allowableType;cov_2i9f9gddfq().s[108]++;return true;}else{cov_2i9f9gddfq().b[46][1]++;}cov_2i9f9gddfq().s[109]++;return false;});cov_2i9f9gddfq().s[110]++;if(ret===undefined){cov_2i9f9gddfq().b[47][0]++;cov_2i9f9gddfq().s[111]++;console.log('AALLLowableTypes',state,allowableTypes,'::',valType);cov_2i9f9gddfq().s[112]++;return isInvalid(valType);}else{cov_2i9f9gddfq().b[47][1]++;}}else{cov_2i9f9gddfq().b[45][1]++;}cov_2i9f9gddfq().s[113]++;return{newType:ret,schema};};/** @type {import('../formats.js').Format} */const structuredCloning=(cov_2i9f9gddfq().s[114]++,{async iterate(records,stateObj){cov_2i9f9gddfq().f[13]++;cov_2i9f9gddfq().s[115]++;/* istanbul ignore if -- Just a guard */if(!stateObj.format){stateObj.format='structuredCloning';}else{cov_2i9f9gddfq().b[48][0]++;}const structuredCloningFixed=(cov_2i9f9gddfq().s[116]++,structuredCloningThrowing.filter(typeSpecSet=>{cov_2i9f9gddfq().f[14]++;cov_2i9f9gddfq().s[117]++;return![// Not yet supported within JSOE
'imagedata','imagebitmap','cryptokey','domquad'].some(prop=>{cov_2i9f9gddfq().f[15]++;cov_2i9f9gddfq().s[118]++;return Object.hasOwn(typeSpecSet,prop);});}));cov_2i9f9gddfq().s[119]++;structuredCloningFixed.splice(// Add after userObjects
1,0,noneditable);const typeson=(cov_2i9f9gddfq().s[120]++,new Typeson({encapsulateObserver:encapsulateObserver(stateObj)}).register(structuredCloningFixed));cov_2i9f9gddfq().s[121]++;await typeson.encapsulateAsync(records,null,{throwOnBadSyncType:false});cov_2i9f9gddfq().s[122]++;if(stateObj.error){cov_2i9f9gddfq().b[49][0]++;cov_2i9f9gddfq().s[123]++;throw stateObj.error;}else{cov_2i9f9gddfq().b[49][1]++;}cov_2i9f9gddfq().s[124]++;return/** @type {Required<import('../types.js').StateObject>} */stateObj;},getTypesAndSchemasForState(types,state){cov_2i9f9gddfq().f[16]++;cov_2i9f9gddfq().s[125]++;if((cov_2i9f9gddfq().b[51][0]++,state)&&(cov_2i9f9gddfq().b[51][1]++,types.getContextInfo('structuredCloning',state))){cov_2i9f9gddfq().b[50][0]++;const typesForFormat=(cov_2i9f9gddfq().s[126]++,(cov_2i9f9gddfq().b[52][0]++,this.getTypesAndSchemasForState(types)?.types)||/* istanbul ignore next -- types should be an array */[]);const contextInfo=(cov_2i9f9gddfq().s[127]++,types.getContextInfo('structuredCloning',state));cov_2i9f9gddfq().s[128]++;contextInfo.forEach(({type,after})=>{cov_2i9f9gddfq().f[17]++;const precedingIdx=(cov_2i9f9gddfq().s[129]++,typesForFormat.indexOf(after));cov_2i9f9gddfq().s[130]++;typesForFormat.splice(precedingIdx+1,0,type);});cov_2i9f9gddfq().s[131]++;return{types:typesForFormat,schemaObjects:[]};}else{cov_2i9f9gddfq().b[50][1]++;}// Todo: Introduce new keys (to `Types.contexts`?) which could be used to
//         determine a delimited group of children (rather
//         than manual exception handling as we do here)
cov_2i9f9gddfq().s[132]++;if(state==='errorsArray'){cov_2i9f9gddfq().b[53][0]++;cov_2i9f9gddfq().s[133]++;return{types:['error','errors'],schemaObjects:[]};}else{cov_2i9f9gddfq().b[53][1]++;}cov_2i9f9gddfq().s[134]++;if(state==='filelistArray'){cov_2i9f9gddfq().b[54][0]++;cov_2i9f9gddfq().s[135]++;return{types:['file'],schemaObjects:[]};}else{cov_2i9f9gddfq().b[54][1]++;}cov_2i9f9gddfq().s[136]++;return{types:this.types(),schemaObjects:[]};/*
    // These have their children determined internally to array
    if (['map', 'set'].includes(state)) {return;}
    */ // These have their own internal numeric children instead
/*
    if (
      'int8array', 'uint8array', 'uint8clampedarray',
      'int16array', 'uint16array', 'int32array',
      'uint32array', 'float32array', 'float64array'
    ).includes(state)) {return;}
    */},types(){cov_2i9f9gddfq().f[18]++;const jsonTypes=(cov_2i9f9gddfq().s[137]++,json.types());cov_2i9f9gddfq().s[138]++;replaceTypes(jsonTypes,[['array',// We can rename to this instead of `arrayNonindexKeys` if we change
//  typeson-registry name
// 'sparseArrays',
'arrayNonindexKeys']]);cov_2i9f9gddfq().s[139]++;return[// This type is only for throwing upon cloning errors:
// 'checkDataCloneException'
// This type might be supported by evaluable JS or config passed in:
// 'userObject'
...jsonTypes,'undef',// Explicit undefined only
'bigint','bigintObject','SpecialNumber',// '`NaN`, `Infinity`, `-Infinity`, `-0`
'date','regexp','BooleanObject','NumberObject','StringObject','error','errors','blob','blobHTML','file','set','map','filelist','domexception','domrect','dompoint','dommatrix','buffersource','resurrectable'// Ok, but will need some work and/or decisions on how to present:
// 'cryptokey',
// 'domquad',
// 'imagedata', 'imagebitmap',
];}});export default structuredCloning;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmk5ZjlnZGRmcSIsImFjdHVhbENvdmVyYWdlIiwiVHlwZXNvbiIsInVuZXNjYXBlS2V5UGF0aENvbXBvbmVudCIsInN0cnVjdHVyZWRDbG9uaW5nVGhyb3dpbmciLCJyZXN1cnJlY3RhYmxlIiwibm9uZWRpdGFibGUiLCJ0b1N0cmluZ1RhZyIsImJ1aWxkVHlwZUNob2ljZXMiLCJ0eXBlc29uUGF0aFRvSlNPTlBvaW50ZXIiLCJqc29uIiwicyIsInRlc3QiLCJ4IiwiZiIsImIiLCJBcnJheSIsImlzQXJyYXkiLCJlbmNhcHN1bGF0ZU9ic2VydmVyIiwic3RhdGVPYmoiLCJ0eXBlTmFtZXNwYWNlIiwicmVhZG9ubHkiLCJmb3JtYXQiLCJmcm10Iiwic2NoZW1hQ29udGVudCIsImZvcm1hdHMiLCJ0eXBlcyIsInBhcmVudHMiLCJzY2hlbWFQYXJlbnRzIiwibWFwUGF0aHMiLCJvYnNlcnZlck9iaiIsInR5cGUiLCJjeWNsaWMiLCJrZXlwYXRoIiwidmFsdWUiLCJyZXBsYWNlZCIsImN5Y2xpY0tleXBhdGgiLCJlbmRJdGVyYXRlSW4iLCJlbmRJdGVyYXRlT3duIiwiZW5kSXRlcmF0ZVVuc2V0TnVtZXJpYyIsImNsb25lIiwidW5kZWZpbmVkIiwicmVwbGFjaW5nIiwibmV3VHlwZSIsIm5ld1ZhbHVlIiwic3RhdGUiLCJsaSIsImxhc3RJbmRleE9mIiwiYXJyYXlPck9iamVjdFByb3BlcnR5TmFtZSIsInNsaWNlIiwicGFyZW50UGF0aCIsInNjaGVtYSIsInNjaGVtYUlkeCIsIm11c3RCZU9wdGlvbmFsIiwiY2Fub25pY2FsVHlwZVRvQXZhaWxhYmxlVHlwZUFuZFNjaGVtYSIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImhhc0NoaWxkcmVuIiwiaW5jbHVkZXMiLCJtYXBUeXBlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwicHVzaCIsInNwZWNpZmljU2NoZW1hIiwic3BlY2lmaWNTY2hlbWFzIiwicm9vdFVJIiwiZ2V0VUlGb3JNb2RlQW5kVHlwZSIsImJyaW5nSW50b0ZvY3VzIiwic3BlY2lmaWNTY2hlbWFPYmplY3QiLCJoYXNWYWx1ZSIsImZvckVhY2giLCJfIiwiaSIsInNldFRpbWVvdXQiLCJ1aSIsInNvbWUiLCJtYXBQYXRoIiwidHJhaWxpbmdJbmRleCIsIm1hdGNoIiwibGVuZ3RoIiwicm9vdCIsIiRhZGRBbmRTZXRBcnJheUVsZW1lbnQiLCJwcm9wTmFtZSIsInNldFZhbHVlIiwidmFsaWRhdGUiLCJ0b3BSb290IiwiYXZvaWRSZXBvcnQiLCJyZXBsYWNlVHlwZXMiLCJvcmlnaW5UeXBlcyIsInJlcGxhY2VtZW50cyIsIm9yaWdpblR5cGUiLCJyZXBsYWNlbWVudFR5cGUiLCJzcGxpY2UiLCJpbmRleE9mIiwidmFsVHlwZSIsInYiLCJwYXJlbnRTY2hlbWEiLCJnZXRBdmFpbGFibGVGb3JtYXQiLCJnZXRUeXBlc0FuZFNjaGVtYXNGb3JTdGF0ZSIsImNvbnZlcnRGcm9tVHlwZXNvbiIsInRlc3RJbnZhbGlkIiwiYWxsb3dhYmxlVHlwZXMiLCJFcnJvciIsInJldCIsImlzSW52YWxpZCIsIm5ld1ZhbFR5cGUiLCJhbGxvd2FibGVUeXBlIiwidHlwZU9iaiIsImdldFR5cGVPYmplY3QiLCJ2YWx1ZU1hdGNoIiwic3VwZXJUeXBlIiwiY2hpbGRUeXBlcyIsInN0cnVjdHVyZWRDbG9uaW5nIiwiaXRlcmF0ZSIsInJlY29yZHMiLCJzdHJ1Y3R1cmVkQ2xvbmluZ0ZpeGVkIiwiZmlsdGVyIiwidHlwZVNwZWNTZXQiLCJwcm9wIiwiaGFzT3duIiwidHlwZXNvbiIsInJlZ2lzdGVyIiwiZW5jYXBzdWxhdGVBc3luYyIsInRocm93T25CYWRTeW5jVHlwZSIsImdldENvbnRleHRJbmZvIiwidHlwZXNGb3JGb3JtYXQiLCJjb250ZXh0SW5mbyIsImFmdGVyIiwicHJlY2VkaW5nSWR4Iiwic2NoZW1hT2JqZWN0cyIsImpzb25UeXBlcyJdLCJzb3VyY2VzIjpbInN0cnVjdHVyZWRDbG9uaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFR5cGVzb24sIHVuZXNjYXBlS2V5UGF0aENvbXBvbmVudCwgc3RydWN0dXJlZENsb25pbmdUaHJvd2luZyxcbiAgcmVzdXJyZWN0YWJsZSBhcyBub25lZGl0YWJsZSwgdG9TdHJpbmdUYWdcbn0gZnJvbSAnLi4vdmVuZG9yLWltcG9ydHMuanMnO1xuXG5pbXBvcnQge2J1aWxkVHlwZUNob2ljZXN9IGZyb20gJy4uL3R5cGVDaG9pY2VzLmpzJztcbmltcG9ydCB7XG4gIHR5cGVzb25QYXRoVG9KU09OUG9pbnRlclxufSBmcm9tICcuLi91dGlscy9qc29uUG9pbnRlci5qcyc7XG5cbmltcG9ydCBqc29uIGZyb20gJy4vanNvbi5qcyc7XG5cbi8vIFdlIG1vZGlmeSByZXN1cnJlY3RhYmxlIGluIGhvcGVzIGFuIGluY2x1ZGluZyBhcHBsaWNhdGlvbiBkb2Vzbid0IG5lZWQgaXRcbi8qKiBAdHlwZSB7aW1wb3J0KCd0eXBlc29uJykuVHlwZVNwZWNTZXR9ICovIChcbiAgbm9uZWRpdGFibGUucmVzdXJyZWN0YWJsZVxuKS50ZXN0ID0gLyoqIEB0eXBlIHtpbXBvcnQoJ3R5cGVzb24nKS5UZXN0ZXJ9ICovICh4KSA9PiB7XG4gIHJldHVybiB4ICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh4KSAmJlxuICAgICAgICAgIC8vIENvdWxkIGJlIGEgdXNlciBvYmplY3Qgd2l0aCBhIHN0cmluZyB0YWcsIGJ1dCB3ZSBjYW4ndCB0ZWxsXG4gICAgICAgICAgdG9TdHJpbmdUYWcoeCkgIT09ICdPYmplY3QnO1xufTtcblxuLyoqXG4gKiBEZWxlZ2F0ZXMgZGF0YS1iYXNlZCBVSSBidWlsZGluZyB0byBtZXRob2QgZm9yIGFkZGluZyBjaGlsZCBlbGVtZW50cyAoYVxuICogICBtZXRob2Qgd2hpY2ggaXMgaG91c2VkIGluIHRoZSBhcnJheSB0eXBlIG9iamVjdCkuXG4gKiBAdHlwZWRlZiB7KGluZm86IHtcbiAqICAgcHJvcE5hbWU6IHN0cmluZyxcbiAqICAgdHlwZTogaW1wb3J0KCcuLi90eXBlcy5qcycpLkF2YWlsYWJsZVR5cGUsXG4gKiAgIHZhbHVlOiBpbXBvcnQoJy4uL2Zvcm1hdHMuanMnKS5TdHJ1Y3R1cmVkQ2xvbmVWYWx1ZSxcbiAqICAgYnJpbmdJbnRvRm9jdXM/OiBib29sZWFuLFxuICogICBzZXRBVmFsdWU/OiBib29sZWFuLFxuICogICBzY2hlbWFDb250ZW50PzogaW1wb3J0KCcuLi9mb3JtYXRzL3NjaGVtYS5qcycpLlpvZGV4U2NoZW1hLFxuICogICBtdXN0QmVPcHRpb25hbD86IGJvb2xlYW4sXG4gKiAgIHNjaGVtYUlkeD86IG51bWJlclxuICogfSkgPT4gSFRNTEVsZW1lbnR8bnVsbH0gQWRkQW5kU2V0QXJyYXlFbGVtZW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd0eXBlc29uLXJlZ2lzdHJ5JykuRW5jYXBzdWxhdGVPYnNlcnZlcn0gRW5jYXBzdWxhdGVPYnNlcnZlclxuICovXG5cbi8qKlxuICogT2J0YWlucyBzdGF0ZS1zcGVjaWZpYyBkYXRhIGFuZCByZXR1cm5zIGFuIG9ic2VydmVyIHRoYXQgY2FuIGJ1aWxkIGEgVUkgYmFzZWRcbiAqICAgb24gZGF0YSBpdCByZWNlaXZlcy5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlN0YXRlT2JqZWN0fSBzdGF0ZU9ialxuICogQHJldHVybnMge0VuY2Fwc3VsYXRlT2JzZXJ2ZXJ9XG4gKi9cbmNvbnN0IGVuY2Fwc3VsYXRlT2JzZXJ2ZXIgPSAoc3RhdGVPYmopID0+IHtcbiAgY29uc3Qge1xuICAgIHR5cGVOYW1lc3BhY2UsIHJlYWRvbmx5LCBmb3JtYXQ6IGZybXQsIHNjaGVtYUNvbnRlbnQsXG4gICAgZm9ybWF0cyxcbiAgICB0eXBlc1xuICB9ID0gc3RhdGVPYmo7XG5cbiAgY29uc3QgZm9ybWF0ID0gLyoqIEB0eXBlIHtpbXBvcnQoJy4uL2Zvcm1hdHMuanMnKS5BdmFpbGFibGVGb3JtYXR9ICovIChmcm10KTtcblxuICAvKipcbiAgICogTWF0Y2hlcyBrZXlwYXRocyB0byB0aGUgSFRNTCBVSSBFbGVtZW50LlxuICAgKiBAdHlwZSB7e1trZXk6IHN0cmluZ106IEhUTUxFbGVtZW50ICYge1xuICAgKiAgICRhZGRBbmRTZXRBcnJheUVsZW1lbnQ6IEFkZEFuZFNldEFycmF5RWxlbWVudFxuICAgKiB9fX1cbiAgICovXG4gIGNvbnN0IHBhcmVudHMgPSB7fTtcblxuICAvKipcbiAgICogQHR5cGUge3tcbiAgICogICBba2V5OiBzdHJpbmddOiBbaW1wb3J0KCd6b2RleCcpLlN6VHlwZSwgbnVtYmVyfHVuZGVmaW5lZF18dW5kZWZpbmVkXG4gICAqIH19XG4gICAqL1xuICBjb25zdCBzY2hlbWFQYXJlbnRzID0ge307XG5cbiAgLyoqIEB0eXBlIHtzdHJpbmdbXX0gKi9cbiAgY29uc3QgbWFwUGF0aHMgPSBbXTtcblxuICByZXR1cm4gKG9ic2VydmVyT2JqKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdHlwZSxcbiAgICAgIGN5Y2xpYyxcbiAgICAgIGtleXBhdGgsXG4gICAgICB2YWx1ZSxcbiAgICAgIHJlcGxhY2VkLFxuICAgICAgY3ljbGljS2V5cGF0aCxcbiAgICAgIGVuZEl0ZXJhdGVJbixcbiAgICAgIGVuZEl0ZXJhdGVPd24sXG4gICAgICBlbmRJdGVyYXRlVW5zZXROdW1lcmljLFxuICAgICAgY2xvbmVcbiAgICB9ID0gb2JzZXJ2ZXJPYmo7XG4gICAgaWYgKCdyZXBsYWNlZCcgaW4gb2JzZXJ2ZXJPYmopIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN5Y2xpYyA9PT0gJ3JlYWRvbmx5JyAmJiAhQXJyYXkuaXNBcnJheShvYnNlcnZlck9iai52YWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN5Y2xpYyA9PT0gJ3JlYWRvbmx5JyAmJiAodHlwZSA9PT0gJ3NldCcgfHwgdHlwZSA9PT0gJ2ZpbGVsaXN0JykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVuZEl0ZXJhdGVJbiB8fCBlbmRJdGVyYXRlT3duKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlbmRJdGVyYXRlVW5zZXROdW1lcmljIHx8IChcbiAgICAgIGNsb25lID09PSB1bmRlZmluZWQgJiYgY3ljbGljS2V5cGF0aCA9PT0gdW5kZWZpbmVkICYmIEFycmF5LmlzQXJyYXkodmFsdWUpXG4gICAgKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdoYXQgb3RoZXIgc2l0dWF0aW9ucyBpcyB0aGlzIGZpcmluZyB0d2ljZSwgYW5kIGl0XG4gICAgLy8gICBzaG91bGRuJ3QgcmVhY2ggaGVyZT9cbiAgICBpZiAob2JzZXJ2ZXJPYmoucmVwbGFjaW5nICYmIHR5cGUgPT09ICduZWdhdGl2ZVplcm8nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0tIE5vdCBwYXJ0IG9mIGZvcm1hdCAqL1xuICAgIGlmICh0eXBlID09PSAnc3BhcnNlVW5kZWZpbmVkJykgeyAvLyBXZSdsbCBoYW5kbGUgb3RoZXJ3aXNlXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXZhaWxhYmxlVHlwZX0gKi9cbiAgICBsZXQgbmV3VHlwZTtcbiAgICBsZXQgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgIC8qIHNjaGVtYTogfHwgZm9ybWF0LnN0YXJ0c1dpdGgoJ3NjaGVtYS0nKSAqL1xuICAgIGNvbnN0IHN0YXRlID0gZm9ybWF0ID09PSAnc3RydWN0dXJlZENsb25pbmcnXG4gICAgICA/ICdhcnJheU5vbmluZGV4S2V5cydcbiAgICAvLyA/ICdzcGFyc2VBcnJheXMnXG4gICAgICA6ICdhcnJheSc7XG5cbiAgICBjb25zdCBsaSA9IGtleXBhdGgubGFzdEluZGV4T2YoJy4nKTtcbiAgICBjb25zdCBhcnJheU9yT2JqZWN0UHJvcGVydHlOYW1lID1cbiAgICAgIHVuZXNjYXBlS2V5UGF0aENvbXBvbmVudChrZXlwYXRoLnNsaWNlKGxpICsgMSkpO1xuICAgIGNvbnN0IHBhcmVudFBhdGggPSBsaSA9PT0gLTEgPyAnJyA6IGtleXBhdGguc2xpY2UoMCwgbGkpO1xuXG4gICAgbGV0IHNjaGVtYSwgc2NoZW1hSWR4LCBtdXN0QmVPcHRpb25hbDtcbiAgICBpZiAodHlwZW9mIGN5Y2xpY0tleXBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICBuZXdWYWx1ZSA9IHR5cGVzb25QYXRoVG9KU09OUG9pbnRlcihjeWNsaWNLZXlwYXRoKTtcbiAgICAgIG5ld1R5cGUgPSB0eXBlID09PSAnYXJyYXknID8gJ2FycmF5UmVmZXJlbmNlJyA6ICdvYmplY3RSZWZlcmVuY2UnO1xuICAgICAgKHtcbiAgICAgICAgbmV3VHlwZSwgc2NoZW1hLCBzY2hlbWFJZHgsIG11c3RCZU9wdGlvbmFsXG4gICAgICB9ID0gY2Fub25pY2FsVHlwZVRvQXZhaWxhYmxlVHlwZUFuZFNjaGVtYShcbiAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuZGVmYXVsdH0gKi8gKHR5cGVzKSxcbiAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4uL2Zvcm1hdHMuanMnKS5kZWZhdWx0fSAqLyAoZm9ybWF0cyksXG4gICAgICAgIGZvcm1hdCwgc3RhdGUsIG5ld1R5cGUsIHZhbHVlLFxuICAgICAgICBhcnJheU9yT2JqZWN0UHJvcGVydHlOYW1lLFxuICAgICAgICBzY2hlbWFQYXJlbnRzW3BhcmVudFBhdGhdLFxuICAgICAgICBzdGF0ZU9ialxuICAgICAgKSk7IC8vIFRvZG8gKGxvdyk6IEFkZCBhY2N1cmF0ZSBzdGF0ZSBmb3Igc2Vjb25kIGFyZ3VtZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFxuICAgICAgLy8gICAvLyBrZXlwYXRoXG4gICAgICAvLyAgICdzY2hlbWFQYXJlbnRzJywga2V5cGF0aCwgcGFyZW50UGF0aCwgdmFsdWUsXG4gICAgICAvLyAgIGFycmF5T3JPYmplY3RQcm9wZXJ0eU5hbWUsIHNjaGVtYVBhcmVudHNbcGFyZW50UGF0aF1cbiAgICAgIC8vICk7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcbiAgICAgICAgLy8gICAnVlZWVjAnLCBKU09OLnN0cmluZ2lmeShwYXJlbnRQYXRoKSwgc2NoZW1hUGFyZW50cyAvLyAsIHN0YXRlT2JqXG4gICAgICAgIC8vICk7XG4gICAgICAgICh7XG4gICAgICAgICAgbmV3VHlwZSwgc2NoZW1hLCBzY2hlbWFJZHgsIG11c3RCZU9wdGlvbmFsXG4gICAgICAgIH0gPSBjYW5vbmljYWxUeXBlVG9BdmFpbGFibGVUeXBlQW5kU2NoZW1hKFxuICAgICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuLi90eXBlcy5qcycpLmRlZmF1bHR9ICovICh0eXBlcyksXG4gICAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4uL2Zvcm1hdHMuanMnKS5kZWZhdWx0fSAqLyAoZm9ybWF0cyksXG4gICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEB0eXBlIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXZhaWxhYmxlVHlwZX1cbiAgICAgICAgICAgKi9cbiAgICAgICAgICAodHlwZSksXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgYXJyYXlPck9iamVjdFByb3BlcnR5TmFtZSxcbiAgICAgICAgICBzY2hlbWFQYXJlbnRzW3BhcmVudFBhdGhdLFxuICAgICAgICAgIHN0YXRlT2JqXG4gICAgICAgICkpOyAvLyBUb2RvIChsb3cpOiBBZGQgc3RhdGUgZm9yIHNlY29uZCBhcmd1bWVudFxuICAgICAgICAvLyBjb25zb2xlLmxvZygnVlZWVjEnLCB2YWx1ZSwgc2NoZW1hKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1ZWVlYyJyxcbiAgICAgICAgLy8gICBKU09OLnN0cmluZ2lmeShzdGF0ZU9iai5zY2hlbWFDb250ZW50LCBudWxsLCAyKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2VycicsIHR5cGUsIGVycik7XG4gICAgICAgIHN0YXRlT2JqLmVycm9yID0gLyoqIEB0eXBlIHtFcnJvcn0gKi8gKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBoYXNDaGlsZHJlbiA9IFtcbiAgICAgICdhcnJheScsICdvYmplY3QnLCAnc2V0JywgJ21hcCcsICd0dXBsZScsICdyZWNvcmQnLCAnZmlsZWxpc3QnLFxuICAgICAgLy8gJ3NwYXJzZUFycmF5cycsXG4gICAgICAnYXJyYXlOb25pbmRleEtleXMnXG4gICAgXS5pbmNsdWRlcyhuZXdUeXBlKTtcblxuICAgIC8vIE1hcHMgYXJlIGZvbGxvd2VkIHVwIGJ5IGFycmF5cyB3aGljaCB3ZSBkb24ndCB3YW50IGFzIHN1Y2g7XG4gICAgLy8gIHdlIHRyYWNrIHRoZSBwYXRocyB0byBhdm9pZCByZXBvcnRpbmcgdGhlc2UgY2hpbGQgYXJyYXlzXG4gICAgY29uc3QgbWFwVHlwZSA9IHR5cGUgPT09ICdtYXAnICYmXG4gICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBNYXBdJztcbiAgICBpZiAobWFwVHlwZSkge1xuICAgICAgbWFwUGF0aHMucHVzaChrZXlwYXRoKTtcbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hKSB7XG4gICAgICBzdGF0ZU9iai5zcGVjaWZpY1NjaGVtYSA9IHNjaGVtYTtcbiAgICAgIGlmICghc3RhdGVPYmouc3BlY2lmaWNTY2hlbWFzKSB7XG4gICAgICAgIHN0YXRlT2JqLnNwZWNpZmljU2NoZW1hcyA9IFtdO1xuICAgICAgfVxuICAgICAgc3RhdGVPYmouc3BlY2lmaWNTY2hlbWFzLnB1c2goc2NoZW1hKTtcbiAgICB9XG5cbiAgICAvLyBjb25zb2xlLmxvZygnaXMnLCBzdGF0ZU9iai5zY2hlbWFDb250ZW50KTtcbiAgICAvLyBjb25zb2xlLmxvZygnYnV0IGNvdWxkIHNldCB0bycsIHNjaGVtYSk7XG4gICAgLy8gY29uc29sZS5sb2coJ2FycmF5T3JPYmplY3RQcm9wZXJ0eU5hbWUnLCBhcnJheU9yT2JqZWN0UHJvcGVydHlOYW1lKTtcblxuICAgIGlmICghc3RhdGVPYmoucm9vdFVJKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndnZ2djAnLCBuZXdUeXBlLCBuZXdWYWx1ZSk7XG4gICAgICBzdGF0ZU9iai5yb290VUkgPSB0eXBlcz8uZ2V0VUlGb3JNb2RlQW5kVHlwZSh7XG4gICAgICAgIHJlYWRvbmx5LFxuICAgICAgICB0eXBlTmFtZXNwYWNlLFxuICAgICAgICB0eXBlOiBuZXdUeXBlLFxuICAgICAgICBicmluZ0ludG9Gb2N1czogZmFsc2UsXG4gICAgICAgIGJ1aWxkVHlwZUNob2ljZXMsXG4gICAgICAgIGZvcm1hdCxcbiAgICAgICAgc3BlY2lmaWNTY2hlbWFPYmplY3Q6IHNjaGVtYSxcbiAgICAgICAgc2NoZW1hQ29udGVudCxcbiAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICBoYXNWYWx1ZTogdHJ1ZSxcbiAgICAgICAgLy8gTm90IGN1cnJlbnRseSBpbiB1c2UgYnV0IG1heSBiZSBjb252ZW5pZW50IGZvciBhXG4gICAgICAgIC8vICAgICB0eXBlIHdhbnRpbmcgdGhlIHNlcmlhbGl6ZWQgZGF0YVxuICAgICAgICByZXBsYWNlZFxuICAgICAgfSk7XG4gICAgICBwYXJlbnRzWycnXSA9IC8qKlxuICAgICAgKiBAdHlwZSB7SFRNTEVsZW1lbnQgJlxuICAgICAgKiAgIHskYWRkQW5kU2V0QXJyYXlFbGVtZW50OiBBZGRBbmRTZXRBcnJheUVsZW1lbnR9fVxuICAgICAgKi8gKHN0YXRlT2JqLnJvb3RVSSk7XG5cbiAgICAgIGlmIChzY2hlbWEpIHtcbiAgICAgICAgc2NoZW1hUGFyZW50c1snJ10gPSBbc2NoZW1hLCBzY2hlbWFJZHhdO1xuICAgICAgfVxuXG4gICAgICAvLyBTaW5jZSB3ZSdyZSBza2lwcGluZyB0aGUgYXJyYXkgZWxlbWVudHMsIHdlIG5lZWQgdG8gYWRkIHRoZVxuICAgICAgLy8gICBtYXAgZWxlbWVudCB0byB0aGUgYXJyYXkgaW5kZXggd2hlcmUgdGhlIGFycmF5IGNoaWxkcmVuXG4gICAgICAvLyAgIHdpbGwgYmUgZm91bmQgKHdoaWNoIHdlIGRvIHdhbnQpXG4gICAgICBpZiAobWFwVHlwZSkge1xuICAgICAgICAvKiogQHR5cGUge01hcDxhbnksIGFueT59ICovIFsuLi52YWx1ZV0uZm9yRWFjaCgoXywgaSkgPT4ge1xuICAgICAgICAgIHBhcmVudHNbaV0gPSAvKipcbiAgICAgICAgICAqIEB0eXBlIHtIVE1MRWxlbWVudCAmXG4gICAgICAgICAgKiAgIHskYWRkQW5kU2V0QXJyYXlFbGVtZW50OiBBZGRBbmRTZXRBcnJheUVsZW1lbnR9fVxuICAgICAgICAgICovIChzdGF0ZU9iai5yb290VUkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hKSB7XG4gICAgICBzY2hlbWFQYXJlbnRzW2tleXBhdGhdID0gW3NjaGVtYSwgc2NoZW1hSWR4XTtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coXG4gICAgLy8gICAnc2NoZW1hUGFyZW50cycsIG5ld1ZhbHVlLCBKU09OLnN0cmluZ2lmeShwYXJlbnRQYXRoKSxcbiAgICAvLyAgIHNjaGVtYSwgc2NoZW1hUGFyZW50c1xuICAgIC8vICk7XG5cbiAgICAvLyBUb2RvIChsb3cpOiBJZiBjb3VsZCBiZSBhc3luYywgdXNlIGFzeW5jIGVuY2Fwc3VsYXRlIG1ldGhvZFxuICAgIC8vIFRvZG8gKGxvdyk6IEhhbmRsZSBgYXdhaXRpbmdUeXBlc29uUHJvbWlzZWAgd2l0aCBwbGFjZS1ob2xkZXJcbiAgICAvLyBUb2RvIChsb3cpOiBIYW5kbGUgYHJlc29sdmluZ1R5cGVzb25Qcm9taXNlYCB0byByZXBsYWNlIHBsYWNlLWhvbGRlclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgdWkgPSBwYXJlbnRzW3BhcmVudFBhdGhdO1xuICAgICAgLy8gVGhlc2UgZXJyb3JzIG9jY3VyLCBlLmcuLCBpZiBgcmVwbGFjaW5nYCBub3QgZmlyc3QgYWRkZWQgYW5kIHRoZW5cbiAgICAgIC8vICAgYSBjb252ZXJ0ZWQgb2JqZWN0IGdldHMgdHJlYXRlZCBhcyB0aGUgcm9vdCBVSSAoZS5nLiwgZm9yIGByZWdleHBgXG4gICAgICAvLyAgIG9yIGBibG9iSFRNTGAgYXQgcm9vdClcbiAgICAgIC8vIElmIHRoZXJlIGlzbid0IGEgcHJvYmxlbSBpbiBUeXBlc29uIHdpdGggdHJhbnNtaXR0aW5nIHRoZSBgcmVhZG9ubHlgXG4gICAgICAvLyAgIHN0YXR1cyByZWN1cnNpdmVseSBkb3duIHRoZSBvYmplY3QgKHNob3VsZCBiZSBubyBuZWVkIHRvIGNoZWNrXG4gICAgICAvLyAgIGZvciBjaXJjdWxhcnMgdGhlcmU/KSwgY291bGQgY2hhbmdlIFR5cGVzb24gdG8gcmVwb3J0IGByZWFkb25seWBcbiAgICAgIC8vICAgZm9yIHRoZSBuZXN0ZWQgaXRlbXMsIGluIHdoaWNoIGNhc2UsIHdlIGNvdWxkIGJsb2NrIG91dCBgcmVhZG9ubHlgXG4gICAgICAvLyAgIGluc3RlYWQgb2YgZG9pbmcgdGhpcyBoZXJlXG4gICAgICBpZiAoIXVpIHx8ICEoJyRhZGRBbmRTZXRBcnJheUVsZW1lbnQnIGluIHVpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFNraXAgdGhlIGFycmF5IHN0cnVjdHVyZXMgaW1tZWRpYXRlbHkgZm9sbG93aW5nIHRoZSBNYXAsXG4gICAgICAvLyAgIGFzIG1hcCBuZWVkcyB0byBoYW5kbGVcbiAgICAgIGlmICghbWFwVHlwZSAmJiBtYXBQYXRocy5zb21lKChtYXBQYXRoKSA9PiB7XG4gICAgICAgIGlmIChtYXBQYXRoID09PSBrZXlwYXRoIHx8XG4gICAgICAgICAgKG1hcFBhdGggPT09ICcnICYmICgvXlxcZCskL3UpLnRlc3Qoa2V5cGF0aCkpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhaWxpbmdJbmRleCA9IGtleXBhdGgubWF0Y2goL1xcLlxcZCskL3UpO1xuICAgICAgICByZXR1cm4gKHRyYWlsaW5nSW5kZXggJiYgbWFwUGF0aCAhPT0gJycgJiZcbiAgICAgICAgICBrZXlwYXRoLnNsaWNlKDAsIC10cmFpbGluZ0luZGV4WzBdLmxlbmd0aCkgPT09IG1hcFBhdGgpO1xuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBjb25zb2xlLmxvZygndnZ2dicsIG5ld1R5cGUsICc6OicsIG5ld1ZhbHVlLCAnOjonLCBuZXdWYWx1ZT8uY2F1c2UpO1xuXG4gICAgICBjb25zdCByb290ID0gdWkuJGFkZEFuZFNldEFycmF5RWxlbWVudCh7XG4gICAgICAgIG11c3RCZU9wdGlvbmFsLFxuICAgICAgICBwcm9wTmFtZTogYXJyYXlPck9iamVjdFByb3BlcnR5TmFtZSxcbiAgICAgICAgdHlwZTogbmV3VHlwZSxcbiAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICBicmluZ0ludG9Gb2N1czogZmFsc2UsXG4gICAgICAgIHNjaGVtYUlkeCxcbiAgICAgICAgc2NoZW1hQ29udGVudDogc2NoZW1hID8/IHNjaGVtYUNvbnRlbnRcbiAgICAgIH0pO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLS0gR3VhcmQgZm9yIGBudWxsYCByZXR1cm4gKi9cbiAgICAgIGlmICghcm9vdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVhZG9ubHkpIHtcbiAgICAgICAgdHlwZXM/LnNldFZhbHVlKHtcbiAgICAgICAgICB0eXBlOiBuZXdUeXBlLFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBvYmplY3Qtc2hvcnRoYW5kIC0tIFRTXG4gICAgICAgICAgcm9vdDogLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi8gKHJvb3QpLFxuICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdHlwZXM/LnZhbGlkYXRlKHtcbiAgICAgICAgICB0eXBlOiBuZXdUeXBlLFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBvYmplY3Qtc2hvcnRoYW5kIC0tIFRTXG4gICAgICAgICAgcm9vdDogLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi8gKHJvb3QpLFxuICAgICAgICAgIHRvcFJvb3Q6IC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovIChzdGF0ZU9iai5yb290VUkpLFxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZm9jdXMgd2hlbiB2YWx1ZXMgYXV0by1hZGRlZFxuICAgICAgICAgIGF2b2lkUmVwb3J0OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICAgICAgcGFyZW50c1trZXlwYXRoXSA9IC8qKlxuICAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50ICZcbiAgICAgICAgICAqICAgeyRhZGRBbmRTZXRBcnJheUVsZW1lbnQ6IEFkZEFuZFNldEFycmF5RWxlbWVudH19XG4gICAgICAgICAgKi8gKFxuICAgICAgICAgICAgcm9vdFxuICAgICAgICAgICk7XG5cbiAgICAgICAgLy8gU2luY2Ugd2UncmUgc2tpcHBpbmcgdGhlIGFycmF5IGVsZW1lbnRzLCB3ZSBuZWVkIHRvIGFkZCB0aGVcbiAgICAgICAgLy8gICBtYXAgZWxlbWVudCB0byB0aGUgYXJyYXkgaW5kZXggd2hlcmUgdGhlIGFycmF5IGNoaWxkcmVuXG4gICAgICAgIC8vICAgd2lsbCBiZSBmb3VuZCAod2hpY2ggd2UgZG8gd2FudClcbiAgICAgICAgaWYgKG1hcFR5cGUpIHtcbiAgICAgICAgICAvKiogQHR5cGUge01hcDxhbnksIGFueT59ICovIFsuLi52YWx1ZV0uZm9yRWFjaCgoXywgaSkgPT4ge1xuICAgICAgICAgICAgcGFyZW50c1tgJHtrZXlwYXRofS4ke2l9YF0gPSAvKipcbiAgICAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50ICZcbiAgICAgICAgICAgICogICB7JGFkZEFuZFNldEFycmF5RWxlbWVudDogQWRkQW5kU2V0QXJyYXlFbGVtZW50fX1cbiAgICAgICAgICAgICovIChyb290KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyByZXBsYWNlbWVudHMgb24gYSBsaXN0IG9mIHR5cGVzLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gb3JpZ2luVHlwZXNcbiAqIEBwYXJhbSB7W29yaWdpblR5cGU6IHN0cmluZywgcmVwbGFjZW1lbnRUeXBlOiBzdHJpbmddW119IHJlcGxhY2VtZW50c1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IHJlcGxhY2VUeXBlcyA9IChvcmlnaW5UeXBlcywgcmVwbGFjZW1lbnRzKSA9PiB7XG4gIHJlcGxhY2VtZW50cy5mb3JFYWNoKChbb3JpZ2luVHlwZSwgcmVwbGFjZW1lbnRUeXBlXSkgPT4ge1xuICAgIG9yaWdpblR5cGVzLnNwbGljZShvcmlnaW5UeXBlcy5pbmRleE9mKG9yaWdpblR5cGUpLCAxLCByZXBsYWNlbWVudFR5cGUpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSAodHlwZXNvbiBzdHJ1Y3R1cmVkIGNsb25pbmcpIHR5cGUgdG8gYSB0eXBlIG5hbWUgcmVsZXZhbnQgZm9yIHRoZVxuICogICBmb3JtYXQsIHN0YXRlLCB2YWx1ZSwgYW5kIHNjaGVtYSBjb250ZW50LCBhbmQgbWF5IHN1cHBseSBhIGNoaWxkIHR5cGUgaWZcbiAqICAgdGhlcmUgaXMgYSBtYXRjaC4gQWxzbyByZXR1cm5zIHJlbGV2YW50IHNjaGVtYSBmb3IgdGhlIHR5cGUuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5kZWZhdWx0fSB0eXBlcyBUaGUgVHlwZXMgb2JqZWN0IGNvbnRhaW5pbmdcbiAqICAgdHlwZS1zcGVjaWZpYyBkYXRhLlxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2Zvcm1hdHMuanMnKS5kZWZhdWx0fSBmb3JtYXRzIFRoZSBGb3JtYXRzIG9iamVjdFxuICogICBjb250YWluaW5nIGZvcm1hdC1zcGVjaWZpYyBkYXRhLlxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2Zvcm1hdHMuanMnKS5BdmFpbGFibGVGb3JtYXR9IGZvcm1hdCBUaGUgY3VycmVudCBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhdGUgVGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdmFpbGFibGVUeXBlfSB2YWxUeXBlIFRoZSB2YWx1ZSB0eXBlIGJlaW5nXG4gKiAgIGNoZWNrZWQuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vZm9ybWF0cy5qcycpLlN0cnVjdHVyZWRDbG9uZVZhbHVlfSB2IFRoZSB2YWx1ZSBiZWluZ1xuICogICBjaGVja2VkLlxuICogQHBhcmFtIHtzdHJpbmd9IGFycmF5T3JPYmplY3RQcm9wZXJ0eU5hbWVcbiAqIEBwYXJhbSB7W2ltcG9ydCgnem9kZXgnKS5TelR5cGUsIG51bWJlcnx1bmRlZmluZWRdfHVuZGVmaW5lZH0gcGFyZW50U2NoZW1hXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5TdGF0ZU9iamVjdH0gc3RhdGVPYmogVGhlIHNjaGVtYSBjb250ZW50XG4gKiAgIGJlaW5nIGNoZWNrZWQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gTWF5IHRocm93IGlmIGRhdGEgZm91bmQgdG8gYmUgaW52YWxpZC5cbiAqIEByZXR1cm5zIHt7XG4gKiAgIG5ld1R5cGU6IGltcG9ydCgnLi4vdHlwZXMuanMnKS5BdmFpbGFibGVUeXBlLFxuICogICBzY2hlbWE/OiBpbXBvcnQoJ3pvZGV4JykuU3pUeXBlfHVuZGVmaW5lZCxcbiAqICAgbXVzdEJlT3B0aW9uYWw/OiBib29sZWFuLFxuICogICBzY2hlbWFJZHg/OiBudW1iZXJcbiAqIH19IFNjaGVtYSBhbmQgdHlwZSBpbmZvLlxuICovXG5jb25zdCBjYW5vbmljYWxUeXBlVG9BdmFpbGFibGVUeXBlQW5kU2NoZW1hID0gKFxuICB0eXBlcywgZm9ybWF0cywgZm9ybWF0LCBzdGF0ZSwgdmFsVHlwZSwgdiwgYXJyYXlPck9iamVjdFByb3BlcnR5TmFtZSxcbiAgcGFyZW50U2NoZW1hLCBzdGF0ZU9ialxuKSA9PiB7XG4gIGNvbnN0IGZybXQgPSBmb3JtYXRzLmdldEF2YWlsYWJsZUZvcm1hdChmb3JtYXQpO1xuICBjb25zdCB7Z2V0VHlwZXNBbmRTY2hlbWFzRm9yU3RhdGUsIGNvbnZlcnRGcm9tVHlwZXNvbiwgdGVzdEludmFsaWR9ID0gZnJtdDtcbiAgY29uc3QgYWxsb3dhYmxlVHlwZXMgPSBnZXRUeXBlc0FuZFNjaGVtYXNGb3JTdGF0ZS5jYWxsKFxuICAgIGZybXQsIHR5cGVzLCBzdGF0ZSwgc3RhdGVPYmouc2NoZW1hQ29udGVudFxuICApPy50eXBlcztcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0tIEd1YXJkICovXG4gIGlmICghYWxsb3dhYmxlVHlwZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgdW5kZWZpbmVkIHR5cGUgZm9yIHN0YXRlJyk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdmFpbGFibGVUeXBlfHVuZGVmaW5lZH1cbiAgICovXG4gIGxldCByZXQ7XG5cbiAgLyoqXG4gICAqIFRocm93cyBhbiBlcnJvciB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBuZXcgdmFsdWUgdHlwZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1ZhbFR5cGUgVGhlIG5ldyB2YWx1ZSB0eXBlIGJlaW5nIHJlY29yZGVkLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gVGhlIGludmFsaWQgRXJyb3IgYmVpbmcgdGhyb3duLlxuICAgKiBAcmV0dXJucyB7bmV2ZXJ9IEFsd2F5cyB0aHJvd3MgaW5zdGVhZCBvZiByZXR1cm5pbmcuXG4gICAqL1xuICBjb25zdCBpc0ludmFsaWQgPSAobmV3VmFsVHlwZSkgPT4ge1xuICAgIGNvbnN0IGVyciA9IC8qKiBAdHlwZSB7RXJyb3IgJiB7bmV3VmFsVHlwZTogc3RyaW5nfX0gKi8gKFxuICAgICAgbmV3IEVycm9yKCdJbnZhbGlkJylcbiAgICApO1xuICAgIGVyci5uZXdWYWxUeXBlID0gbmV3VmFsVHlwZTtcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIGxldCBzY2hlbWE7XG4gIGlmIChjb252ZXJ0RnJvbVR5cGVzb24pIHtcbiAgICBsZXQgbmV3VmFsVHlwZTtcbiAgICBsZXQgbXVzdEJlT3B0aW9uYWw7XG4gICAgbGV0IHNjaGVtYUlkeDtcbiAgICAoe1xuICAgICAgdHlwZTogbmV3VmFsVHlwZSxcbiAgICAgIHNjaGVtYSxcbiAgICAgIHNjaGVtYUlkeCxcbiAgICAgIG11c3RCZU9wdGlvbmFsXG4gICAgfSA9IGNvbnZlcnRGcm9tVHlwZXNvbihcbiAgICAgIHZhbFR5cGUsIHR5cGVzLCB2LCBhcnJheU9yT2JqZWN0UHJvcGVydHlOYW1lLCBwYXJlbnRTY2hlbWEsIHN0YXRlT2JqXG4gICAgKSk7XG4gICAgaWYgKHR5cGVvZiBuZXdWYWxUeXBlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHRlc3RJbnZhbGlkICYmIHRlc3RJbnZhbGlkKG5ld1ZhbFR5cGUsIHYpKSB7XG4gICAgICAgIHJldHVybiBpc0ludmFsaWQobmV3VmFsVHlwZSk7XG4gICAgICB9XG4gICAgICB2YWxUeXBlID0gbmV3VmFsVHlwZTtcbiAgICAgIGlmIChzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuZXdUeXBlOiB2YWxUeXBlLFxuICAgICAgICAgIHNjaGVtYSxcbiAgICAgICAgICBzY2hlbWFJZHgsXG4gICAgICAgICAgbXVzdEJlT3B0aW9uYWxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhbGxvd2FibGVUeXBlcy5zb21lKChhbGxvd2FibGVUeXBlKSA9PiB7XG4gICAgY29uc3QgdHlwZU9iaiA9XG4gICAgICAvKiogQHR5cGUge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5UeXBlT2JqZWN0ICYge2NoaWxkVHlwZXM6IHN0cmluZ1tdfX0gKi8gKFxuICAgICAgICB0eXBlcy5nZXRUeXBlT2JqZWN0KGFsbG93YWJsZVR5cGUpXG4gICAgICApO1xuICAgIGNvbnN0IHtcbiAgICAgIHZhbHVlTWF0Y2gsIHN1cGVyVHlwZSwgY2hpbGRUeXBlc1xuICAgIH0gPSB0eXBlT2JqO1xuICAgIGlmIChcbiAgICAgIChzdXBlclR5cGUgJiYgdmFsdWVNYXRjaCAmJlxuICAgICAgICAvLyBVc2luZywgZS5nLiwgZm9yIGB0cnVlYCBhbmQgYGZhbHNlYCBzdWJ0eXBlc1xuICAgICAgICBzdXBlclR5cGUgPT09IHZhbFR5cGUgJiYgdmFsdWVNYXRjaCh2KSkgfHxcbiAgICAgIChjaGlsZFR5cGVzICYmIGNoaWxkVHlwZXMuaW5jbHVkZXModmFsVHlwZSkpXG4gICAgKSB7XG4gICAgICByZXQgPSBhbGxvd2FibGVUeXBlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICBpZiAocmV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBXZSBydW4gdGhpcyBzZXBhcmF0ZWx5IGZyb20gdGhlIGBjaGlsZFR5cGVzYCBjaGVjayBhYm92ZVxuICAgIC8vICAgIHRvIGVuc3VyZSBgY2hpbGRUeXBlc2AgaGF2ZSBwcmlvcml0eSByZWdhcmRsZXNzIG9mIHBvc2l0aW9uXG4gICAgYWxsb3dhYmxlVHlwZXMuc29tZSgoYWxsb3dhYmxlVHlwZSkgPT4ge1xuICAgICAgaWYgKGFsbG93YWJsZVR5cGUgPT09IHZhbFR5cGUpIHtcbiAgICAgICAgcmV0ID0gYWxsb3dhYmxlVHlwZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gICAgaWYgKHJldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmxvZygnQUFMTExvd2FibGVUeXBlcycsIHN0YXRlLCBhbGxvd2FibGVUeXBlcywgJzo6JywgdmFsVHlwZSk7XG4gICAgICByZXR1cm4gaXNJbnZhbGlkKHZhbFR5cGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIG5ld1R5cGU6IHJldCxcbiAgICBzY2hlbWFcbiAgfTtcbn07XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuLi9mb3JtYXRzLmpzJykuRm9ybWF0fSAqL1xuY29uc3Qgc3RydWN0dXJlZENsb25pbmcgPSB7XG4gIGFzeW5jIGl0ZXJhdGUgKHJlY29yZHMsIHN0YXRlT2JqKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0tIEp1c3QgYSBndWFyZCAqL1xuICAgIGlmICghc3RhdGVPYmouZm9ybWF0KSB7XG4gICAgICBzdGF0ZU9iai5mb3JtYXQgPSAnc3RydWN0dXJlZENsb25pbmcnO1xuICAgIH1cblxuICAgIGNvbnN0IHN0cnVjdHVyZWRDbG9uaW5nRml4ZWQgPSBzdHJ1Y3R1cmVkQ2xvbmluZ1Rocm93aW5nLmZpbHRlcihcbiAgICAgICh0eXBlU3BlY1NldCkgPT4ge1xuICAgICAgICByZXR1cm4gIVtcbiAgICAgICAgICAvLyBOb3QgeWV0IHN1cHBvcnRlZCB3aXRoaW4gSlNPRVxuICAgICAgICAgICdpbWFnZWRhdGEnLFxuICAgICAgICAgICdpbWFnZWJpdG1hcCcsXG4gICAgICAgICAgJ2NyeXB0b2tleScsXG4gICAgICAgICAgJ2RvbXF1YWQnXG4gICAgICAgIF0uc29tZSgocHJvcCkgPT4ge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuaGFzT3duKHR5cGVTcGVjU2V0LCBwcm9wKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcbiAgICBzdHJ1Y3R1cmVkQ2xvbmluZ0ZpeGVkLnNwbGljZShcbiAgICAgIC8vIEFkZCBhZnRlciB1c2VyT2JqZWN0c1xuICAgICAgMSxcbiAgICAgIDAsXG4gICAgICBub25lZGl0YWJsZVxuICAgICk7XG4gICAgY29uc3QgdHlwZXNvbiA9IG5ldyBUeXBlc29uKHtcbiAgICAgIGVuY2Fwc3VsYXRlT2JzZXJ2ZXI6IGVuY2Fwc3VsYXRlT2JzZXJ2ZXIoc3RhdGVPYmopXG4gICAgfSkucmVnaXN0ZXIoc3RydWN0dXJlZENsb25pbmdGaXhlZCk7XG5cbiAgICBhd2FpdCB0eXBlc29uLmVuY2Fwc3VsYXRlQXN5bmMocmVjb3JkcywgbnVsbCwge1xuICAgICAgdGhyb3dPbkJhZFN5bmNUeXBlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgaWYgKHN0YXRlT2JqLmVycm9yKSB7XG4gICAgICB0aHJvdyBzdGF0ZU9iai5lcnJvcjtcbiAgICB9XG4gICAgcmV0dXJuICgvKiogQHR5cGUge1JlcXVpcmVkPGltcG9ydCgnLi4vdHlwZXMuanMnKS5TdGF0ZU9iamVjdD59ICovIChcbiAgICAgIHN0YXRlT2JqXG4gICAgKSk7XG4gIH0sXG4gIGdldFR5cGVzQW5kU2NoZW1hc0ZvclN0YXRlICh0eXBlcywgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgJiYgdHlwZXMuZ2V0Q29udGV4dEluZm8oJ3N0cnVjdHVyZWRDbG9uaW5nJywgc3RhdGUpKSB7XG4gICAgICBjb25zdCB0eXBlc0ZvckZvcm1hdCA9IHRoaXMuZ2V0VHlwZXNBbmRTY2hlbWFzRm9yU3RhdGUodHlwZXMpPy50eXBlcyB8fFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtLSB0eXBlcyBzaG91bGQgYmUgYW4gYXJyYXkgKi9cbiAgICAgICAgW107XG4gICAgICBjb25zdCBjb250ZXh0SW5mbyA9IHR5cGVzLmdldENvbnRleHRJbmZvKCdzdHJ1Y3R1cmVkQ2xvbmluZycsIHN0YXRlKTtcbiAgICAgIGNvbnRleHRJbmZvLmZvckVhY2goKHt0eXBlLCBhZnRlcn0pID0+IHtcbiAgICAgICAgY29uc3QgcHJlY2VkaW5nSWR4ID0gdHlwZXNGb3JGb3JtYXQuaW5kZXhPZihhZnRlcik7XG4gICAgICAgIHR5cGVzRm9yRm9ybWF0LnNwbGljZShwcmVjZWRpbmdJZHggKyAxLCAwLCB0eXBlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZXM6IHR5cGVzRm9yRm9ybWF0LFxuICAgICAgICBzY2hlbWFPYmplY3RzOiBbXVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gVG9kbzogSW50cm9kdWNlIG5ldyBrZXlzICh0byBgVHlwZXMuY29udGV4dHNgPykgd2hpY2ggY291bGQgYmUgdXNlZCB0b1xuICAgIC8vICAgICAgICAgZGV0ZXJtaW5lIGEgZGVsaW1pdGVkIGdyb3VwIG9mIGNoaWxkcmVuIChyYXRoZXJcbiAgICAvLyAgICAgICAgIHRoYW4gbWFudWFsIGV4Y2VwdGlvbiBoYW5kbGluZyBhcyB3ZSBkbyBoZXJlKVxuICAgIGlmIChzdGF0ZSA9PT0gJ2Vycm9yc0FycmF5Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZXM6IFsnZXJyb3InLCAnZXJyb3JzJ10sXG4gICAgICAgIHNjaGVtYU9iamVjdHM6IFtdXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT09ICdmaWxlbGlzdEFycmF5Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZXM6IFsnZmlsZSddLFxuICAgICAgICBzY2hlbWFPYmplY3RzOiBbXVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGVzOiB0aGlzLnR5cGVzKCksXG4gICAgICBzY2hlbWFPYmplY3RzOiBbXVxuICAgIH07XG4gICAgLypcbiAgICAvLyBUaGVzZSBoYXZlIHRoZWlyIGNoaWxkcmVuIGRldGVybWluZWQgaW50ZXJuYWxseSB0byBhcnJheVxuICAgIGlmIChbJ21hcCcsICdzZXQnXS5pbmNsdWRlcyhzdGF0ZSkpIHtyZXR1cm47fVxuICAgICovXG5cbiAgICAvLyBUaGVzZSBoYXZlIHRoZWlyIG93biBpbnRlcm5hbCBudW1lcmljIGNoaWxkcmVuIGluc3RlYWRcbiAgICAvKlxuICAgIGlmIChcbiAgICAgICdpbnQ4YXJyYXknLCAndWludDhhcnJheScsICd1aW50OGNsYW1wZWRhcnJheScsXG4gICAgICAnaW50MTZhcnJheScsICd1aW50MTZhcnJheScsICdpbnQzMmFycmF5JyxcbiAgICAgICd1aW50MzJhcnJheScsICdmbG9hdDMyYXJyYXknLCAnZmxvYXQ2NGFycmF5J1xuICAgICkuaW5jbHVkZXMoc3RhdGUpKSB7cmV0dXJuO31cbiAgICAqL1xuICB9LFxuICB0eXBlcyAoKSB7XG4gICAgY29uc3QganNvblR5cGVzID0ganNvbi50eXBlcygpO1xuICAgIHJlcGxhY2VUeXBlcyhqc29uVHlwZXMsIFtcbiAgICAgIFtcbiAgICAgICAgJ2FycmF5JyxcbiAgICAgICAgLy8gV2UgY2FuIHJlbmFtZSB0byB0aGlzIGluc3RlYWQgb2YgYGFycmF5Tm9uaW5kZXhLZXlzYCBpZiB3ZSBjaGFuZ2VcbiAgICAgICAgLy8gIHR5cGVzb24tcmVnaXN0cnkgbmFtZVxuICAgICAgICAvLyAnc3BhcnNlQXJyYXlzJyxcbiAgICAgICAgJ2FycmF5Tm9uaW5kZXhLZXlzJ1xuICAgICAgXVxuICAgIF0pO1xuICAgIHJldHVybiBbXG4gICAgICAvLyBUaGlzIHR5cGUgaXMgb25seSBmb3IgdGhyb3dpbmcgdXBvbiBjbG9uaW5nIGVycm9yczpcbiAgICAgIC8vICdjaGVja0RhdGFDbG9uZUV4Y2VwdGlvbidcbiAgICAgIC8vIFRoaXMgdHlwZSBtaWdodCBiZSBzdXBwb3J0ZWQgYnkgZXZhbHVhYmxlIEpTIG9yIGNvbmZpZyBwYXNzZWQgaW46XG4gICAgICAvLyAndXNlck9iamVjdCdcbiAgICAgIC4uLmpzb25UeXBlcyxcbiAgICAgICd1bmRlZicsIC8vIEV4cGxpY2l0IHVuZGVmaW5lZCBvbmx5XG4gICAgICAnYmlnaW50JyxcbiAgICAgICdiaWdpbnRPYmplY3QnLFxuICAgICAgJ1NwZWNpYWxOdW1iZXInLCAvLyAnYE5hTmAsIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBgLTBgXG4gICAgICAnZGF0ZScsXG4gICAgICAncmVnZXhwJyxcbiAgICAgICdCb29sZWFuT2JqZWN0JyxcbiAgICAgICdOdW1iZXJPYmplY3QnLFxuICAgICAgJ1N0cmluZ09iamVjdCcsXG4gICAgICAnZXJyb3InLFxuICAgICAgJ2Vycm9ycycsXG4gICAgICAnYmxvYicsXG4gICAgICAnYmxvYkhUTUwnLFxuICAgICAgJ2ZpbGUnLFxuICAgICAgJ3NldCcsXG4gICAgICAnbWFwJyxcbiAgICAgICdmaWxlbGlzdCcsXG4gICAgICAnZG9tZXhjZXB0aW9uJyxcbiAgICAgICdkb21yZWN0JyxcbiAgICAgICdkb21wb2ludCcsXG4gICAgICAnZG9tbWF0cml4JyxcbiAgICAgICdidWZmZXJzb3VyY2UnLFxuICAgICAgJ3Jlc3VycmVjdGFibGUnXG5cbiAgICAgIC8vIE9rLCBidXQgd2lsbCBuZWVkIHNvbWUgd29yayBhbmQvb3IgZGVjaXNpb25zIG9uIGhvdyB0byBwcmVzZW50OlxuICAgICAgLy8gJ2NyeXB0b2tleScsXG4gICAgICAvLyAnZG9tcXVhZCcsXG4gICAgICAvLyAnaW1hZ2VkYXRhJywgJ2ltYWdlYml0bWFwJyxcbiAgICBdO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdHJ1Y3R1cmVkQ2xvbmluZztcbiJdLCJtYXBwaW5ncyI6InFseUJBZVk7QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxjQUFBLEdBZlosT0FDRUUsT0FBTyxDQUFFQyx3QkFBd0IsQ0FBRUMseUJBQXlCLENBQzVEQyxhQUFhLEdBQUksQ0FBQUMsV0FBVyxDQUFFQyxXQUFXLEtBQ3BDLHNCQUFzQixDQUU3QixPQUFRQyxnQkFBZ0IsS0FBTyxtQkFBbUIsQ0FDbEQsT0FDRUMsd0JBQXdCLEtBQ25CLHlCQUF5QixDQUVoQyxNQUFPLENBQUFDLElBQUksS0FBTSxXQUFXLENBRTVCO0FBQ0EsNENBQUFWLGNBQUEsR0FBQVcsQ0FBQSxNQUNFTCxXQUFXLENB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