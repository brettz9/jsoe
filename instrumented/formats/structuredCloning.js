function cov_2i9f9gddfq(){var path="/Users/brett/jsoe/src/formats/structuredCloning.js";var hash="0a6ac435d1ebb85b76e844d5bd25351e67a06437";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/formats/structuredCloning.js",statementMap:{"0":{start:{line:14,column:45},end:{line:20,column:2}},"1":{start:{line:17,column:2},end:{line:19,column:38}},"2":{start:{line:42,column:28},end:{line:298,column:1}},"3":{start:{line:48,column:6},end:{line:48,column:14}},"4":{start:{line:50,column:73},end:{line:50,column:77}},"5":{start:{line:57,column:18},end:{line:57,column:20}},"6":{start:{line:60,column:19},end:{line:60,column:21}},"7":{start:{line:62,column:2},end:{line:297,column:4}},"8":{start:{line:74,column:8},end:{line:74,column:19}},"9":{start:{line:75,column:4},end:{line:77,column:5}},"10":{start:{line:76,column:6},end:{line:76,column:13}},"11":{start:{line:78,column:4},end:{line:80,column:5}},"12":{start:{line:79,column:6},end:{line:79,column:13}},"13":{start:{line:81,column:4},end:{line:83,column:5}},"14":{start:{line:82,column:6},end:{line:82,column:13}},"15":{start:{line:84,column:4},end:{line:86,column:5}},"16":{start:{line:85,column:6},end:{line:85,column:13}},"17":{start:{line:87,column:4},end:{line:91,column:5}},"18":{start:{line:90,column:6},end:{line:90,column:13}},"19":{start:{line:95,column:4},end:{line:97,column:5}},"20":{start:{line:96,column:6},end:{line:96,column:13}},"21":{start:{line:100,column:4},end:{line:102,column:5}},"22":{start:{line:106,column:19},end:{line:106,column:24}},"23":{start:{line:109,column:18},end:{line:112,column:15}},"24":{start:{line:113,column:4},end:{line:141,column:5}},"25":{start:{line:114,column:6},end:{line:114,column:57}},"26":{start:{line:115,column:6},end:{line:115,column:72}},"27":{start:{line:116,column:6},end:{line:121,column:8}},"28":{start:{line:123,column:6},end:{line:140,column:7}},"29":{start:{line:124,column:8},end:{line:135,column:10}},"30":{start:{line:137,column:8},end:{line:137,column:38}},"31":{start:{line:138,column:8},end:{line:138,column:52}},"32":{start:{line:139,column:8},end:{line:139,column:15}},"33":{start:{line:143,column:15},end:{line:143,column:39}},"34":{start:{line:145,column:6},end:{line:145,column:53}},"35":{start:{line:146,column:23},end:{line:146,column:60}},"36":{start:{line:148,column:24},end:{line:152,column:23}},"37":{start:{line:156,column:20},end:{line:157,column:62}},"38":{start:{line:158,column:4},end:{line:160,column:5}},"39":{start:{line:159,column:6},end:{line:159,column:29}},"40":{start:{line:162,column:4},end:{line:204,column:5}},"41":{start:{line:164,column:6},end:{line:186,column:9}},"42":{start:{line:187,column:6},end:{line:190,column:27}},"43":{start:{line:195,column:6},end:{line:202,column:7}},"44":{start:{line:196,column:37},end:{line:201,column:11}},"45":{start:{line:197,column:10},end:{line:200,column:31}},"46":{start:{line:203,column:6},end:{line:203,column:13}},"47":{start:{line:209,column:4},end:{line:296,column:7}},"48":{start:{line:210,column:17},end:{line:210,column:36}},"49":{start:{line:219,column:6},end:{line:221,column:7}},"50":{start:{line:220,column:8},end:{line:220,column:15}},"51":{start:{line:225,column:6},end:{line:235,column:7}},"52":{start:{line:226,column:8},end:{line:229,column:9}},"53":{start:{line:228,column:10},end:{line:228,column:22}},"54":{start:{line:230,column:30},end:{line:230,column:54}},"55":{start:{line:231,column:8},end:{line:232,column:66}},"56":{start:{line:234,column:8},end:{line:234,column:15}},"57":{start:{line:239,column:19},end:{line:254,column:8}},"58":{start:{line:257,column:6},end:{line:259,column:7}},"59":{start:{line:261,column:6},end:{line:274,column:7}},"60":{start:{line:262,column:8},end:{line:267,column:11}},"61":{start:{line:268,column:8},end:{line:273,column:11}},"62":{start:{line:276,column:6},end:{line:295,column:7}},"63":{start:{line:277,column:8},end:{line:282,column:12}},"64":{start:{line:287,column:8},end:{line:294,column:9}},"65":{start:{line:288,column:39},end:{line:293,column:13}},"66":{start:{line:289,column:12},end:{line:292,column:22}},"67":{start:{line:305,column:21},end:{line:309,column:1}},"68":{start:{line:306,column:2},end:{line:308,column:5}},"69":{start:{line:307,column:4},end:{line:307,column:76}},"70":{start:{line:322,column:33},end:{line:399,column:1}},"71":{start:{line:325,column:15},end:{line:325,column:49}},"72":{start:{line:326,column:72},end:{line:326,column:76}},"73":{start:{line:327,column:25},end:{line:329,column:10}},"74":{start:{line:331,column:2},end:{line:333,column:3}},"75":{start:{line:346,column:20},end:{line:351,column:3}},"76":{start:{line:347,column:4},end:{line:347,column:42}},"77":{start:{line:348,column:16},end:{line:348,column:36}},"78":{start:{line:349,column:48},end:{line:349,column:78}},"79":{start:{line:350,column:4},end:{line:350,column:14}},"80":{start:{line:352,column:2},end:{line:360,column:3}},"81":{start:{line:353,column:23},end:{line:353,column:68}},"82":{start:{line:354,column:4},end:{line:359,column:5}},"83":{start:{line:355,column:6},end:{line:357,column:7}},"84":{start:{line:356,column:8},end:{line:356,column:37}},"85":{start:{line:358,column:6},end:{line:358,column:27}},"86":{start:{line:363,column:2},end:{line:382,column:5}},"87":{start:{line:366,column:6},end:{line:366,column:40}},"88":{start:{line:370,column:8},end:{line:370,column:15}},"89":{start:{line:371,column:4},end:{line:379,column:5}},"90":{start:{line:377,column:6},end:{line:377,column:26}},"91":{start:{line:378,column:6},end:{line:378,column:18}},"92":{start:{line:381,column:4},end:{line:381,column:17}},"93":{start:{line:384,column:2},end:{line:397,column:3}},"94":{start:{line:387,column:4},end:{line:393,column:7}},"95":{start:{line:388,column:6},end:{line:391,column:7}},"96":{start:{line:389,column:8},end:{line:389,column:28}},"97":{start:{line:390,column:8},end:{line:390,column:20}},"98":{start:{line:392,column:6},end:{line:392,column:19}},"99":{start:{line:394,column:4},end:{line:396,column:5}},"100":{start:{line:395,column:6},end:{line:395,column:32}},"101":{start:{line:398,column:2},end:{line:398,column:13}},"102":{start:{line:409,column:26},end:{line:541,column:1}},"103":{start:{line:413,column:4},end:{line:415,column:5}},"104":{start:{line:418,column:4},end:{line:451,column:7}},"105":{start:{line:419,column:37},end:{line:431,column:7}},"106":{start:{line:421,column:10},end:{line:429,column:13}},"107":{start:{line:428,column:12},end:{line:428,column:52}},"108":{start:{line:432,column:6},end:{line:437,column:8}},"109":{start:{line:438,column:22},end:{line:440,column:41}},"110":{start:{line:441,column:6},end:{line:441,column:35}},"111":{start:{line:444,column:6},end:{line:450,column:7}},"112":{start:{line:445,column:8},end:{line:445,column:31}},"113":{start:{line:447,column:8},end:{line:449,column:18}},"114":{start:{line:454,column:4},end:{line:467,column:5}},"115":{start:{line:455,column:29},end:{line:457,column:10}},"116":{start:{line:458,column:26},end:{line:458,column:74}},"117":{start:{line:459,column:6},end:{line:462,column:9}},"118":{start:{line:460,column:29},end:{line:460,column:58}},"119":{start:{line:461,column:8},end:{line:461,column:57}},"120":{start:{line:463,column:6},end:{line:466,column:8}},"121":{start:{line:471,column:4},end:{line:476,column:5}},"122":{start:{line:472,column:6},end:{line:475,column:8}},"123":{start:{line:477,column:4},end:{line:482,column:5}},"124":{start:{line:478,column:6},end:{line:481,column:8}},"125":{start:{line:483,column:4},end:{line:486,column:6}},"126":{start:{line:497,column:22},end:{line:497,column:34}},"127":{start:{line:498,column:4},end:{line:504,column:7}},"128":{start:{line:505,column:4},end:{line:539,column:6}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:49},end:{line:16,column:50}},loc:{start:{line:16,column:56},end:{line:20,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:42,column:28},end:{line:42,column:29}},loc:{start:{line:42,column:42},end:{line:298,column:1}},line:42},"2":{name:"(anonymous_2)",decl:{start:{line:62,column:9},end:{line:62,column:10}},loc:{start:{line:62,column:26},end:{line:297,column:3}},line:62},"3":{name:"(anonymous_3)",decl:{start:{line:196,column:56},end:{line:196,column:57}},loc:{start:{line:196,column:66},end:{line:201,column:9}},line:196},"4":{name:"(anonymous_4)",decl:{start:{line:209,column:15},end:{line:209,column:16}},loc:{start:{line:209,column:21},end:{line:296,column:5}},line:209},"5":{name:"(anonymous_5)",decl:{start:{line:225,column:36},end:{line:225,column:37}},loc:{start:{line:225,column:49},end:{line:233,column:7}},line:225},"6":{name:"(anonymous_6)",decl:{start:{line:288,column:58},end:{line:288,column:59}},loc:{start:{line:288,column:68},end:{line:293,column:11}},line:288},"7":{name:"(anonymous_7)",decl:{start:{line:305,column:21},end:{line:305,column:22}},loc:{start:{line:305,column:52},end:{line:309,column:1}},line:305},"8":{name:"(anonymous_8)",decl:{start:{line:306,column:23},end:{line:306,column:24}},loc:{start:{line:306,column:58},end:{line:308,column:3}},line:306},"9":{name:"(anonymous_9)",decl:{start:{line:322,column:33},end:{line:322,column:34}},loc:{start:{line:324,column:5},end:{line:399,column:1}},line:324},"10":{name:"(anonymous_10)",decl:{start:{line:346,column:20},end:{line:346,column:21}},loc:{start:{line:346,column:36},end:{line:351,column:3}},line:346},"11":{name:"(anonymous_11)",decl:{start:{line:363,column:22},end:{line:363,column:23}},loc:{start:{line:363,column:41},end:{line:382,column:3}},line:363},"12":{name:"(anonymous_12)",decl:{start:{line:387,column:24},end:{line:387,column:25}},loc:{start:{line:387,column:43},end:{line:393,column:5}},line:387},"13":{name:"(anonymous_13)",decl:{start:{line:410,column:2},end:{line:410,column:3}},loc:{start:{line:410,column:30},end:{line:452,column:3}},line:410},"14":{name:"(anonymous_14)",decl:{start:{line:418,column:23},end:{line:418,column:24}},loc:{start:{line:418,column:44},end:{line:451,column:5}},line:418},"15":{name:"(anonymous_15)",decl:{start:{line:420,column:8},end:{line:420,column:9}},loc:{start:{line:420,column:25},end:{line:430,column:9}},line:420},"16":{name:"(anonymous_16)",decl:{start:{line:427,column:17},end:{line:427,column:18}},loc:{start:{line:427,column:27},end:{line:429,column:11}},line:427},"17":{name:"(anonymous_17)",decl:{start:{line:453,column:2},end:{line:453,column:3}},loc:{start:{line:453,column:44},end:{line:495,column:3}},line:453},"18":{name:"(anonymous_18)",decl:{start:{line:459,column:26},end:{line:459,column:27}},loc:{start:{line:459,column:45},end:{line:462,column:7}},line:459},"19":{name:"(anonymous_19)",decl:{start:{line:496,column:2},end:{line:496,column:3}},loc:{start:{line:496,column:11},end:{line:540,column:3}},line:496}},branchMap:{"0":{loc:{start:{line:17,column:9},end:{line:19,column:37}},type:"binary-expr",locations:[{start:{line:17,column:9},end:{line:17,column:10}},{start:{line:17,column:14},end:{line:17,column:35}},{start:{line:17,column:39},end:{line:17,column:56}},{start:{line:19,column:10},end:{line:19,column:37}}],line:17},"1":{loc:{start:{line:75,column:4},end:{line:77,column:5}},type:"if",locations:[{start:{line:75,column:4},end:{line:77,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:75},"2":{loc:{start:{line:78,column:4},end:{line:80,column:5}},type:"if",locations:[{start:{line:78,column:4},end:{line:80,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:78},"3":{loc:{start:{line:78,column:8},end:{line:78,column:66}},type:"binary-expr",locations:[{start:{line:78,column:8},end:{line:78,column:29}},{start:{line:78,column:33},end:{line:78,column:66}}],line:78},"4":{loc:{start:{line:81,column:4},end:{line:83,column:5}},type:"if",locations:[{start:{line:81,column:4},end:{line:83,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:81},"5":{loc:{start:{line:81,column:8},end:{line:81,column:72}},type:"binary-expr",locations:[{start:{line:81,column:8},end:{line:81,column:29}},{start:{line:81,column:34},end:{line:81,column:48}},{start:{line:81,column:52},end:{line:81,column:71}}],line:81},"6":{loc:{start:{line:84,column:4},end:{line:86,column:5}},type:"if",locations:[{start:{line:84,column:4},end:{line:86,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:84},"7":{loc:{start:{line:84,column:8},end:{line:84,column:37}},type:"binary-expr",locations:[{start:{line:84,column:8},end:{line:84,column:20}},{start:{line:84,column:24},end:{line:84,column:37}}],line:84},"8":{loc:{start:{line:87,column:4},end:{line:91,column:5}},type:"if",locations:[{start:{line:87,column:4},end:{line:91,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:87},"9":{loc:{start:{line:87,column:8},end:{line:89,column:5}},type:"binary-expr",locations:[{start:{line:87,column:8},end:{line:87,column:30}},{start:{line:88,column:6},end:{line:88,column:25}},{start:{line:88,column:29},end:{line:88,column:56}},{start:{line:88,column:60},end:{line:88,column:80}}],line:87},"10":{loc:{start:{line:95,column:4},end:{line:97,column:5}},type:"if",locations:[{start:{line:95,column:4},end:{line:97,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:95},"11":{loc:{start:{line:95,column:8},end:{line:95,column:56}},type:"binary-expr",locations:[{start:{line:95,column:8},end:{line:95,column:29}},{start:{line:95,column:33},end:{line:95,column:56}}],line:95},"12":{loc:{start:{line:100,column:4},end:{line:102,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:100},"13":{loc:{start:{line:109,column:18},end:{line:112,column:15}},type:"cond-expr",locations:[{start:{line:110,column:8},end:{line:110,column:27}},{start:{line:112,column:8},end:{line:112,column:15}}],line:109},"14":{loc:{start:{line:113,column:4},end:{line:141,column:5}},type:"if",locations:[{start:{line:113,column:4},end:{line:141,column:5}},{start:{line:122,column:11},end:{line:141,column:5}}],line:113},"15":{loc:{start:{line:115,column:16},end:{line:115,column:71}},type:"cond-expr",locations:[{start:{line:115,column:35},end:{line:115,column:51}},{start:{line:115,column:54},end:{line:115,column:71}}],line:115},"16":{loc:{start:{line:146,column:23},end:{line:146,column:60}},type:"cond-expr",locations:[{start:{line:146,column:35},end:{line:146,column:37}},{start:{line:146,column:40},end:{line:146,column:60}}],line:146},"17":{loc:{start:{line:156,column:20},end:{line:157,column:62}},type:"binary-expr",locations:[{start:{line:156,column:20},end:{line:156,column:34}},{start:{line:157,column:6},end:{line:157,column:62}}],line:156},"18":{loc:{start:{line:158,column:4},end:{line:160,column:5}},type:"if",locations:[{start:{line:158,column:4},end:{line:160,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:158},"19":{loc:{start:{line:162,column:4},end:{line:204,column:5}},type:"if",locations:[{start:{line:162,column:4},end:{line:204,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:162},"20":{loc:{start:{line:195,column:6},end:{line:202,column:7}},type:"if",locations:[{start:{line:195,column:6},end:{line:202,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:195},"21":{loc:{start:{line:219,column:6},end:{line:221,column:7}},type:"if",locations:[{start:{line:219,column:6},end:{line:221,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:219},"22":{loc:{start:{line:219,column:10},end:{line:219,column:50}},type:"binary-expr",locations:[{start:{line:219,column:10},end:{line:219,column:13}},{start:{line:219,column:17},end:{line:219,column:50}}],line:219},"23":{loc:{start:{line:225,column:6},end:{line:235,column:7}},type:"if",locations:[{start:{line:225,column:6},end:{line:235,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:225},"24":{loc:{start:{line:225,column:10},end:{line:233,column:8}},type:"binary-expr",locations:[{start:{line:225,column:10},end:{line:225,column:18}},{start:{line:225,column:22},end:{line:233,column:8}}],line:225},"25":{loc:{start:{line:226,column:8},end:{line:229,column:9}},type:"if",locations:[{start:{line:226,column:8},end:{line:229,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:226},"26":{loc:{start:{line:226,column:12},end:{line:227,column:54}},type:"binary-expr",locations:[{start:{line:226,column:12},end:{line:226,column:31}},{start:{line:227,column:11},end:{line:227,column:25}},{start:{line:227,column:29},end:{line:227,column:53}}],line:226},"27":{loc:{start:{line:231,column:16},end:{line:232,column:64}},type:"binary-expr",locations:[{start:{line:231,column:16},end:{line:231,column:29}},{start:{line:231,column:33},end:{line:231,column:47}},{start:{line:232,column:10},end:{line:232,column:64}}],line:231},"28":{loc:{start:{line:257,column:6},end:{line:259,column:7}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:257},"29":{loc:{start:{line:261,column:6},end:{line:274,column:7}},type:"if",locations:[{start:{line:261,column:6},end:{line:274,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:261},"30":{loc:{start:{line:276,column:6},end:{line:295,column:7}},type:"if",locations:[{start:{line:276,column:6},end:{line:295,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:276},"31":{loc:{start:{line:287,column:8},end:{line:294,column:9}},type:"if",locations:[{start:{line:287,column:8},end:{line:294,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:287},"32":{loc:{start:{line:331,column:2},end:{line:333,column:3}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:331},"33":{loc:{start:{line:352,column:2},end:{line:360,column:3}},type:"if",locations:[{start:{line:352,column:2},end:{line:360,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:352},"34":{loc:{start:{line:354,column:4},end:{line:359,column:5}},type:"if",locations:[{start:{line:354,column:4},end:{line:359,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:354},"35":{loc:{start:{line:355,column:6},end:{line:357,column:7}},type:"if",locations:[{start:{line:355,column:6},end:{line:357,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:355},"36":{loc:{start:{line:355,column:10},end:{line:355,column:51}},type:"binary-expr",locations:[{start:{line:355,column:10},end:{line:355,column:21}},{start:{line:355,column:25},end:{line:355,column:51}}],line:355},"37":{loc:{start:{line:371,column:4},end:{line:379,column:5}},type:"if",locations:[{start:{line:371,column:4},end:{line:379,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:371},"38":{loc:{start:{line:372,column:6},end:{line:375,column:50}},type:"binary-expr",locations:[{start:{line:372,column:7},end:{line:372,column:16}},{start:{line:372,column:20},end:{line:372,column:30}},{start:{line:374,column:8},end:{line:374,column:29}},{start:{line:374,column:33},end:{line:374,column:46}},{start:{line:375,column:7},end:{line:375,column:17}},{start:{line:375,column:21},end:{line:375,column:49}}],line:372},"39":{loc:{start:{line:384,column:2},end:{line:397,column:3}},type:"if",locations:[{start:{line:384,column:2},end:{line:397,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:384},"40":{loc:{start:{line:388,column:6},end:{line:391,column:7}},type:"if",locations:[{start:{line:388,column:6},end:{line:391,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:388},"41":{loc:{start:{line:394,column:4},end:{line:396,column:5}},type:"if",locations:[{start:{line:394,column:4},end:{line:396,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:394},"42":{loc:{start:{line:413,column:4},end:{line:415,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:413},"43":{loc:{start:{line:444,column:6},end:{line:450,column:7}},type:"if",locations:[{start:{line:444,column:6},end:{line:450,column:7}},{start:{line:446,column:13},end:{line:450,column:7}}],line:444},"44":{loc:{start:{line:454,column:4},end:{line:467,column:5}},type:"if",locations:[{start:{line:454,column:4},end:{line:467,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:454},"45":{loc:{start:{line:454,column:8},end:{line:454,column:65}},type:"binary-expr",locations:[{start:{line:454,column:8},end:{line:454,column:13}},{start:{line:454,column:17},end:{line:454,column:65}}],line:454},"46":{loc:{start:{line:455,column:29},end:{line:457,column:10}},type:"binary-expr",locations:[{start:{line:455,column:29},end:{line:455,column:74}}],line:455},"47":{loc:{start:{line:471,column:4},end:{line:476,column:5}},type:"if",locations:[{start:{line:471,column:4},end:{line:476,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:471},"48":{loc:{start:{line:477,column:4},end:{line:482,column:5}},type:"if",locations:[{start:{line:477,column:4},end:{line:482,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:477}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},b:{"0":[0,0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0],"27":[0,0,0],"28":[0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0,0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0],"47":[0,0],"48":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0a6ac435d1ebb85b76e844d5bd25351e67a06437"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2i9f9gddfq=function(){return actualCoverage;};}return actualCoverage;}cov_2i9f9gddfq();import{Typeson,unescapeKeyPathComponent,structuredCloningThrowing,resurrectable as noneditable,toStringTag}from'../vendor-imports.js';import{buildTypeChoices}from'../typeChoices.js';import{typesonPathToJSONPointer}from'../utils/jsonPointer.js';import json from'./json.js';// We modify resurrectable in hopes an including application doesn't need it
/** @type {import('typeson').TypeSpecSet} */cov_2i9f9gddfq().s[0]++;noneditable.resurrectable.test=/** @type {import('typeson').Tester} */x=>{cov_2i9f9gddfq().f[0]++;cov_2i9f9gddfq().s[1]++;return(cov_2i9f9gddfq().b[0][0]++,x)&&(cov_2i9f9gddfq().b[0][1]++,typeof x==='object')&&(cov_2i9f9gddfq().b[0][2]++,!Array.isArray(x))&&(cov_2i9f9gddfq().b[0][3]++,// Could be a user object with a string tag, but we can't tell
toStringTag(x)!=='Object');};/**
 * @typedef {(info: {
 *   propName: string,
 *   type: import('../types.js').AvailableType,
 *   value: import('../formats.js').StructuredCloneValue,
 *   bringIntoFocus?: boolean,
 *   setAValue?: boolean,
 *   schemaContent?: import('../formats/schema.js').ZodexSchema,
 *   schemaState?: import('../types.js').GetPossibleSchemasForPathAndType
 * }) => HTMLElement|null} AddAndSetArrayElement
 */ /**
 * @typedef {import('typeson-registry').EncapsulateObserver} EncapsulateObserver
 */ /**
 * @param {import('../types.js').StateObject} stateObj
 * @returns {EncapsulateObserver}
 */cov_2i9f9gddfq().s[2]++;const encapsulateObserver=stateObj=>{cov_2i9f9gddfq().f[1]++;const{typeNamespace,readonly,format:frmt,schemaContent,formats,types,getPossibleSchemasForPathAndType}=(cov_2i9f9gddfq().s[3]++,stateObj);const format=(/** @type {import('../formats.js').AvailableFormat} */cov_2i9f9gddfq().s[4]++,frmt);/**
   * @type {{[key: string]: HTMLElement & {
   *   $addAndSetArrayElement: AddAndSetArrayElement
   * }}}
   */const parents=(cov_2i9f9gddfq().s[5]++,{});/** @type {string[]} */const mapPaths=(cov_2i9f9gddfq().s[6]++,[]);cov_2i9f9gddfq().s[7]++;return observerObj=>{cov_2i9f9gddfq().f[2]++;const{type,cyclic,keypath,value,replaced,cyclicKeypath,endIterateIn,endIterateOwn,endIterateUnsetNumeric,clone}=(cov_2i9f9gddfq().s[8]++,observerObj);cov_2i9f9gddfq().s[9]++;if('replaced'in observerObj){cov_2i9f9gddfq().b[1][0]++;cov_2i9f9gddfq().s[10]++;return;}else{cov_2i9f9gddfq().b[1][1]++;}cov_2i9f9gddfq().s[11]++;if((cov_2i9f9gddfq().b[3][0]++,cyclic==='readonly')&&(cov_2i9f9gddfq().b[3][1]++,!Array.isArray(observerObj.value))){cov_2i9f9gddfq().b[2][0]++;cov_2i9f9gddfq().s[12]++;return;}else{cov_2i9f9gddfq().b[2][1]++;}cov_2i9f9gddfq().s[13]++;if((cov_2i9f9gddfq().b[5][0]++,cyclic==='readonly')&&((cov_2i9f9gddfq().b[5][1]++,type==='set')||(cov_2i9f9gddfq().b[5][2]++,type==='filelist'))){cov_2i9f9gddfq().b[4][0]++;cov_2i9f9gddfq().s[14]++;return;}else{cov_2i9f9gddfq().b[4][1]++;}cov_2i9f9gddfq().s[15]++;if((cov_2i9f9gddfq().b[7][0]++,endIterateIn)||(cov_2i9f9gddfq().b[7][1]++,endIterateOwn)){cov_2i9f9gddfq().b[6][0]++;cov_2i9f9gddfq().s[16]++;return;}else{cov_2i9f9gddfq().b[6][1]++;}cov_2i9f9gddfq().s[17]++;if((cov_2i9f9gddfq().b[9][0]++,endIterateUnsetNumeric)||(cov_2i9f9gddfq().b[9][1]++,clone===undefined)&&(cov_2i9f9gddfq().b[9][2]++,cyclicKeypath===undefined)&&(cov_2i9f9gddfq().b[9][3]++,Array.isArray(value))){cov_2i9f9gddfq().b[8][0]++;cov_2i9f9gddfq().s[18]++;return;}else{cov_2i9f9gddfq().b[8][1]++;}// What other situations is this firing twice, and it
//   shouldn't reach here?
cov_2i9f9gddfq().s[19]++;if((cov_2i9f9gddfq().b[11][0]++,observerObj.replacing)&&(cov_2i9f9gddfq().b[11][1]++,type==='negativeZero')){cov_2i9f9gddfq().b[10][0]++;cov_2i9f9gddfq().s[20]++;return;}else{cov_2i9f9gddfq().b[10][1]++;}/* istanbul ignore if -- Not part of format */cov_2i9f9gddfq().s[21]++;if(type==='sparseUndefined'){// We'll handle otherwise
return;}else{cov_2i9f9gddfq().b[12][0]++;}/** @type {import('../types.js').AvailableType} */let newType;let newValue=(cov_2i9f9gddfq().s[22]++,value);/* schema: || format.startsWith('schema-') */const state=(cov_2i9f9gddfq().s[23]++,format==='structuredCloning'?(cov_2i9f9gddfq().b[13][0]++,'arrayNonindexKeys'// ? 'sparseArrays'
):(cov_2i9f9gddfq().b[13][1]++,'array'));cov_2i9f9gddfq().s[24]++;if(typeof cyclicKeypath==='string'){cov_2i9f9gddfq().b[14][0]++;cov_2i9f9gddfq().s[25]++;newValue=typesonPathToJSONPointer(cyclicKeypath);cov_2i9f9gddfq().s[26]++;newType=type==='array'?(cov_2i9f9gddfq().b[15][0]++,'arrayReference'):(cov_2i9f9gddfq().b[15][1]++,'objectReference');cov_2i9f9gddfq().s[27]++;newType=canonicalToAvailableType(/** @type {import('../types.js').default} */types,/** @type {import('../formats.js').default} */formats,format,state,newType,value,stateObj.schemaContent);// Todo (low): Add accurate state for second argument
}else{cov_2i9f9gddfq().b[14][1]++;cov_2i9f9gddfq().s[28]++;try{cov_2i9f9gddfq().s[29]++;newType=canonicalToAvailableType(/** @type {import('../types.js').default} */types,/** @type {import('../formats.js').default} */formats,format,state,/**
           * @type {import('../types.js').AvailableType}
           */type,value,stateObj.schemaContent);// Todo (low): Add state for second argument
}catch(err){cov_2i9f9gddfq().s[30]++;console.log('err',type,err);cov_2i9f9gddfq().s[31]++;stateObj.error=/** @type {Error} */err;cov_2i9f9gddfq().s[32]++;return;}}const li=(cov_2i9f9gddfq().s[33]++,keypath.lastIndexOf('.'));const arrayOrObjectPropertyName=(cov_2i9f9gddfq().s[34]++,unescapeKeyPathComponent(keypath.slice(li+1)));const parentPath=(cov_2i9f9gddfq().s[35]++,li===-1?(cov_2i9f9gddfq().b[16][0]++,''):(cov_2i9f9gddfq().b[16][1]++,keypath.slice(0,li)));const hasChildren=(cov_2i9f9gddfq().s[36]++,['array','object','set','map',// 'sparseArrays',
'arrayNonindexKeys'].includes(newType));// Maps are followed up by arrays which we don't want as such;
//  we track the paths to avoid reporting these child arrays
const mapType=(cov_2i9f9gddfq().s[37]++,(cov_2i9f9gddfq().b[17][0]++,type==='map')&&(cov_2i9f9gddfq().b[17][1]++,Object.prototype.toString.call(value)==='[object Map]'));cov_2i9f9gddfq().s[38]++;if(mapType){cov_2i9f9gddfq().b[18][0]++;cov_2i9f9gddfq().s[39]++;mapPaths.push(keypath);}else{cov_2i9f9gddfq().b[18][1]++;}cov_2i9f9gddfq().s[40]++;if(!stateObj.rootUI){cov_2i9f9gddfq().b[19][0]++;cov_2i9f9gddfq().s[41]++;// console.log('vvvv0', newType, newValue);
stateObj.rootUI=types?.getUIForModeAndType({readonly,typeNamespace,type:newType,bringIntoFocus:false,buildTypeChoices,format,schemaContent,schemaState:getPossibleSchemasForPathAndType,/* schema:
        &&
        getPossibleSchemasForPathAndType({
          keypath,
          parentPath: '',
          valueType: newType
        }),
        */value:newValue,hasValue:true,// Not currently in use but may be convenient for a
//     type wanting the serialized data
replaced});cov_2i9f9gddfq().s[42]++;parents['']=/**
      * @type {HTMLElement &
      *   {$addAndSetArrayElement: AddAndSetArrayElement}}
      */stateObj.rootUI;// Since we're skipping the array elements, we need to add the
//   map element to the array index where the array children
//   will be found (which we do want)
cov_2i9f9gddfq().s[43]++;if(mapType){cov_2i9f9gddfq().b[20][0]++;cov_2i9f9gddfq().s[44]++;/** @type {Map<any, any>} */[...value].forEach((_,i)=>{cov_2i9f9gddfq().f[3]++;cov_2i9f9gddfq().s[45]++;parents[i]=/**
          * @type {HTMLElement &
          *   {$addAndSetArrayElement: AddAndSetArrayElement}}
          */stateObj.rootUI;});}else{cov_2i9f9gddfq().b[20][1]++;}cov_2i9f9gddfq().s[46]++;return;}else{cov_2i9f9gddfq().b[19][1]++;}// Todo (low): If could be async, use async encapsulate method
// Todo (low): Handle `awaitingTypesonPromise` with place-holder
// Todo (low): Handle `resolvingTypesonPromise` to replace place-holder
cov_2i9f9gddfq().s[47]++;setTimeout(()=>{cov_2i9f9gddfq().f[4]++;const ui=(cov_2i9f9gddfq().s[48]++,parents[parentPath]);// These errors occur, e.g., if `replacing` not first added and then
//   a converted object gets treated as the root UI (e.g., for `regexp`
//   or `blobHTML` at root)
// If there isn't a problem in Typeson with transmitting the `readonly`
//   status recursively down the object (should be no need to check
//   for circulars there?), could change Typeson to report `readonly`
//   for the nested items, in which case, we could block out `readonly`
//   instead of doing this here
cov_2i9f9gddfq().s[49]++;if((cov_2i9f9gddfq().b[22][0]++,!ui)||(cov_2i9f9gddfq().b[22][1]++,!('$addAndSetArrayElement'in ui))){cov_2i9f9gddfq().b[21][0]++;cov_2i9f9gddfq().s[50]++;return;}else{cov_2i9f9gddfq().b[21][1]++;}// Skip the array structures immediately following the Map,
//   as map needs to handle
cov_2i9f9gddfq().s[51]++;if((cov_2i9f9gddfq().b[24][0]++,!mapType)&&(cov_2i9f9gddfq().b[24][1]++,mapPaths.some(mapPath=>{cov_2i9f9gddfq().f[5]++;cov_2i9f9gddfq().s[52]++;if((cov_2i9f9gddfq().b[26][0]++,mapPath===keypath)||(cov_2i9f9gddfq().b[26][1]++,mapPath==='')&&(cov_2i9f9gddfq().b[26][2]++,/^\d+$/u.test(keypath))){cov_2i9f9gddfq().b[25][0]++;cov_2i9f9gddfq().s[53]++;return true;}else{cov_2i9f9gddfq().b[25][1]++;}const trailingIndex=(cov_2i9f9gddfq().s[54]++,keypath.match(/\.\d+$/u));cov_2i9f9gddfq().s[55]++;return(cov_2i9f9gddfq().b[27][0]++,trailingIndex)&&(cov_2i9f9gddfq().b[27][1]++,mapPath!=='')&&(cov_2i9f9gddfq().b[27][2]++,keypath.slice(0,-trailingIndex[0].length)===mapPath);}))){cov_2i9f9gddfq().b[23][0]++;cov_2i9f9gddfq().s[56]++;return;}else{cov_2i9f9gddfq().b[23][1]++;}// console.log('vvvv', newType, '::', newValue, '::', newValue?.cause);
const root=(cov_2i9f9gddfq().s[57]++,ui.$addAndSetArrayElement({propName:arrayOrObjectPropertyName,type:newType,value:newValue,bringIntoFocus:false,schemaContent,schemaState:getPossibleSchemasForPathAndType/* schema:
          && getPossibleSchemasForPathAndType({
            keypath,
            parentPath,
            arrayOrObjectPropertyName,
            valueType: newType
          })
        */}));/* istanbul ignore if -- Guard for `null` return */cov_2i9f9gddfq().s[58]++;if(!root){return;}else{cov_2i9f9gddfq().b[28][0]++;}cov_2i9f9gddfq().s[59]++;if(!readonly){cov_2i9f9gddfq().b[29][0]++;cov_2i9f9gddfq().s[60]++;types?.setValue({type:newType,// eslint-disable-next-line object-shorthand -- TS
root:(/** @type {HTMLDivElement} */root),value:newValue});cov_2i9f9gddfq().s[61]++;types?.validate({type:newType,// eslint-disable-next-line object-shorthand -- TS
root:(/** @type {HTMLDivElement} */root),topRoot:(/** @type {HTMLDivElement} */stateObj.rootUI)});}else{cov_2i9f9gddfq().b[29][1]++;}cov_2i9f9gddfq().s[62]++;if(hasChildren){cov_2i9f9gddfq().b[30][0]++;cov_2i9f9gddfq().s[63]++;parents[keypath]=/**
          * @type {HTMLElement &
          *   {$addAndSetArrayElement: AddAndSetArrayElement}}
          */root;// Since we're skipping the array elements, we need to add the
//   map element to the array index where the array children
//   will be found (which we do want)
cov_2i9f9gddfq().s[64]++;if(mapType){cov_2i9f9gddfq().b[31][0]++;cov_2i9f9gddfq().s[65]++;/** @type {Map<any, any>} */[...value].forEach((_,i)=>{cov_2i9f9gddfq().f[6]++;cov_2i9f9gddfq().s[66]++;parents[`${keypath}.${i}`]=/**
            * @type {HTMLElement &
            *   {$addAndSetArrayElement: AddAndSetArrayElement}}
            */root;});}else{cov_2i9f9gddfq().b[31][1]++;}}else{cov_2i9f9gddfq().b[30][1]++;}});};};/**
 * @param {string[]} originTypes
 * @param {[originType: string, replacementType: string][]} replacements
 * @returns {void}
 */cov_2i9f9gddfq().s[67]++;const replaceTypes=(originTypes,replacements)=>{cov_2i9f9gddfq().f[7]++;cov_2i9f9gddfq().s[68]++;replacements.forEach(([originType,replacementType])=>{cov_2i9f9gddfq().f[8]++;cov_2i9f9gddfq().s[69]++;originTypes.splice(originTypes.indexOf(originType),1,replacementType);});};/**
 * @param {import('../types.js').default} types
 * @param {import('../formats.js').default} formats
 * @param {import('../formats.js').AvailableFormat} format
 * @param {string} state
 * @param {import('../types.js').AvailableType} valType
 * @param {import('../formats.js').StructuredCloneValue} v
 * @param {import('zodex').SzType|undefined} schemaContent
 * @throws {Error}
 * @returns {import('../types.js').AvailableType}
 */cov_2i9f9gddfq().s[70]++;const canonicalToAvailableType=(types,formats,format,state,valType,v,schemaContent)=>{cov_2i9f9gddfq().f[9]++;const frmt=(cov_2i9f9gddfq().s[71]++,formats.getAvailableFormat(format));const{getTypesAndSchemasForState,convertFromTypeson,testInvalid}=(cov_2i9f9gddfq().s[72]++,frmt);const allowableTypes=(cov_2i9f9gddfq().s[73]++,getTypesAndSchemasForState.call(frmt,types,state,schemaContent)?.types);/* istanbul ignore if -- Guard */cov_2i9f9gddfq().s[74]++;if(!allowableTypes){throw new Error('Unexpected undefined type for state');}else{cov_2i9f9gddfq().b[32][0]++;}/**
   * @type {import('../types.js').AvailableType|undefined}
   */let ret;// console.log('format, state, valType, v', format, state, valType, v);
/**
   * @param {string} newValType
   * @throws {Error}
   * @returns {never}
   */cov_2i9f9gddfq().s[75]++;const isInvalid=newValType=>{cov_2i9f9gddfq().f[10]++;cov_2i9f9gddfq().s[76]++;console.log('newValType',newValType);const err=(cov_2i9f9gddfq().s[77]++,new Error('Invalid'));/** @type {Error & {newValType: string}} */cov_2i9f9gddfq().s[78]++;err.newValType=newValType;cov_2i9f9gddfq().s[79]++;throw err;};cov_2i9f9gddfq().s[80]++;if(convertFromTypeson){cov_2i9f9gddfq().b[33][0]++;const newValType=(cov_2i9f9gddfq().s[81]++,convertFromTypeson(valType,v,schemaContent));cov_2i9f9gddfq().s[82]++;if(typeof newValType==='string'){cov_2i9f9gddfq().b[34][0]++;cov_2i9f9gddfq().s[83]++;if((cov_2i9f9gddfq().b[36][0]++,testInvalid)&&(cov_2i9f9gddfq().b[36][1]++,testInvalid(newValType,v))){cov_2i9f9gddfq().b[35][0]++;cov_2i9f9gddfq().s[84]++;return isInvalid(newValType);}else{cov_2i9f9gddfq().b[35][1]++;}cov_2i9f9gddfq().s[85]++;valType=newValType;}else{cov_2i9f9gddfq().b[34][1]++;}}else{cov_2i9f9gddfq().b[33][1]++;}// console.log('ret', ret);
cov_2i9f9gddfq().s[86]++;allowableTypes.some(allowableType=>{cov_2i9f9gddfq().f[11]++;// eslint-disable-next-line @stylistic/max-len -- Long
const typeObj=(/** @type {import('../types.js').TypeObject & {childTypes: string[]}} */cov_2i9f9gddfq().s[87]++,types.getTypeObject(allowableType));const{valueMatch,superType,childTypes}=(cov_2i9f9gddfq().s[88]++,typeObj);cov_2i9f9gddfq().s[89]++;if((cov_2i9f9gddfq().b[38][0]++,superType)&&(cov_2i9f9gddfq().b[38][1]++,valueMatch)&&(cov_2i9f9gddfq().b[38][2]++,// Currently using for `true` and `false`
superType===valType)&&(cov_2i9f9gddfq().b[38][3]++,valueMatch(v))||(cov_2i9f9gddfq().b[38][4]++,childTypes)&&(cov_2i9f9gddfq().b[38][5]++,childTypes.includes(valType))){cov_2i9f9gddfq().b[37][0]++;cov_2i9f9gddfq().s[90]++;ret=allowableType;cov_2i9f9gddfq().s[91]++;return true;}else{cov_2i9f9gddfq().b[37][1]++;}cov_2i9f9gddfq().s[92]++;return false;});// console.log('ret2', ret);
cov_2i9f9gddfq().s[93]++;if(ret===undefined){cov_2i9f9gddfq().b[39][0]++;cov_2i9f9gddfq().s[94]++;// We run this separately from the `childTypes` check above
//    to ensure `childTypes` have priority regardless of position
allowableTypes.some(allowableType=>{cov_2i9f9gddfq().f[12]++;cov_2i9f9gddfq().s[95]++;if(allowableType===valType){cov_2i9f9gddfq().b[40][0]++;cov_2i9f9gddfq().s[96]++;ret=allowableType;cov_2i9f9gddfq().s[97]++;return true;}else{cov_2i9f9gddfq().b[40][1]++;}cov_2i9f9gddfq().s[98]++;return false;});cov_2i9f9gddfq().s[99]++;if(ret===undefined){cov_2i9f9gddfq().b[41][0]++;cov_2i9f9gddfq().s[100]++;return isInvalid(valType);}else{cov_2i9f9gddfq().b[41][1]++;}}else{cov_2i9f9gddfq().b[39][1]++;}cov_2i9f9gddfq().s[101]++;return ret;};/**
 * @callback FormatIterator
 * @param {import('../formats.js').StructuredCloneValue} records
 * @param {import('../types.js').StateObject} stateObj
 * @returns {Promise<Element>}
 */ /** @type {import('../formats.js').Format} */const structuredCloning=(cov_2i9f9gddfq().s[102]++,{iterate(records,stateObj){cov_2i9f9gddfq().f[13]++;cov_2i9f9gddfq().s[103]++;// console.log('records', records);
/* istanbul ignore if -- Just a guard */if(!stateObj.format){stateObj.format='structuredCloning';}else{cov_2i9f9gddfq().b[42][0]++;}// Todo: Replace this with async typeson?
// eslint-disable-next-line promise/avoid-new
cov_2i9f9gddfq().s[104]++;return new Promise((resolve,reject)=>{cov_2i9f9gddfq().f[14]++;const structuredCloningFixed=(cov_2i9f9gddfq().s[105]++,structuredCloningThrowing.filter(typeSpecSet=>{cov_2i9f9gddfq().f[15]++;cov_2i9f9gddfq().s[106]++;return![// Not yet supported within JSOE
'imagedata','imagebitmap','cryptokey','domquad'].some(prop=>{cov_2i9f9gddfq().f[16]++;cov_2i9f9gddfq().s[107]++;return Object.hasOwn(typeSpecSet,prop);});}));cov_2i9f9gddfq().s[108]++;structuredCloningFixed.splice(// Add after userObjects
1,0,noneditable);const typeson=(cov_2i9f9gddfq().s[109]++,new Typeson({encapsulateObserver:encapsulateObserver(stateObj)}).register(structuredCloningFixed));cov_2i9f9gddfq().s[110]++;typeson.encapsulate(records);// Todo (low): We might want to run async encapsulate for
//   async types (and put this after Promise resolves)
cov_2i9f9gddfq().s[111]++;if(stateObj.error){cov_2i9f9gddfq().b[43][0]++;cov_2i9f9gddfq().s[112]++;reject(stateObj.error);}else{cov_2i9f9gddfq().b[43][1]++;cov_2i9f9gddfq().s[113]++;resolve(/** @type {Required<import('../types.js').StateObject>} */stateObj.rootUI);}});},getTypesAndSchemasForState(types,state){cov_2i9f9gddfq().f[17]++;cov_2i9f9gddfq().s[114]++;if((cov_2i9f9gddfq().b[45][0]++,state)&&(cov_2i9f9gddfq().b[45][1]++,types.getContextInfo('structuredCloning',state))){cov_2i9f9gddfq().b[44][0]++;const typesForFormat=(cov_2i9f9gddfq().s[115]++,(cov_2i9f9gddfq().b[46][0]++,this.getTypesAndSchemasForState(types)?.types)||/* istanbul ignore next -- types should be an array */[]);const contextInfo=(cov_2i9f9gddfq().s[116]++,types.getContextInfo('structuredCloning',state));cov_2i9f9gddfq().s[117]++;contextInfo.forEach(({type,after})=>{cov_2i9f9gddfq().f[18]++;const precedingIdx=(cov_2i9f9gddfq().s[118]++,typesForFormat.indexOf(after));cov_2i9f9gddfq().s[119]++;typesForFormat.splice(precedingIdx+1,0,type);});cov_2i9f9gddfq().s[120]++;return{types:typesForFormat,schemaObjects:[]};}else{cov_2i9f9gddfq().b[44][1]++;}// Todo: Could we implement schemas here by introducing new keys to
//         `Types.contexts` which could be used rather than manual
//         handling to determine a delimited group of children
cov_2i9f9gddfq().s[121]++;if(state==='errorsArray'){cov_2i9f9gddfq().b[47][0]++;cov_2i9f9gddfq().s[122]++;return{types:['error','errors'],schemaObjects:[]};}else{cov_2i9f9gddfq().b[47][1]++;}cov_2i9f9gddfq().s[123]++;if(state==='filelistArray'){cov_2i9f9gddfq().b[48][0]++;cov_2i9f9gddfq().s[124]++;return{types:['file'],schemaObjects:[]};}else{cov_2i9f9gddfq().b[48][1]++;}cov_2i9f9gddfq().s[125]++;return{types:this.types(),schemaObjects:[]};/*
    // Todo (low): These need to specify their own inner contexts
    if (['map', 'set'].includes(state)) {return;}
    if ('int8array', 'uint8array', 'uint8clampedarray',
      'int16array', 'uint16array', 'int32array',
      'uint32array', 'float32array', 'float64array'
    ).includes(state)) {return;}
    */},types(){cov_2i9f9gddfq().f[19]++;const jsonTypes=(cov_2i9f9gddfq().s[126]++,json.types());cov_2i9f9gddfq().s[127]++;replaceTypes(jsonTypes,[['array',// 'sparseArrays',
'arrayNonindexKeys']]);cov_2i9f9gddfq().s[128]++;return[// This type is only for throwing upon cloning errors:
// 'checkDataCloneException'
// This type might be supported by evaluable JS or config passed in:
// 'userObject'
...jsonTypes,'undef',// Explicit undefined only
'bigint','bigintObject','SpecialNumber',// '`NaN`, `Infinity`, `-Infinity`, `-0`
'date','regexp','BooleanObject','NumberObject','StringObject','error','errors','blob','blobHTML','file','set','map','filelist','domexception','domrect','dompoint','dommatrix','buffersource','resurrectable'// Ok, but will need some work and/or decisions on how to present:
// 'cryptokey',
// 'domquad',
// 'imagedata', 'imagebitmap',
];}});export default structuredCloning;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,