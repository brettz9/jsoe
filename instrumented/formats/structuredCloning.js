function cov_2i9f9gddfq(){var path="/Users/brett/jsoe/src/formats/structuredCloning.js";var hash="1c8e0ba39925755812d1630728e1a11e535aae6f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/formats/structuredCloning.js",statementMap:{"0":{start:{line:14,column:45},end:{line:20,column:2}},"1":{start:{line:17,column:2},end:{line:19,column:38}},"2":{start:{line:45,column:28},end:{line:306,column:1}},"3":{start:{line:50,column:6},end:{line:50,column:14}},"4":{start:{line:52,column:73},end:{line:52,column:77}},"5":{start:{line:60,column:18},end:{line:60,column:20}},"6":{start:{line:65,column:24},end:{line:65,column:26}},"7":{start:{line:68,column:19},end:{line:68,column:21}},"8":{start:{line:70,column:2},end:{line:305,column:4}},"9":{start:{line:82,column:8},end:{line:82,column:19}},"10":{start:{line:83,column:4},end:{line:85,column:5}},"11":{start:{line:84,column:6},end:{line:84,column:13}},"12":{start:{line:86,column:4},end:{line:88,column:5}},"13":{start:{line:87,column:6},end:{line:87,column:13}},"14":{start:{line:89,column:4},end:{line:91,column:5}},"15":{start:{line:90,column:6},end:{line:90,column:13}},"16":{start:{line:92,column:4},end:{line:94,column:5}},"17":{start:{line:93,column:6},end:{line:93,column:13}},"18":{start:{line:95,column:4},end:{line:99,column:5}},"19":{start:{line:98,column:6},end:{line:98,column:13}},"20":{start:{line:103,column:4},end:{line:105,column:5}},"21":{start:{line:104,column:6},end:{line:104,column:13}},"22":{start:{line:108,column:4},end:{line:110,column:5}},"23":{start:{line:114,column:19},end:{line:114,column:24}},"24":{start:{line:117,column:18},end:{line:120,column:15}},"25":{start:{line:122,column:15},end:{line:122,column:39}},"26":{start:{line:124,column:6},end:{line:124,column:53}},"27":{start:{line:125,column:23},end:{line:125,column:60}},"28":{start:{line:128,column:4},end:{line:160,column:5}},"29":{start:{line:129,column:6},end:{line:129,column:57}},"30":{start:{line:130,column:6},end:{line:130,column:72}},"31":{start:{line:131,column:6},end:{line:138,column:9}},"32":{start:{line:140,column:6},end:{line:159,column:7}},"33":{start:{line:141,column:8},end:{line:154,column:11}},"34":{start:{line:156,column:8},end:{line:156,column:38}},"35":{start:{line:157,column:8},end:{line:157,column:52}},"36":{start:{line:158,column:8},end:{line:158,column:15}},"37":{start:{line:162,column:24},end:{line:166,column:23}},"38":{start:{line:170,column:20},end:{line:171,column:62}},"39":{start:{line:172,column:4},end:{line:174,column:5}},"40":{start:{line:173,column:6},end:{line:173,column:29}},"41":{start:{line:176,column:4},end:{line:176,column:46}},"42":{start:{line:177,column:4},end:{line:177,column:44}},"43":{start:{line:178,column:4},end:{line:178,column:72}},"44":{start:{line:180,column:4},end:{line:218,column:5}},"45":{start:{line:182,column:6},end:{line:196,column:9}},"46":{start:{line:197,column:6},end:{line:200,column:27}},"47":{start:{line:202,column:6},end:{line:204,column:7}},"48":{start:{line:203,column:8},end:{line:203,column:35}},"49":{start:{line:209,column:6},end:{line:216,column:7}},"50":{start:{line:210,column:37},end:{line:215,column:11}},"51":{start:{line:211,column:10},end:{line:214,column:31}},"52":{start:{line:217,column:6},end:{line:217,column:13}},"53":{start:{line:219,column:4},end:{line:221,column:5}},"54":{start:{line:220,column:6},end:{line:220,column:38}},"55":{start:{line:226,column:4},end:{line:304,column:7}},"56":{start:{line:227,column:17},end:{line:227,column:36}},"57":{start:{line:236,column:6},end:{line:238,column:7}},"58":{start:{line:237,column:8},end:{line:237,column:15}},"59":{start:{line:242,column:6},end:{line:252,column:7}},"60":{start:{line:243,column:8},end:{line:246,column:9}},"61":{start:{line:245,column:10},end:{line:245,column:22}},"62":{start:{line:247,column:30},end:{line:247,column:54}},"63":{start:{line:248,column:8},end:{line:249,column:66}},"64":{start:{line:251,column:8},end:{line:251,column:15}},"65":{start:{line:256,column:19},end:{line:262,column:8}},"66":{start:{line:265,column:6},end:{line:267,column:7}},"67":{start:{line:269,column:6},end:{line:282,column:7}},"68":{start:{line:270,column:8},end:{line:275,column:11}},"69":{start:{line:276,column:8},end:{line:281,column:11}},"70":{start:{line:284,column:6},end:{line:303,column:7}},"71":{start:{line:285,column:8},end:{line:290,column:12}},"72":{start:{line:295,column:8},end:{line:302,column:9}},"73":{start:{line:296,column:39},end:{line:301,column:13}},"74":{start:{line:297,column:12},end:{line:300,column:22}},"75":{start:{line:314,column:21},end:{line:318,column:1}},"76":{start:{line:315,column:2},end:{line:317,column:5}},"77":{start:{line:316,column:4},end:{line:316,column:76}},"78":{start:{line:344,column:46},end:{line:438,column:1}},"79":{start:{line:348,column:15},end:{line:348,column:49}},"80":{start:{line:349,column:72},end:{line:349,column:76}},"81":{start:{line:350,column:25},end:{line:352,column:10}},"82":{start:{line:354,column:2},end:{line:356,column:3}},"83":{start:{line:369,column:20},end:{line:375,column:3}},"84":{start:{line:371,column:6},end:{line:371,column:26}},"85":{start:{line:373,column:4},end:{line:373,column:32}},"86":{start:{line:374,column:4},end:{line:374,column:14}},"87":{start:{line:377,column:2},end:{line:397,column:3}},"88":{start:{line:379,column:4},end:{line:384,column:7}},"89":{start:{line:385,column:4},end:{line:396,column:5}},"90":{start:{line:386,column:6},end:{line:388,column:7}},"91":{start:{line:387,column:8},end:{line:387,column:37}},"92":{start:{line:389,column:6},end:{line:389,column:27}},"93":{start:{line:390,column:6},end:{line:395,column:7}},"94":{start:{line:391,column:8},end:{line:394,column:10}},"95":{start:{line:399,column:2},end:{line:418,column:5}},"96":{start:{line:402,column:8},end:{line:402,column:42}},"97":{start:{line:406,column:8},end:{line:406,column:15}},"98":{start:{line:407,column:4},end:{line:415,column:5}},"99":{start:{line:413,column:6},end:{line:413,column:26}},"100":{start:{line:414,column:6},end:{line:414,column:18}},"101":{start:{line:417,column:4},end:{line:417,column:17}},"102":{start:{line:420,column:2},end:{line:433,column:3}},"103":{start:{line:423,column:4},end:{line:429,column:7}},"104":{start:{line:424,column:6},end:{line:427,column:7}},"105":{start:{line:425,column:8},end:{line:425,column:28}},"106":{start:{line:426,column:8},end:{line:426,column:20}},"107":{start:{line:428,column:6},end:{line:428,column:19}},"108":{start:{line:430,column:4},end:{line:432,column:5}},"109":{start:{line:431,column:6},end:{line:431,column:32}},"110":{start:{line:434,column:2},end:{line:437,column:4}},"111":{start:{line:441,column:26},end:{line:579,column:1}},"112":{start:{line:444,column:4},end:{line:446,column:5}},"113":{start:{line:449,column:4},end:{line:482,column:7}},"114":{start:{line:450,column:37},end:{line:462,column:7}},"115":{start:{line:452,column:10},end:{line:460,column:13}},"116":{start:{line:459,column:12},end:{line:459,column:52}},"117":{start:{line:463,column:6},end:{line:468,column:8}},"118":{start:{line:469,column:22},end:{line:471,column:41}},"119":{start:{line:472,column:6},end:{line:472,column:35}},"120":{start:{line:475,column:6},end:{line:481,column:7}},"121":{start:{line:476,column:8},end:{line:476,column:31}},"122":{start:{line:478,column:8},end:{line:480,column:18}},"123":{start:{line:485,column:4},end:{line:498,column:5}},"124":{start:{line:486,column:29},end:{line:488,column:10}},"125":{start:{line:489,column:26},end:{line:489,column:74}},"126":{start:{line:490,column:6},end:{line:493,column:9}},"127":{start:{line:491,column:29},end:{line:491,column:58}},"128":{start:{line:492,column:8},end:{line:492,column:57}},"129":{start:{line:494,column:6},end:{line:497,column:8}},"130":{start:{line:502,column:4},end:{line:507,column:5}},"131":{start:{line:503,column:6},end:{line:506,column:8}},"132":{start:{line:508,column:4},end:{line:513,column:5}},"133":{start:{line:509,column:6},end:{line:512,column:8}},"134":{start:{line:514,column:4},end:{line:517,column:6}},"135":{start:{line:533,column:22},end:{line:533,column:34}},"136":{start:{line:534,column:4},end:{line:542,column:7}},"137":{start:{line:543,column:4},end:{line:577,column:6}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:49},end:{line:16,column:50}},loc:{start:{line:16,column:56},end:{line:20,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:45,column:28},end:{line:45,column:29}},loc:{start:{line:45,column:42},end:{line:306,column:1}},line:45},"2":{name:"(anonymous_2)",decl:{start:{line:70,column:9},end:{line:70,column:10}},loc:{start:{line:70,column:26},end:{line:305,column:3}},line:70},"3":{name:"(anonymous_3)",decl:{start:{line:210,column:56},end:{line:210,column:57}},loc:{start:{line:210,column:66},end:{line:215,column:9}},line:210},"4":{name:"(anonymous_4)",decl:{start:{line:226,column:15},end:{line:226,column:16}},loc:{start:{line:226,column:21},end:{line:304,column:5}},line:226},"5":{name:"(anonymous_5)",decl:{start:{line:242,column:36},end:{line:242,column:37}},loc:{start:{line:242,column:49},end:{line:250,column:7}},line:242},"6":{name:"(anonymous_6)",decl:{start:{line:296,column:58},end:{line:296,column:59}},loc:{start:{line:296,column:68},end:{line:301,column:11}},line:296},"7":{name:"(anonymous_7)",decl:{start:{line:314,column:21},end:{line:314,column:22}},loc:{start:{line:314,column:52},end:{line:318,column:1}},line:314},"8":{name:"(anonymous_8)",decl:{start:{line:315,column:23},end:{line:315,column:24}},loc:{start:{line:315,column:58},end:{line:317,column:3}},line:315},"9":{name:"(anonymous_9)",decl:{start:{line:344,column:46},end:{line:344,column:47}},loc:{start:{line:347,column:5},end:{line:438,column:1}},line:347},"10":{name:"(anonymous_10)",decl:{start:{line:369,column:20},end:{line:369,column:21}},loc:{start:{line:369,column:36},end:{line:375,column:3}},line:369},"11":{name:"(anonymous_11)",decl:{start:{line:399,column:22},end:{line:399,column:23}},loc:{start:{line:399,column:41},end:{line:418,column:3}},line:399},"12":{name:"(anonymous_12)",decl:{start:{line:423,column:24},end:{line:423,column:25}},loc:{start:{line:423,column:43},end:{line:429,column:5}},line:423},"13":{name:"(anonymous_13)",decl:{start:{line:442,column:2},end:{line:442,column:3}},loc:{start:{line:442,column:30},end:{line:483,column:3}},line:442},"14":{name:"(anonymous_14)",decl:{start:{line:449,column:23},end:{line:449,column:24}},loc:{start:{line:449,column:44},end:{line:482,column:5}},line:449},"15":{name:"(anonymous_15)",decl:{start:{line:451,column:8},end:{line:451,column:9}},loc:{start:{line:451,column:25},end:{line:461,column:9}},line:451},"16":{name:"(anonymous_16)",decl:{start:{line:458,column:17},end:{line:458,column:18}},loc:{start:{line:458,column:27},end:{line:460,column:11}},line:458},"17":{name:"(anonymous_17)",decl:{start:{line:484,column:2},end:{line:484,column:3}},loc:{start:{line:484,column:44},end:{line:531,column:3}},line:484},"18":{name:"(anonymous_18)",decl:{start:{line:490,column:26},end:{line:490,column:27}},loc:{start:{line:490,column:45},end:{line:493,column:7}},line:490},"19":{name:"(anonymous_19)",decl:{start:{line:532,column:2},end:{line:532,column:3}},loc:{start:{line:532,column:11},end:{line:578,column:3}},line:532}},branchMap:{"0":{loc:{start:{line:17,column:9},end:{line:19,column:37}},type:"binary-expr",locations:[{start:{line:17,column:9},end:{line:17,column:10}},{start:{line:17,column:14},end:{line:17,column:35}},{start:{line:17,column:39},end:{line:17,column:56}},{start:{line:19,column:10},end:{line:19,column:37}}],line:17},"1":{loc:{start:{line:83,column:4},end:{line:85,column:5}},type:"if",locations:[{start:{line:83,column:4},end:{line:85,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:83},"2":{loc:{start:{line:86,column:4},end:{line:88,column:5}},type:"if",locations:[{start:{line:86,column:4},end:{line:88,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:86},"3":{loc:{start:{line:86,column:8},end:{line:86,column:66}},type:"binary-expr",locations:[{start:{line:86,column:8},end:{line:86,column:29}},{start:{line:86,column:33},end:{line:86,column:66}}],line:86},"4":{loc:{start:{line:89,column:4},end:{line:91,column:5}},type:"if",locations:[{start:{line:89,column:4},end:{line:91,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:89},"5":{loc:{start:{line:89,column:8},end:{line:89,column:72}},type:"binary-expr",locations:[{start:{line:89,column:8},end:{line:89,column:29}},{start:{line:89,column:34},end:{line:89,column:48}},{start:{line:89,column:52},end:{line:89,column:71}}],line:89},"6":{loc:{start:{line:92,column:4},end:{line:94,column:5}},type:"if",locations:[{start:{line:92,column:4},end:{line:94,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:92},"7":{loc:{start:{line:92,column:8},end:{line:92,column:37}},type:"binary-expr",locations:[{start:{line:92,column:8},end:{line:92,column:20}},{start:{line:92,column:24},end:{line:92,column:37}}],line:92},"8":{loc:{start:{line:95,column:4},end:{line:99,column:5}},type:"if",locations:[{start:{line:95,column:4},end:{line:99,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:95},"9":{loc:{start:{line:95,column:8},end:{line:97,column:5}},type:"binary-expr",locations:[{start:{line:95,column:8},end:{line:95,column:30}},{start:{line:96,column:6},end:{line:96,column:25}},{start:{line:96,column:29},end:{line:96,column:56}},{start:{line:96,column:60},end:{line:96,column:80}}],line:95},"10":{loc:{start:{line:103,column:4},end:{line:105,column:5}},type:"if",locations:[{start:{line:103,column:4},end:{line:105,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:103},"11":{loc:{start:{line:103,column:8},end:{line:103,column:56}},type:"binary-expr",locations:[{start:{line:103,column:8},end:{line:103,column:29}},{start:{line:103,column:33},end:{line:103,column:56}}],line:103},"12":{loc:{start:{line:108,column:4},end:{line:110,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:108},"13":{loc:{start:{line:117,column:18},end:{line:120,column:15}},type:"cond-expr",locations:[{start:{line:118,column:8},end:{line:118,column:27}},{start:{line:120,column:8},end:{line:120,column:15}}],line:117},"14":{loc:{start:{line:125,column:23},end:{line:125,column:60}},type:"cond-expr",locations:[{start:{line:125,column:35},end:{line:125,column:37}},{start:{line:125,column:40},end:{line:125,column:60}}],line:125},"15":{loc:{start:{line:128,column:4},end:{line:160,column:5}},type:"if",locations:[{start:{line:128,column:4},end:{line:160,column:5}},{start:{line:139,column:11},end:{line:160,column:5}}],line:128},"16":{loc:{start:{line:130,column:16},end:{line:130,column:71}},type:"cond-expr",locations:[{start:{line:130,column:35},end:{line:130,column:51}},{start:{line:130,column:54},end:{line:130,column:71}}],line:130},"17":{loc:{start:{line:170,column:20},end:{line:171,column:62}},type:"binary-expr",locations:[{start:{line:170,column:20},end:{line:170,column:34}},{start:{line:171,column:6},end:{line:171,column:62}}],line:170},"18":{loc:{start:{line:172,column:4},end:{line:174,column:5}},type:"if",locations:[{start:{line:172,column:4},end:{line:174,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:172},"19":{loc:{start:{line:180,column:4},end:{line:218,column:5}},type:"if",locations:[{start:{line:180,column:4},end:{line:218,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:180},"20":{loc:{start:{line:190,column:23},end:{line:190,column:46}},type:"binary-expr",locations:[{start:{line:190,column:23},end:{line:190,column:29}},{start:{line:190,column:33},end:{line:190,column:46}}],line:190},"21":{loc:{start:{line:202,column:6},end:{line:204,column:7}},type:"if",locations:[{start:{line:202,column:6},end:{line:204,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:202},"22":{loc:{start:{line:209,column:6},end:{line:216,column:7}},type:"if",locations:[{start:{line:209,column:6},end:{line:216,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:209},"23":{loc:{start:{line:219,column:4},end:{line:221,column:5}},type:"if",locations:[{start:{line:219,column:4},end:{line:221,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:219},"24":{loc:{start:{line:236,column:6},end:{line:238,column:7}},type:"if",locations:[{start:{line:236,column:6},end:{line:238,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:236},"25":{loc:{start:{line:236,column:10},end:{line:236,column:50}},type:"binary-expr",locations:[{start:{line:236,column:10},end:{line:236,column:13}},{start:{line:236,column:17},end:{line:236,column:50}}],line:236},"26":{loc:{start:{line:242,column:6},end:{line:252,column:7}},type:"if",locations:[{start:{line:242,column:6},end:{line:252,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:242},"27":{loc:{start:{line:242,column:10},end:{line:250,column:8}},type:"binary-expr",locations:[{start:{line:242,column:10},end:{line:242,column:18}},{start:{line:242,column:22},end:{line:250,column:8}}],line:242},"28":{loc:{start:{line:243,column:8},end:{line:246,column:9}},type:"if",locations:[{start:{line:243,column:8},end:{line:246,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:243},"29":{loc:{start:{line:243,column:12},end:{line:244,column:54}},type:"binary-expr",locations:[{start:{line:243,column:12},end:{line:243,column:31}},{start:{line:244,column:11},end:{line:244,column:25}},{start:{line:244,column:29},end:{line:244,column:53}}],line:243},"30":{loc:{start:{line:248,column:16},end:{line:249,column:64}},type:"binary-expr",locations:[{start:{line:248,column:16},end:{line:248,column:29}},{start:{line:248,column:33},end:{line:248,column:47}},{start:{line:249,column:10},end:{line:249,column:64}}],line:248},"31":{loc:{start:{line:261,column:23},end:{line:261,column:46}},type:"binary-expr",locations:[{start:{line:261,column:23},end:{line:261,column:29}},{start:{line:261,column:33},end:{line:261,column:46}}],line:261},"32":{loc:{start:{line:265,column:6},end:{line:267,column:7}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:265},"33":{loc:{start:{line:269,column:6},end:{line:282,column:7}},type:"if",locations:[{start:{line:269,column:6},end:{line:282,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:269},"34":{loc:{start:{line:284,column:6},end:{line:303,column:7}},type:"if",locations:[{start:{line:284,column:6},end:{line:303,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:284},"35":{loc:{start:{line:295,column:8},end:{line:302,column:9}},type:"if",locations:[{start:{line:295,column:8},end:{line:302,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:295},"36":{loc:{start:{line:354,column:2},end:{line:356,column:3}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:354},"37":{loc:{start:{line:377,column:2},end:{line:397,column:3}},type:"if",locations:[{start:{line:377,column:2},end:{line:397,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:377},"38":{loc:{start:{line:385,column:4},end:{line:396,column:5}},type:"if",locations:[{start:{line:385,column:4},end:{line:396,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:385},"39":{loc:{start:{line:386,column:6},end:{line:388,column:7}},type:"if",locations:[{start:{line:386,column:6},end:{line:388,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:386},"40":{loc:{start:{line:386,column:10},end:{line:386,column:51}},type:"binary-expr",locations:[{start:{line:386,column:10},end:{line:386,column:21}},{start:{line:386,column:25},end:{line:386,column:51}}],line:386},"41":{loc:{start:{line:390,column:6},end:{line:395,column:7}},type:"if",locations:[{start:{line:390,column:6},end:{line:395,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:390},"42":{loc:{start:{line:407,column:4},end:{line:415,column:5}},type:"if",locations:[{start:{line:407,column:4},end:{line:415,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:407},"43":{loc:{start:{line:408,column:6},end:{line:411,column:50}},type:"binary-expr",locations:[{start:{line:408,column:7},end:{line:408,column:16}},{start:{line:408,column:20},end:{line:408,column:30}},{start:{line:410,column:8},end:{line:410,column:29}},{start:{line:410,column:33},end:{line:410,column:46}},{start:{line:411,column:7},end:{line:411,column:17}},{start:{line:411,column:21},end:{line:411,column:49}}],line:408},"44":{loc:{start:{line:420,column:2},end:{line:433,column:3}},type:"if",locations:[{start:{line:420,column:2},end:{line:433,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:420},"45":{loc:{start:{line:424,column:6},end:{line:427,column:7}},type:"if",locations:[{start:{line:424,column:6},end:{line:427,column:7}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:424},"46":{loc:{start:{line:430,column:4},end:{line:432,column:5}},type:"if",locations:[{start:{line:430,column:4},end:{line:432,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:430},"47":{loc:{start:{line:444,column:4},end:{line:446,column:5}},type:"if",locations:[{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:444},"48":{loc:{start:{line:475,column:6},end:{line:481,column:7}},type:"if",locations:[{start:{line:475,column:6},end:{line:481,column:7}},{start:{line:477,column:13},end:{line:481,column:7}}],line:475},"49":{loc:{start:{line:485,column:4},end:{line:498,column:5}},type:"if",locations:[{start:{line:485,column:4},end:{line:498,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:485},"50":{loc:{start:{line:485,column:8},end:{line:485,column:65}},type:"binary-expr",locations:[{start:{line:485,column:8},end:{line:485,column:13}},{start:{line:485,column:17},end:{line:485,column:65}}],line:485},"51":{loc:{start:{line:486,column:29},end:{line:488,column:10}},type:"binary-expr",locations:[{start:{line:486,column:29},end:{line:486,column:74}}],line:486},"52":{loc:{start:{line:502,column:4},end:{line:507,column:5}},type:"if",locations:[{start:{line:502,column:4},end:{line:507,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:502},"53":{loc:{start:{line:508,column:4},end:{line:513,column:5}},type:"if",locations:[{start:{line:508,column:4},end:{line:513,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:508}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},b:{"0":[0,0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0,0],"30":[0,0,0],"31":[0,0],"32":[0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0,0,0,0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0],"52":[0,0],"53":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1c8e0ba39925755812d1630728e1a11e535aae6f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2i9f9gddfq=function(){return actualCoverage;};}return actualCoverage;}cov_2i9f9gddfq();import{Typeson,unescapeKeyPathComponent,structuredCloningThrowing,resurrectable as noneditable,toStringTag}from'../vendor-imports.js';import{buildTypeChoices}from'../typeChoices.js';import{typesonPathToJSONPointer}from'../utils/jsonPointer.js';import json from'./json.js';// We modify resurrectable in hopes an including application doesn't need it
/** @type {import('typeson').TypeSpecSet} */cov_2i9f9gddfq().s[0]++;noneditable.resurrectable.test=/** @type {import('typeson').Tester} */x=>{cov_2i9f9gddfq().f[0]++;cov_2i9f9gddfq().s[1]++;return(cov_2i9f9gddfq().b[0][0]++,x)&&(cov_2i9f9gddfq().b[0][1]++,typeof x==='object')&&(cov_2i9f9gddfq().b[0][2]++,!Array.isArray(x))&&(cov_2i9f9gddfq().b[0][3]++,// Could be a user object with a string tag, but we can't tell
toStringTag(x)!=='Object');};/**
 * Delegates data-based UI building to method for adding child elements (a
 *   method which is housed in the array type object).
 * @typedef {(info: {
 *   propName: string,
 *   type: import('../types.js').AvailableType,
 *   value: import('../formats.js').StructuredCloneValue,
 *   bringIntoFocus?: boolean,
 *   setAValue?: boolean,
 *   schemaContent?: import('../formats/schema.js').ZodexSchema,
 * }) => HTMLElement|null} AddAndSetArrayElement
 */ /**
 * @typedef {import('typeson-registry').EncapsulateObserver} EncapsulateObserver
 */ /**
 * Obtains state-specific data and returns an observer that can build a UI based
 *   on data it receives.
 * @param {import('../types.js').StateObject} stateObj
 * @returns {EncapsulateObserver}
 */cov_2i9f9gddfq().s[2]++;const encapsulateObserver=stateObj=>{cov_2i9f9gddfq().f[1]++;const{typeNamespace,readonly,format:frmt,schemaContent,formats,types}=(cov_2i9f9gddfq().s[3]++,stateObj);const format=(/** @type {import('../formats.js').AvailableFormat} */cov_2i9f9gddfq().s[4]++,frmt);/**
   * Matches keypaths to the HTML UI Element.
   * @type {{[key: string]: HTMLElement & {
   *   $addAndSetArrayElement: AddAndSetArrayElement
   * }}}
   */const parents=(cov_2i9f9gddfq().s[5]++,{});/**
   * @type {{[key: string]: import('zodex').SzType|undefined}}
   */const schemaParents=(cov_2i9f9gddfq().s[6]++,{});/** @type {string[]} */const mapPaths=(cov_2i9f9gddfq().s[7]++,[]);cov_2i9f9gddfq().s[8]++;return observerObj=>{cov_2i9f9gddfq().f[2]++;const{type,cyclic,keypath,value,replaced,cyclicKeypath,endIterateIn,endIterateOwn,endIterateUnsetNumeric,clone}=(cov_2i9f9gddfq().s[9]++,observerObj);cov_2i9f9gddfq().s[10]++;if('replaced'in observerObj){cov_2i9f9gddfq().b[1][0]++;cov_2i9f9gddfq().s[11]++;return;}else{cov_2i9f9gddfq().b[1][1]++;}cov_2i9f9gddfq().s[12]++;if((cov_2i9f9gddfq().b[3][0]++,cyclic==='readonly')&&(cov_2i9f9gddfq().b[3][1]++,!Array.isArray(observerObj.value))){cov_2i9f9gddfq().b[2][0]++;cov_2i9f9gddfq().s[13]++;return;}else{cov_2i9f9gddfq().b[2][1]++;}cov_2i9f9gddfq().s[14]++;if((cov_2i9f9gddfq().b[5][0]++,cyclic==='readonly')&&((cov_2i9f9gddfq().b[5][1]++,type==='set')||(cov_2i9f9gddfq().b[5][2]++,type==='filelist'))){cov_2i9f9gddfq().b[4][0]++;cov_2i9f9gddfq().s[15]++;return;}else{cov_2i9f9gddfq().b[4][1]++;}cov_2i9f9gddfq().s[16]++;if((cov_2i9f9gddfq().b[7][0]++,endIterateIn)||(cov_2i9f9gddfq().b[7][1]++,endIterateOwn)){cov_2i9f9gddfq().b[6][0]++;cov_2i9f9gddfq().s[17]++;return;}else{cov_2i9f9gddfq().b[6][1]++;}cov_2i9f9gddfq().s[18]++;if((cov_2i9f9gddfq().b[9][0]++,endIterateUnsetNumeric)||(cov_2i9f9gddfq().b[9][1]++,clone===undefined)&&(cov_2i9f9gddfq().b[9][2]++,cyclicKeypath===undefined)&&(cov_2i9f9gddfq().b[9][3]++,Array.isArray(value))){cov_2i9f9gddfq().b[8][0]++;cov_2i9f9gddfq().s[19]++;return;}else{cov_2i9f9gddfq().b[8][1]++;}// What other situations is this firing twice, and it
//   shouldn't reach here?
cov_2i9f9gddfq().s[20]++;if((cov_2i9f9gddfq().b[11][0]++,observerObj.replacing)&&(cov_2i9f9gddfq().b[11][1]++,type==='negativeZero')){cov_2i9f9gddfq().b[10][0]++;cov_2i9f9gddfq().s[21]++;return;}else{cov_2i9f9gddfq().b[10][1]++;}/* istanbul ignore if -- Not part of format */cov_2i9f9gddfq().s[22]++;if(type==='sparseUndefined'){// We'll handle otherwise
return;}else{cov_2i9f9gddfq().b[12][0]++;}/** @type {import('../types.js').AvailableType} */let newType;let newValue=(cov_2i9f9gddfq().s[23]++,value);/* schema: || format.startsWith('schema-') */const state=(cov_2i9f9gddfq().s[24]++,format==='structuredCloning'?(cov_2i9f9gddfq().b[13][0]++,'arrayNonindexKeys'// ? 'sparseArrays'
):(cov_2i9f9gddfq().b[13][1]++,'array'));const li=(cov_2i9f9gddfq().s[25]++,keypath.lastIndexOf('.'));const arrayOrObjectPropertyName=(cov_2i9f9gddfq().s[26]++,unescapeKeyPathComponent(keypath.slice(li+1)));const parentPath=(cov_2i9f9gddfq().s[27]++,li===-1?(cov_2i9f9gddfq().b[14][0]++,''):(cov_2i9f9gddfq().b[14][1]++,keypath.slice(0,li)));let schema;cov_2i9f9gddfq().s[28]++;if(typeof cyclicKeypath==='string'){cov_2i9f9gddfq().b[15][0]++;cov_2i9f9gddfq().s[29]++;newValue=typesonPathToJSONPointer(cyclicKeypath);cov_2i9f9gddfq().s[30]++;newType=type==='array'?(cov_2i9f9gddfq().b[16][0]++,'arrayReference'):(cov_2i9f9gddfq().b[16][1]++,'objectReference');cov_2i9f9gddfq().s[31]++;({newType,schema}=canonicalTypeToAvailableTypeAndSchema(/** @type {import('../types.js').default} */types,/** @type {import('../formats.js').default} */formats,format,state,newType,value,arrayOrObjectPropertyName,schemaParents[parentPath],stateObj));// Todo (low): Add accurate state for second argument
}else{cov_2i9f9gddfq().b[15][1]++;cov_2i9f9gddfq().s[32]++;try{cov_2i9f9gddfq().s[33]++;({newType,schema}=canonicalTypeToAvailableTypeAndSchema(/** @type {import('../types.js').default} */types,/** @type {import('../formats.js').default} */formats,format,state,/**
           * @type {import('../types.js').AvailableType}
           */type,value,arrayOrObjectPropertyName,schemaParents[parentPath],stateObj));// Todo (low): Add state for second argument
}catch(err){cov_2i9f9gddfq().s[34]++;console.log('err',type,err);cov_2i9f9gddfq().s[35]++;stateObj.error=/** @type {Error} */err;cov_2i9f9gddfq().s[36]++;return;}}const hasChildren=(cov_2i9f9gddfq().s[37]++,['array','object','set','map',// 'sparseArrays',
'arrayNonindexKeys'].includes(newType));// Maps are followed up by arrays which we don't want as such;
//  we track the paths to avoid reporting these child arrays
const mapType=(cov_2i9f9gddfq().s[38]++,(cov_2i9f9gddfq().b[17][0]++,type==='map')&&(cov_2i9f9gddfq().b[17][1]++,Object.prototype.toString.call(value)==='[object Map]'));cov_2i9f9gddfq().s[39]++;if(mapType){cov_2i9f9gddfq().b[18][0]++;cov_2i9f9gddfq().s[40]++;mapPaths.push(keypath);}else{cov_2i9f9gddfq().b[18][1]++;}cov_2i9f9gddfq().s[41]++;console.log('is',stateObj.schemaContent);cov_2i9f9gddfq().s[42]++;console.log('but could set to',schema);cov_2i9f9gddfq().s[43]++;console.log('arrayOrObjectPropertyName',arrayOrObjectPropertyName);cov_2i9f9gddfq().s[44]++;if(!stateObj.rootUI){cov_2i9f9gddfq().b[19][0]++;cov_2i9f9gddfq().s[45]++;// console.log('vvvv0', newType, newValue);
stateObj.rootUI=types?.getUIForModeAndType({readonly,typeNamespace,type:newType,bringIntoFocus:false,buildTypeChoices,format,specificSchemaObject:schema,schemaContent:(cov_2i9f9gddfq().b[20][0]++,schema)??(cov_2i9f9gddfq().b[20][1]++,schemaContent),value:newValue,hasValue:true,// Not currently in use but may be convenient for a
//     type wanting the serialized data
replaced});cov_2i9f9gddfq().s[46]++;parents['']=/**
      * @type {HTMLElement &
      *   {$addAndSetArrayElement: AddAndSetArrayElement}}
      */stateObj.rootUI;cov_2i9f9gddfq().s[47]++;if(schema){cov_2i9f9gddfq().b[21][0]++;cov_2i9f9gddfq().s[48]++;schemaParents['']=schema;}else{cov_2i9f9gddfq().b[21][1]++;}// Since we're skipping the array elements, we need to add the
//   map element to the array index where the array children
//   will be found (which we do want)
cov_2i9f9gddfq().s[49]++;if(mapType){cov_2i9f9gddfq().b[22][0]++;cov_2i9f9gddfq().s[50]++;/** @type {Map<any, any>} */[...value].forEach((_,i)=>{cov_2i9f9gddfq().f[3]++;cov_2i9f9gddfq().s[51]++;parents[i]=/**
          * @type {HTMLElement &
          *   {$addAndSetArrayElement: AddAndSetArrayElement}}
          */stateObj.rootUI;});}else{cov_2i9f9gddfq().b[22][1]++;}cov_2i9f9gddfq().s[52]++;return;}else{cov_2i9f9gddfq().b[19][1]++;}cov_2i9f9gddfq().s[53]++;if(schema){cov_2i9f9gddfq().b[23][0]++;cov_2i9f9gddfq().s[54]++;schemaParents[keypath]=schema;}else{cov_2i9f9gddfq().b[23][1]++;}// Todo (low): If could be async, use async encapsulate method
// Todo (low): Handle `awaitingTypesonPromise` with place-holder
// Todo (low): Handle `resolvingTypesonPromise` to replace place-holder
cov_2i9f9gddfq().s[55]++;setTimeout(()=>{cov_2i9f9gddfq().f[4]++;const ui=(cov_2i9f9gddfq().s[56]++,parents[parentPath]);// These errors occur, e.g., if `replacing` not first added and then
//   a converted object gets treated as the root UI (e.g., for `regexp`
//   or `blobHTML` at root)
// If there isn't a problem in Typeson with transmitting the `readonly`
//   status recursively down the object (should be no need to check
//   for circulars there?), could change Typeson to report `readonly`
//   for the nested items, in which case, we could block out `readonly`
//   instead of doing this here
cov_2i9f9gddfq().s[57]++;if((cov_2i9f9gddfq().b[25][0]++,!ui)||(cov_2i9f9gddfq().b[25][1]++,!('$addAndSetArrayElement'in ui))){cov_2i9f9gddfq().b[24][0]++;cov_2i9f9gddfq().s[58]++;return;}else{cov_2i9f9gddfq().b[24][1]++;}// Skip the array structures immediately following the Map,
//   as map needs to handle
cov_2i9f9gddfq().s[59]++;if((cov_2i9f9gddfq().b[27][0]++,!mapType)&&(cov_2i9f9gddfq().b[27][1]++,mapPaths.some(mapPath=>{cov_2i9f9gddfq().f[5]++;cov_2i9f9gddfq().s[60]++;if((cov_2i9f9gddfq().b[29][0]++,mapPath===keypath)||(cov_2i9f9gddfq().b[29][1]++,mapPath==='')&&(cov_2i9f9gddfq().b[29][2]++,/^\d+$/u.test(keypath))){cov_2i9f9gddfq().b[28][0]++;cov_2i9f9gddfq().s[61]++;return true;}else{cov_2i9f9gddfq().b[28][1]++;}const trailingIndex=(cov_2i9f9gddfq().s[62]++,keypath.match(/\.\d+$/u));cov_2i9f9gddfq().s[63]++;return(cov_2i9f9gddfq().b[30][0]++,trailingIndex)&&(cov_2i9f9gddfq().b[30][1]++,mapPath!=='')&&(cov_2i9f9gddfq().b[30][2]++,keypath.slice(0,-trailingIndex[0].length)===mapPath);}))){cov_2i9f9gddfq().b[26][0]++;cov_2i9f9gddfq().s[64]++;return;}else{cov_2i9f9gddfq().b[26][1]++;}// console.log('vvvv', newType, '::', newValue, '::', newValue?.cause);
const root=(cov_2i9f9gddfq().s[65]++,ui.$addAndSetArrayElement({propName:arrayOrObjectPropertyName,type:newType,value:newValue,bringIntoFocus:false,schemaContent:(cov_2i9f9gddfq().b[31][0]++,schema)??(cov_2i9f9gddfq().b[31][1]++,schemaContent)}));/* istanbul ignore if -- Guard for `null` return */cov_2i9f9gddfq().s[66]++;if(!root){return;}else{cov_2i9f9gddfq().b[32][0]++;}cov_2i9f9gddfq().s[67]++;if(!readonly){cov_2i9f9gddfq().b[33][0]++;cov_2i9f9gddfq().s[68]++;types?.setValue({type:newType,// eslint-disable-next-line object-shorthand -- TS
root:(/** @type {HTMLDivElement} */root),value:newValue});cov_2i9f9gddfq().s[69]++;types?.validate({type:newType,// eslint-disable-next-line object-shorthand -- TS
root:(/** @type {HTMLDivElement} */root),topRoot:(/** @type {HTMLDivElement} */stateObj.rootUI)});}else{cov_2i9f9gddfq().b[33][1]++;}cov_2i9f9gddfq().s[70]++;if(hasChildren){cov_2i9f9gddfq().b[34][0]++;cov_2i9f9gddfq().s[71]++;parents[keypath]=/**
          * @type {HTMLElement &
          *   {$addAndSetArrayElement: AddAndSetArrayElement}}
          */root;// Since we're skipping the array elements, we need to add the
//   map element to the array index where the array children
//   will be found (which we do want)
cov_2i9f9gddfq().s[72]++;if(mapType){cov_2i9f9gddfq().b[35][0]++;cov_2i9f9gddfq().s[73]++;/** @type {Map<any, any>} */[...value].forEach((_,i)=>{cov_2i9f9gddfq().f[6]++;cov_2i9f9gddfq().s[74]++;parents[`${keypath}.${i}`]=/**
            * @type {HTMLElement &
            *   {$addAndSetArrayElement: AddAndSetArrayElement}}
            */root;});}else{cov_2i9f9gddfq().b[35][1]++;}}else{cov_2i9f9gddfq().b[34][1]++;}});};};/**
 * Performs replacements on a list of types.
 * @param {string[]} originTypes
 * @param {[originType: string, replacementType: string][]} replacements
 * @returns {void}
 */cov_2i9f9gddfq().s[75]++;const replaceTypes=(originTypes,replacements)=>{cov_2i9f9gddfq().f[7]++;cov_2i9f9gddfq().s[76]++;replacements.forEach(([originType,replacementType])=>{cov_2i9f9gddfq().f[8]++;cov_2i9f9gddfq().s[77]++;originTypes.splice(originTypes.indexOf(originType),1,replacementType);});};/**
 * Converts a (typeson structured cloning) type to a type name relevant for the
 *   format, state, value, and schema content, and may supply a child type if
 *   there is a match. Also returns relevant schema for the type.
 * @param {import('../types.js').default} types The Types object containing
 *   type-specific data.
 * @param {import('../formats.js').default} formats The Formats object
 *   containing format-specific data.
 * @param {import('../formats.js').AvailableFormat} format The current format.
 * @param {string} state The current state.
 * @param {import('../types.js').AvailableType} valType The value type being
 *   checked.
 * @param {import('../formats.js').StructuredCloneValue} v The value being
 *   checked.
 * @param {string} arrayOrObjectPropertyName
 * @param {import('zodex').SzType|undefined} parentSchema
 * @param {import('../types.js').StateObject} stateObj The schema content
 *   being checked.
 * @throws {Error} May throw if data found to be invalid.
 * @returns {{
 *   newType: import('../types.js').AvailableType,
 *   schema?: import('zodex').SzType|undefined
 * }} Schema and type info.
 */cov_2i9f9gddfq().s[78]++;const canonicalTypeToAvailableTypeAndSchema=(types,formats,format,state,valType,v,arrayOrObjectPropertyName,parentSchema,stateObj)=>{cov_2i9f9gddfq().f[9]++;const frmt=(cov_2i9f9gddfq().s[79]++,formats.getAvailableFormat(format));const{getTypesAndSchemasForState,convertFromTypeson,testInvalid}=(cov_2i9f9gddfq().s[80]++,frmt);const allowableTypes=(cov_2i9f9gddfq().s[81]++,getTypesAndSchemasForState.call(frmt,types,state,stateObj.schemaContent)?.types);/* istanbul ignore if -- Guard */cov_2i9f9gddfq().s[82]++;if(!allowableTypes){throw new Error('Unexpected undefined type for state');}else{cov_2i9f9gddfq().b[36][0]++;}/**
   * @type {import('../types.js').AvailableType|undefined}
   */let ret;/**
   * Throws an error with information about the new value type.
   * @param {string} newValType The new value type being recorded.
   * @throws {Error} The invalid Error being thrown.
   * @returns {never} Always throws instead of returning.
   */cov_2i9f9gddfq().s[83]++;const isInvalid=newValType=>{cov_2i9f9gddfq().f[10]++;const err=(/** @type {Error & {newValType: string}} */cov_2i9f9gddfq().s[84]++,new Error('Invalid'));cov_2i9f9gddfq().s[85]++;err.newValType=newValType;cov_2i9f9gddfq().s[86]++;throw err;};let schema;cov_2i9f9gddfq().s[87]++;if(convertFromTypeson){cov_2i9f9gddfq().b[37][0]++;let newValType;cov_2i9f9gddfq().s[88]++;({type:newValType,schema}=convertFromTypeson(valType,types,v,arrayOrObjectPropertyName,parentSchema,stateObj));cov_2i9f9gddfq().s[89]++;if(typeof newValType==='string'){cov_2i9f9gddfq().b[38][0]++;cov_2i9f9gddfq().s[90]++;if((cov_2i9f9gddfq().b[40][0]++,testInvalid)&&(cov_2i9f9gddfq().b[40][1]++,testInvalid(newValType,v))){cov_2i9f9gddfq().b[39][0]++;cov_2i9f9gddfq().s[91]++;return isInvalid(newValType);}else{cov_2i9f9gddfq().b[39][1]++;}cov_2i9f9gddfq().s[92]++;valType=newValType;cov_2i9f9gddfq().s[93]++;if(schema){cov_2i9f9gddfq().b[41][0]++;cov_2i9f9gddfq().s[94]++;return{newType:valType,schema};}else{cov_2i9f9gddfq().b[41][1]++;}}else{cov_2i9f9gddfq().b[38][1]++;}}else{cov_2i9f9gddfq().b[37][1]++;}cov_2i9f9gddfq().s[95]++;allowableTypes.some(allowableType=>{cov_2i9f9gddfq().f[11]++;const typeObj=(/** @type {import('../types.js').TypeObject & {childTypes: string[]}} */cov_2i9f9gddfq().s[96]++,types.getTypeObject(allowableType));const{valueMatch,superType,childTypes}=(cov_2i9f9gddfq().s[97]++,typeObj);cov_2i9f9gddfq().s[98]++;if((cov_2i9f9gddfq().b[43][0]++,superType)&&(cov_2i9f9gddfq().b[43][1]++,valueMatch)&&(cov_2i9f9gddfq().b[43][2]++,// Using, e.g., for `true` and `false` subtypes
superType===valType)&&(cov_2i9f9gddfq().b[43][3]++,valueMatch(v))||(cov_2i9f9gddfq().b[43][4]++,childTypes)&&(cov_2i9f9gddfq().b[43][5]++,childTypes.includes(valType))){cov_2i9f9gddfq().b[42][0]++;cov_2i9f9gddfq().s[99]++;ret=allowableType;cov_2i9f9gddfq().s[100]++;return true;}else{cov_2i9f9gddfq().b[42][1]++;}cov_2i9f9gddfq().s[101]++;return false;});cov_2i9f9gddfq().s[102]++;if(ret===undefined){cov_2i9f9gddfq().b[44][0]++;cov_2i9f9gddfq().s[103]++;// We run this separately from the `childTypes` check above
//    to ensure `childTypes` have priority regardless of position
allowableTypes.some(allowableType=>{cov_2i9f9gddfq().f[12]++;cov_2i9f9gddfq().s[104]++;if(allowableType===valType){cov_2i9f9gddfq().b[45][0]++;cov_2i9f9gddfq().s[105]++;ret=allowableType;cov_2i9f9gddfq().s[106]++;return true;}else{cov_2i9f9gddfq().b[45][1]++;}cov_2i9f9gddfq().s[107]++;return false;});cov_2i9f9gddfq().s[108]++;if(ret===undefined){cov_2i9f9gddfq().b[46][0]++;cov_2i9f9gddfq().s[109]++;return isInvalid(valType);}else{cov_2i9f9gddfq().b[46][1]++;}}else{cov_2i9f9gddfq().b[44][1]++;}cov_2i9f9gddfq().s[110]++;return{newType:ret,schema};};/** @type {import('../formats.js').Format} */const structuredCloning=(cov_2i9f9gddfq().s[111]++,{iterate(records,stateObj){cov_2i9f9gddfq().f[13]++;cov_2i9f9gddfq().s[112]++;/* istanbul ignore if -- Just a guard */if(!stateObj.format){stateObj.format='structuredCloning';}else{cov_2i9f9gddfq().b[47][0]++;}// Todo: Replace this with async typeson?
// eslint-disable-next-line promise/avoid-new
cov_2i9f9gddfq().s[113]++;return new Promise((resolve,reject)=>{cov_2i9f9gddfq().f[14]++;const structuredCloningFixed=(cov_2i9f9gddfq().s[114]++,structuredCloningThrowing.filter(typeSpecSet=>{cov_2i9f9gddfq().f[15]++;cov_2i9f9gddfq().s[115]++;return![// Not yet supported within JSOE
'imagedata','imagebitmap','cryptokey','domquad'].some(prop=>{cov_2i9f9gddfq().f[16]++;cov_2i9f9gddfq().s[116]++;return Object.hasOwn(typeSpecSet,prop);});}));cov_2i9f9gddfq().s[117]++;structuredCloningFixed.splice(// Add after userObjects
1,0,noneditable);const typeson=(cov_2i9f9gddfq().s[118]++,new Typeson({encapsulateObserver:encapsulateObserver(stateObj)}).register(structuredCloningFixed));cov_2i9f9gddfq().s[119]++;typeson.encapsulate(records);// Todo (low): We might want to run async encapsulate for
//   async types (and put this after Promise resolves)
cov_2i9f9gddfq().s[120]++;if(stateObj.error){cov_2i9f9gddfq().b[48][0]++;cov_2i9f9gddfq().s[121]++;reject(stateObj.error);}else{cov_2i9f9gddfq().b[48][1]++;cov_2i9f9gddfq().s[122]++;resolve(/** @type {Required<import('../types.js').StateObject>} */stateObj.rootUI);}});},getTypesAndSchemasForState(types,state){cov_2i9f9gddfq().f[17]++;cov_2i9f9gddfq().s[123]++;if((cov_2i9f9gddfq().b[50][0]++,state)&&(cov_2i9f9gddfq().b[50][1]++,types.getContextInfo('structuredCloning',state))){cov_2i9f9gddfq().b[49][0]++;const typesForFormat=(cov_2i9f9gddfq().s[124]++,(cov_2i9f9gddfq().b[51][0]++,this.getTypesAndSchemasForState(types)?.types)||/* istanbul ignore next -- types should be an array */[]);const contextInfo=(cov_2i9f9gddfq().s[125]++,types.getContextInfo('structuredCloning',state));cov_2i9f9gddfq().s[126]++;contextInfo.forEach(({type,after})=>{cov_2i9f9gddfq().f[18]++;const precedingIdx=(cov_2i9f9gddfq().s[127]++,typesForFormat.indexOf(after));cov_2i9f9gddfq().s[128]++;typesForFormat.splice(precedingIdx+1,0,type);});cov_2i9f9gddfq().s[129]++;return{types:typesForFormat,schemaObjects:[]};}else{cov_2i9f9gddfq().b[49][1]++;}// Todo: Introduce new keys (to `Types.contexts`?) which could be used to
//         determine a delimited group of children (rather
//         than manual exception handling as we do here)
cov_2i9f9gddfq().s[130]++;if(state==='errorsArray'){cov_2i9f9gddfq().b[52][0]++;cov_2i9f9gddfq().s[131]++;return{types:['error','errors'],schemaObjects:[]};}else{cov_2i9f9gddfq().b[52][1]++;}cov_2i9f9gddfq().s[132]++;if(state==='filelistArray'){cov_2i9f9gddfq().b[53][0]++;cov_2i9f9gddfq().s[133]++;return{types:['file'],schemaObjects:[]};}else{cov_2i9f9gddfq().b[53][1]++;}cov_2i9f9gddfq().s[134]++;return{types:this.types(),schemaObjects:[]};/*
    // These have their children determined internally to array
    if (['map', 'set'].includes(state)) {return;}
    */ // These have their own internal numeric children instead
/*
    if (
      'int8array', 'uint8array', 'uint8clampedarray',
      'int16array', 'uint16array', 'int32array',
      'uint32array', 'float32array', 'float64array'
    ).includes(state)) {return;}
    */},types(){cov_2i9f9gddfq().f[19]++;const jsonTypes=(cov_2i9f9gddfq().s[135]++,json.types());cov_2i9f9gddfq().s[136]++;replaceTypes(jsonTypes,[['array',// We can rename to this instead of `arrayNonindexKeys` if we change
//  typeson-registry name
// 'sparseArrays',
'arrayNonindexKeys']]);cov_2i9f9gddfq().s[137]++;return[// This type is only for throwing upon cloning errors:
// 'checkDataCloneException'
// This type might be supported by evaluable JS or config passed in:
// 'userObject'
...jsonTypes,'undef',// Explicit undefined only
'bigint','bigintObject','SpecialNumber',// '`NaN`, `Infinity`, `-Infinity`, `-0`
'date','regexp','BooleanObject','NumberObject','StringObject','error','errors','blob','blobHTML','file','set','map','filelist','domexception','domrect','dompoint','dommatrix','buffersource','resurrectable'// Ok, but will need some work and/or decisions on how to present:
// 'cryptokey',
// 'domquad',
// 'imagedata', 'imagebitmap',
];}});export default structuredCloning;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,