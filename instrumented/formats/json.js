function cov_20y0fm84fb(){var path="/Users/brett/jsoe/src/formats/json.js";var hash="097f76cbbfe2725b53e91623250d2e2636ac4050";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/formats/json.js",statementMap:{"0":{start:{line:8,column:22},end:{line:10,column:2}},"1":{start:{line:13,column:13},end:{line:55,column:1}},"2":{start:{line:14,column:15},end:{line:16,column:3}},"3":{start:{line:19,column:17},end:{line:19,column:24}},"4":{start:{line:24,column:4},end:{line:24,column:29}},"5":{start:{line:25,column:4},end:{line:25,column:53}},"6":{start:{line:29,column:4},end:{line:29,column:50}},"7":{start:{line:32,column:4},end:{line:42,column:5}},"8":{start:{line:34,column:6},end:{line:37,column:15}},"9":{start:{line:46,column:4},end:{line:51,column:5}},"10":{start:{line:47,column:6},end:{line:50,column:8}},"11":{start:{line:53,column:4},end:{line:53,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:9},end:{line:14,column:10}},loc:{start:{line:14,column:15},end:{line:16,column:3}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:2},end:{line:17,column:3}},loc:{start:{line:17,column:30},end:{line:26,column:3}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:35},end:{line:30,column:3}},line:28},"3":{name:"(anonymous_3)",decl:{start:{line:31,column:2},end:{line:31,column:3}},loc:{start:{line:31,column:31},end:{line:43,column:3}},line:31},"4":{name:"(anonymous_4)",decl:{start:{line:44,column:2},end:{line:44,column:3}},loc:{start:{line:44,column:44},end:{line:54,column:3}},line:44}},branchMap:{"0":{loc:{start:{line:32,column:4},end:{line:42,column:5}},type:"switch",locations:[{start:{line:33,column:4},end:{line:37,column:15}}],line:32},"1":{loc:{start:{line:46,column:4},end:{line:51,column:5}},type:"if",locations:[{start:{line:46,column:4},end:{line:51,column:5}}],line:46},"2":{loc:{start:{line:46,column:8},end:{line:46,column:53}},type:"binary-expr",locations:[{start:{line:46,column:8},end:{line:46,column:14}},{start:{line:46,column:18},end:{line:46,column:53}}],line:46}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0],"1":[0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"097f76cbbfe2725b53e91623250d2e2636ac4050"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_20y0fm84fb=function(){return actualCoverage;};}return actualCoverage;}cov_20y0fm84fb();import structuredCloning from'./structuredCloning.js';/**
 * @type {Map<import('../types.js').AvailableType,
 *   import('../types.js').AvailableType>
 * }
 */const typesonToJson=(cov_20y0fm84fb().s[0]++,new Map([['arrayNonindexKeys','array']]));/** @type {import('../formats.js').Format} */const json=(cov_20y0fm84fb().s[1]++,{types:()=>{cov_20y0fm84fb().f[0]++;cov_20y0fm84fb().s[2]++;return['null','true','false','number','string','array','object'];},iterate(records,stateObj){cov_20y0fm84fb().f[1]++;// Todo (low): Add a more optimal (`JSON.stringify`-based iterator)
const recs=(cov_20y0fm84fb().s[3]++,records);// I believe this escaping should be by Typeson itself
// if (records && typeof records === 'object' && records.$types) {
//   recs = {$: records, $types: true};
// }
cov_20y0fm84fb().s[4]++;stateObj.format='json';cov_20y0fm84fb().s[5]++;return structuredCloning.iterate(recs,stateObj);},// A hack until we simply pass in our own types or do own parsing
convertFromTypeson(typesonType){cov_20y0fm84fb().f[2]++;cov_20y0fm84fb().s[6]++;return{type:typesonToJson.get(typesonType)};},testInvalid(newType,value){cov_20y0fm84fb().f[3]++;cov_20y0fm84fb().s[7]++;switch(newType){case'array':cov_20y0fm84fb().b[0][0]++;cov_20y0fm84fb().s[8]++;return Object.keys(value).length!==/** @type {Array<import('../formats.js').StructuredCloneValue>} */value.length;/* istanbul ignore next -- Shouldn't occur */default:/* istanbul ignore next -- Shouldn't occur */return undefined;// Todo: Fix?
}},getTypesAndSchemasForState(types,state){cov_20y0fm84fb().f[4]++;cov_20y0fm84fb().s[9]++;/* istanbul ignore else -- No other states apparently */if((cov_20y0fm84fb().b[2][0]++,!state)||(cov_20y0fm84fb().b[2][1]++,['array','object'].includes(state))){cov_20y0fm84fb().b[1][0]++;cov_20y0fm84fb().s[10]++;return{types:this.types(),schemaObjects:[]};}else{}// Shouldn't normally reach here
cov_20y0fm84fb().s[11]++;return undefined;}});export default json;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjB5MGZtODRmYiIsImFjdHVhbENvdmVyYWdlIiwic3RydWN0dXJlZENsb25pbmciLCJ0eXBlc29uVG9Kc29uIiwicyIsIk1hcCIsImpzb24iLCJ0eXBlcyIsImYiLCJpdGVyYXRlIiwicmVjb3JkcyIsInN0YXRlT2JqIiwicmVjcyIsImZvcm1hdCIsImNvbnZlcnRGcm9tVHlwZXNvbiIsInR5cGVzb25UeXBlIiwidHlwZSIsImdldCIsInRlc3RJbnZhbGlkIiwibmV3VHlwZSIsInZhbHVlIiwiYiIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJnZXRUeXBlc0FuZFNjaGVtYXNGb3JTdGF0ZSIsInN0YXRlIiwiaW5jbHVkZXMiLCJzY2hlbWFPYmplY3RzIl0sInNvdXJjZXMiOlsianNvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RydWN0dXJlZENsb25pbmcgZnJvbSAnLi9zdHJ1Y3R1cmVkQ2xvbmluZy5qcyc7XG5cbi8qKlxuICogQHR5cGUge01hcDxpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXZhaWxhYmxlVHlwZSxcbiAqICAgaW1wb3J0KCcuLi90eXBlcy5qcycpLkF2YWlsYWJsZVR5cGU+XG4gKiB9XG4gKi9cbmNvbnN0IHR5cGVzb25Ub0pzb24gPSBuZXcgTWFwKFtcbiAgWydhcnJheU5vbmluZGV4S2V5cycsICdhcnJheSddXG5dKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4uL2Zvcm1hdHMuanMnKS5Gb3JtYXR9ICovXG5jb25zdCBqc29uID0ge1xuICB0eXBlczogKCkgPT4gW1xuICAgICdudWxsJywgJ3RydWUnLCAnZmFsc2UnLCAnbnVtYmVyJywgJ3N0cmluZycsICdhcnJheScsICdvYmplY3QnXG4gIF0sXG4gIGl0ZXJhdGUgKHJlY29yZHMsIHN0YXRlT2JqKSB7XG4gICAgLy8gVG9kbyAobG93KTogQWRkIGEgbW9yZSBvcHRpbWFsIChgSlNPTi5zdHJpbmdpZnlgLWJhc2VkIGl0ZXJhdG9yKVxuICAgIGNvbnN0IHJlY3MgPSByZWNvcmRzO1xuICAgIC8vIEkgYmVsaWV2ZSB0aGlzIGVzY2FwaW5nIHNob3VsZCBiZSBieSBUeXBlc29uIGl0c2VsZlxuICAgIC8vIGlmIChyZWNvcmRzICYmIHR5cGVvZiByZWNvcmRzID09PSAnb2JqZWN0JyAmJiByZWNvcmRzLiR0eXBlcykge1xuICAgIC8vICAgcmVjcyA9IHskOiByZWNvcmRzLCAkdHlwZXM6IHRydWV9O1xuICAgIC8vIH1cbiAgICBzdGF0ZU9iai5mb3JtYXQgPSAnanNvbic7XG4gICAgcmV0dXJuIHN0cnVjdHVyZWRDbG9uaW5nLml0ZXJhdGUocmVjcywgc3RhdGVPYmopO1xuICB9LFxuICAvLyBBIGhhY2sgdW50aWwgd2Ugc2ltcGx5IHBhc3MgaW4gb3VyIG93biB0eXBlcyBvciBkbyBvd24gcGFyc2luZ1xuICBjb252ZXJ0RnJvbVR5cGVzb24gKHR5cGVzb25UeXBlKSB7XG4gICAgcmV0dXJuIHt0eXBlOiB0eXBlc29uVG9Kc29uLmdldCh0eXBlc29uVHlwZSl9O1xuICB9LFxuICB0ZXN0SW52YWxpZCAobmV3VHlwZSwgdmFsdWUpIHtcbiAgICBzd2l0Y2ggKG5ld1R5cGUpIHtcbiAgICBjYXNlICdhcnJheSc6XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCAhPT1cbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuLi9mb3JtYXRzLmpzJykuU3RydWN0dXJlZENsb25lVmFsdWU+fSAqLyAoXG4gICAgICAgIHZhbHVlXG4gICAgICApLmxlbmd0aDtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtLSBTaG91bGRuJ3Qgb2NjdXIgKi9cbiAgICBkZWZhdWx0OlxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gU2hvdWxkbid0IG9jY3VyICovXG4gICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBUb2RvOiBGaXg/XG4gICAgfVxuICB9LFxuICBnZXRUeXBlc0FuZFNjaGVtYXNGb3JTdGF0ZSAodHlwZXMsIHN0YXRlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgLS0gTm8gb3RoZXIgc3RhdGVzIGFwcGFyZW50bHkgKi9cbiAgICBpZiAoIXN0YXRlIHx8IFsnYXJyYXknLCAnb2JqZWN0J10uaW5jbHVkZXMoc3RhdGUpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlczogdGhpcy50eXBlcygpLFxuICAgICAgICBzY2hlbWFPYmplY3RzOiBbXVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gU2hvdWxkbid0IG5vcm1hbGx5IHJlYWNoIGhlcmVcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBqc29uO1xuIl0sIm1hcHBpbmdzIjoidWdGQWVZO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQWZaLE1BQU8sQ0FBQUUsaUJBQWlCLEtBQU0sd0JBQXdCLENBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxLQUFNLENBQUFDLGFBQWEsRUFBQUgsY0FBQSxHQUFBSSxDQUFBLE1BQUcsR0FBSSxDQUFBQyxHQUFHLENBQUMsQ0FDNUIsQ0FBQyxtQkFBbUIsQ0FBRSxPQUFPLENBQUMsQ0FDL0IsQ0FBQyxFQUVGLDZDQUNBLEtBQU0sQ0FBQUMsSUFBSSxFQUFBTixjQUFBLEdBQUFJLENBQUEsTUFBRyxDQUNYRyxLQUFLLENBQUVBLENBQUEsR0FBTSxDQUFBUCxjQUFBLEdBQUFRLENBQUEsTUFBQVIsY0FBQSxHQUFBSSxDQUFBLGFBQ1gsTUFBTSxDQUFFLE1BQU0sQ0FBRSxPQUFPLENBQUUsUUFBUSxDQUFFLFFBQVEsQ0FBRSxPQUFPLENBQUUsUUFBUSxDQUMvRCxDQUFELENBQUMsQ0FDREssT0FBT0EsQ0FBRUMsT0FBTyxDQUFFQyxRQUFRLENBQUUsQ0FBQVgsY0FBQSxHQUFBUSxDQUFBLE1BQzFCO0FBQ0EsS0FBTSxDQUFBSSxJQUFJLEVBQUFaLGNBQUEsR0FBQUksQ0FBQSxNQUFHTSxPQUFPLEVBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQUFWLGNBQUEsR0FBQUksQ0FBQSxNQUNBTyxRQUFRLENBQUNFLE1BQU0sQ0FBRyxNQUFNLENBQUNiLGNBQUEsR0FBQUksQ0FBQSxNQUN6QixNQUFPLENBQUFGLGlCQUFpQixDQUFDTyxPQUFPLENBQUNHLElBQUksQ0FBRUQsUUFBUSxDQUFDLENBQ2xELENBQUMsQ0FDRDtBQUNBRyxrQkFBa0JBLENBQUVDLFdBQVcsQ0FBRSxDQUFBZixjQUFBLEdBQUFRLENBQUEsTUFBQVIsY0FBQSxHQUFBSSxDQUFBLE1BQy9CLE1BQU8sQ0FBQ1ksSUFBSSxDQUFFYixhQUFhLENBQUNjLEdBQUcsQ0FBQ0YsV0FBVyxDQUFDLENBQUMsQ0FDL0MsQ0FBQyxDQUNERyxXQUFXQSxDQUFFQyxPQUFPLENBQUVDLEtBQUssQ0FBRSxDQUFBcEIsY0FBQSxHQUFBUSxDQUFBLE1BQUFSLGNBQUEsR0FBQUksQ0FBQSxNQUMzQixPQUFRZSxPQUFPLEVBQ2YsSUFBSyxPQUFPLENBQUFuQixjQUFBLEdBQUFxQixDQUFBLFNBQUFyQixjQUFBLEdBQUFJLENBQUEsTUFDVixNQUFPLENBQUFrQixNQUFNLENBQUNDLElBQUksQ0FBQ0gsS0FBSyxDQUFDLENBQUNJLE1BQU0sR0FDaEMsa0VBQ0VKLEtBQUssQ0FDTEksTUFBTSxDQUNWLDZDQUNBLFFBQ0UsNkNBQ0EsTUFBTyxDQUFBQyxTQUFTLENBQUU7QUFDcEIsQ0FDRixDQUFDLENBQ0RDLDBCQUEwQkEsQ0FBRW5CLEtBQUssQ0FBRW9CLEtBQUssQ0FBRSxDQUFBM0IsY0FBQSxHQUFBUSxDQUFBLE1BQUFSLGNBQUEsR0FBQUksQ0FBQSxNQUN4Qyx3REFDQSxHQUFJLENBQUFKLGNBQUEsR0FBQXFCLENBQUEsVUFBQ00sS0FBSyxJQUFBM0IsY0FBQSxHQUFBcUIsQ0FBQSxTQUFJLENBQUMsT0FBTyxDQUFFLFFBQVEsQ0FBQyxDQUFDTyxRQUFRLENBQUNELEtBQUssQ0FBQyxFQUFFLENBQUEzQixjQUFBLEdBQUFxQixDQUFBLFNBQUFyQixjQUFBLEdBQUFJLENBQUEsT0FDakQsTUFBTyxDQUNMRyxLQUFLLENBQUUsSUFBSSxDQUFDQSxLQUFLLENBQUMsQ0FBQyxDQUNuQnNCLGFBQWEsQ0FBRSxFQUNqQixDQUFDLENBQ0gsQ0FBQyxNQUNEO0FBQUE3QixjQUFBLEdBQUFJLENBQUEsT0FDQSxNQUFPLENBQUFxQixTQUFTLENBQ2xCLENBQ0YsQ0FBQyxFQUVELGNBQWUsQ0FBQW5CLElBQUkiLCJpZ25vcmVMaXN0IjpbXX0=