function cov_20y0fm84fb(){var path="/Users/brett/jsoe/src/formats/json.js";var hash="e5f783c30400caa09a13cb9f0e4e3f408850da29";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/brett/jsoe/src/formats/json.js",statementMap:{"0":{start:{line:8,column:22},end:{line:10,column:2}},"1":{start:{line:13,column:13},end:{line:55,column:1}},"2":{start:{line:14,column:15},end:{line:16,column:3}},"3":{start:{line:19,column:17},end:{line:19,column:24}},"4":{start:{line:24,column:4},end:{line:24,column:29}},"5":{start:{line:25,column:4},end:{line:25,column:53}},"6":{start:{line:29,column:4},end:{line:29,column:42}},"7":{start:{line:32,column:4},end:{line:42,column:5}},"8":{start:{line:34,column:6},end:{line:37,column:15}},"9":{start:{line:46,column:4},end:{line:51,column:5}},"10":{start:{line:47,column:6},end:{line:50,column:8}},"11":{start:{line:53,column:4},end:{line:53,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:9},end:{line:14,column:10}},loc:{start:{line:14,column:15},end:{line:16,column:3}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:2},end:{line:17,column:3}},loc:{start:{line:17,column:30},end:{line:26,column:3}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:35},end:{line:30,column:3}},line:28},"3":{name:"(anonymous_3)",decl:{start:{line:31,column:2},end:{line:31,column:3}},loc:{start:{line:31,column:31},end:{line:43,column:3}},line:31},"4":{name:"(anonymous_4)",decl:{start:{line:44,column:2},end:{line:44,column:3}},loc:{start:{line:44,column:44},end:{line:54,column:3}},line:44}},branchMap:{"0":{loc:{start:{line:32,column:4},end:{line:42,column:5}},type:"switch",locations:[{start:{line:33,column:4},end:{line:37,column:15}}],line:32},"1":{loc:{start:{line:46,column:4},end:{line:51,column:5}},type:"if",locations:[{start:{line:46,column:4},end:{line:51,column:5}}],line:46},"2":{loc:{start:{line:46,column:8},end:{line:46,column:53}},type:"binary-expr",locations:[{start:{line:46,column:8},end:{line:46,column:14}},{start:{line:46,column:18},end:{line:46,column:53}}],line:46}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0],"1":[0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e5f783c30400caa09a13cb9f0e4e3f408850da29"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_20y0fm84fb=function(){return actualCoverage;};}return actualCoverage;}cov_20y0fm84fb();import structuredCloning from'./structuredCloning.js';/**
 * @type {Map<import('../types.js').AvailableType,
 *   import('../types.js').AvailableType>
 * }
 */const typesonToJson=(cov_20y0fm84fb().s[0]++,new Map([['arrayNonindexKeys','array']]));/** @type {import('../formats.js').Format} */const json=(cov_20y0fm84fb().s[1]++,{types:()=>{cov_20y0fm84fb().f[0]++;cov_20y0fm84fb().s[2]++;return['null','true','false','number','string','array','object'];},iterate(records,stateObj){cov_20y0fm84fb().f[1]++;// Todo (low): Add a more optimal (`JSON.stringify`-based iterator)
const recs=(cov_20y0fm84fb().s[3]++,records);// I believe this escaping should be by Typeson itself
// if (records && typeof records === 'object' && records.$types) {
//   recs = {$: records, $types: true};
// }
cov_20y0fm84fb().s[4]++;stateObj.format='json';cov_20y0fm84fb().s[5]++;return structuredCloning.iterate(recs,stateObj);},// A hack until we simply pass in our own types or do own parsing
convertFromTypeson(typesonType){cov_20y0fm84fb().f[2]++;cov_20y0fm84fb().s[6]++;return typesonToJson.get(typesonType);},testInvalid(newType,value){cov_20y0fm84fb().f[3]++;cov_20y0fm84fb().s[7]++;switch(newType){case'array':cov_20y0fm84fb().b[0][0]++;cov_20y0fm84fb().s[8]++;return Object.keys(value).length!==/** @type {Array<import('../formats.js').StructuredCloneValue>} */value.length;/* istanbul ignore next -- Shouldn't occur */default:/* istanbul ignore next -- Shouldn't occur */return undefined;// Todo: Fix?
}},getTypesAndSchemasForState(types,state){cov_20y0fm84fb().f[4]++;cov_20y0fm84fb().s[9]++;/* istanbul ignore else -- No other states apparently */if((cov_20y0fm84fb().b[2][0]++,!state)||(cov_20y0fm84fb().b[2][1]++,['array','object'].includes(state))){cov_20y0fm84fb().b[1][0]++;cov_20y0fm84fb().s[10]++;return{types:this.types(),schemaObjects:[]};}else{}// Shouldn't normally reach here
cov_20y0fm84fb().s[11]++;return undefined;}});export default json;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjB5MGZtODRmYiIsImFjdHVhbENvdmVyYWdlIiwic3RydWN0dXJlZENsb25pbmciLCJ0eXBlc29uVG9Kc29uIiwicyIsIk1hcCIsImpzb24iLCJ0eXBlcyIsImYiLCJpdGVyYXRlIiwicmVjb3JkcyIsInN0YXRlT2JqIiwicmVjcyIsImZvcm1hdCIsImNvbnZlcnRGcm9tVHlwZXNvbiIsInR5cGVzb25UeXBlIiwiZ2V0IiwidGVzdEludmFsaWQiLCJuZXdUeXBlIiwidmFsdWUiLCJiIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImdldFR5cGVzQW5kU2NoZW1hc0ZvclN0YXRlIiwic3RhdGUiLCJpbmNsdWRlcyIsInNjaGVtYU9iamVjdHMiXSwic291cmNlcyI6WyJqc29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHJ1Y3R1cmVkQ2xvbmluZyBmcm9tICcuL3N0cnVjdHVyZWRDbG9uaW5nLmpzJztcblxuLyoqXG4gKiBAdHlwZSB7TWFwPGltcG9ydCgnLi4vdHlwZXMuanMnKS5BdmFpbGFibGVUeXBlLFxuICogICBpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXZhaWxhYmxlVHlwZT5cbiAqIH1cbiAqL1xuY29uc3QgdHlwZXNvblRvSnNvbiA9IG5ldyBNYXAoW1xuICBbJ2FycmF5Tm9uaW5kZXhLZXlzJywgJ2FycmF5J11cbl0pO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi4vZm9ybWF0cy5qcycpLkZvcm1hdH0gKi9cbmNvbnN0IGpzb24gPSB7XG4gIHR5cGVzOiAoKSA9PiBbXG4gICAgJ251bGwnLCAndHJ1ZScsICdmYWxzZScsICdudW1iZXInLCAnc3RyaW5nJywgJ2FycmF5JywgJ29iamVjdCdcbiAgXSxcbiAgaXRlcmF0ZSAocmVjb3Jkcywgc3RhdGVPYmopIHtcbiAgICAvLyBUb2RvIChsb3cpOiBBZGQgYSBtb3JlIG9wdGltYWwgKGBKU09OLnN0cmluZ2lmeWAtYmFzZWQgaXRlcmF0b3IpXG4gICAgY29uc3QgcmVjcyA9IHJlY29yZHM7XG4gICAgLy8gSSBiZWxpZXZlIHRoaXMgZXNjYXBpbmcgc2hvdWxkIGJlIGJ5IFR5cGVzb24gaXRzZWxmXG4gICAgLy8gaWYgKHJlY29yZHMgJiYgdHlwZW9mIHJlY29yZHMgPT09ICdvYmplY3QnICYmIHJlY29yZHMuJHR5cGVzKSB7XG4gICAgLy8gICByZWNzID0geyQ6IHJlY29yZHMsICR0eXBlczogdHJ1ZX07XG4gICAgLy8gfVxuICAgIHN0YXRlT2JqLmZvcm1hdCA9ICdqc29uJztcbiAgICByZXR1cm4gc3RydWN0dXJlZENsb25pbmcuaXRlcmF0ZShyZWNzLCBzdGF0ZU9iaik7XG4gIH0sXG4gIC8vIEEgaGFjayB1bnRpbCB3ZSBzaW1wbHkgcGFzcyBpbiBvdXIgb3duIHR5cGVzIG9yIGRvIG93biBwYXJzaW5nXG4gIGNvbnZlcnRGcm9tVHlwZXNvbiAodHlwZXNvblR5cGUpIHtcbiAgICByZXR1cm4gdHlwZXNvblRvSnNvbi5nZXQodHlwZXNvblR5cGUpO1xuICB9LFxuICB0ZXN0SW52YWxpZCAobmV3VHlwZSwgdmFsdWUpIHtcbiAgICBzd2l0Y2ggKG5ld1R5cGUpIHtcbiAgICBjYXNlICdhcnJheSc6XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCAhPT1cbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuLi9mb3JtYXRzLmpzJykuU3RydWN0dXJlZENsb25lVmFsdWU+fSAqLyAoXG4gICAgICAgIHZhbHVlXG4gICAgICApLmxlbmd0aDtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtLSBTaG91bGRuJ3Qgb2NjdXIgKi9cbiAgICBkZWZhdWx0OlxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gU2hvdWxkbid0IG9jY3VyICovXG4gICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBUb2RvOiBGaXg/XG4gICAgfVxuICB9LFxuICBnZXRUeXBlc0FuZFNjaGVtYXNGb3JTdGF0ZSAodHlwZXMsIHN0YXRlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgLS0gTm8gb3RoZXIgc3RhdGVzIGFwcGFyZW50bHkgKi9cbiAgICBpZiAoIXN0YXRlIHx8IFsnYXJyYXknLCAnb2JqZWN0J10uaW5jbHVkZXMoc3RhdGUpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlczogdGhpcy50eXBlcygpLFxuICAgICAgICBzY2hlbWFPYmplY3RzOiBbXVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gU2hvdWxkbid0IG5vcm1hbGx5IHJlYWNoIGhlcmVcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBqc29uO1xuIl0sIm1hcHBpbmdzIjoidWdGQWVZO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQWZaLE1BQU8sQ0FBQUUsaUJBQWlCLEtBQU0sd0JBQXdCLENBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxLQUFNLENBQUFDLGFBQWEsRUFBQUgsY0FBQSxHQUFBSSxDQUFBLE1BQUcsR0FBSSxDQUFBQyxHQUFHLENBQUMsQ0FDNUIsQ0FBQyxtQkFBbUIsQ0FBRSxPQUFPLENBQUMsQ0FDL0IsQ0FBQyxFQUVGLDZDQUNBLEtBQU0sQ0FBQUMsSUFBSSxFQUFBTixjQUFBLEdBQUFJLENBQUEsTUFBRyxDQUNYRyxLQUFLLENBQUVBLENBQUEsR0FBTSxDQUFBUCxjQUFBLEdBQUFRLENBQUEsTUFBQVIsY0FBQSxHQUFBSSxDQUFBLGFBQ1gsTUFBTSxDQUFFLE1BQU0sQ0FBRSxPQUFPLENBQUUsUUFBUSxDQUFFLFFBQVEsQ0FBRSxPQUFPLENBQUUsUUFBUSxDQUMvRCxDQUFELENBQUMsQ0FDREssT0FBT0EsQ0FBRUMsT0FBTyxDQUFFQyxRQUFRLENBQUUsQ0FBQVgsY0FBQSxHQUFBUSxDQUFBLE1BQzFCO0FBQ0EsS0FBTSxDQUFBSSxJQUFJLEVBQUFaLGNBQUEsR0FBQUksQ0FBQSxNQUFHTSxPQUFPLEVBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQUFWLGNBQUEsR0FBQUksQ0FBQSxNQUNBTyxRQUFRLENBQUNFLE1BQU0sQ0FBRyxNQUFNLENBQUNiLGNBQUEsR0FBQUksQ0FBQSxNQUN6QixNQUFPLENBQUFGLGlCQUFpQixDQUFDTyxPQUFPLENBQUNHLElBQUksQ0FBRUQsUUFBUSxDQUFDLENBQ2xELENBQUMsQ0FDRDtBQUNBRyxrQkFBa0JBLENBQUVDLFdBQVcsQ0FBRSxDQUFBZixjQUFBLEdBQUFRLENBQUEsTUFBQVIsY0FBQSxHQUFBSSxDQUFBLE1BQy9CLE1BQU8sQ0FBQUQsYUFBYSxDQUFDYSxHQUFHLENBQUNELFdBQVcsQ0FBQyxDQUN2QyxDQUFDLENBQ0RFLFdBQVdBLENBQUVDLE9BQU8sQ0FBRUMsS0FBSyxDQUFFLENBQUFuQixjQUFBLEdBQUFRLENBQUEsTUFBQVIsY0FBQSxHQUFBSSxDQUFBLE1BQzNCLE9BQVFjLE9BQU8sRUFDZixJQUFLLE9BQU8sQ0FBQWxCLGNBQUEsR0FBQW9CLENBQUEsU0FBQXBCLGNBQUEsR0FBQUksQ0FBQSxNQUNWLE1BQU8sQ0FBQWlCLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSCxLQUFLLENBQUMsQ0FBQ0ksTUFBTSxHQUNoQyxrRUFDRUosS0FBSyxDQUNMSSxNQUFNLENBQ1YsNkNBQ0EsUUFDRSw2Q0FDQSxNQUFPLENBQUFDLFNBQVMsQ0FBRTtBQUNwQixDQUNGLENBQUMsQ0FDREMsMEJBQTBCQSxDQUFFbEIsS0FBSyxDQUFFbUIsS0FBSyxDQUFFLENBQUExQixjQUFBLEdBQUFRLENBQUEsTUFBQVIsY0FBQSxHQUFBSSxDQUFBLE1BQ3hDLHdEQUNBLEdBQUksQ0FBQUosY0FBQSxHQUFBb0IsQ0FBQSxVQUFDTSxLQUFLLElBQUExQixjQUFBLEdBQUFvQixDQUFBLFNBQUksQ0FBQyxPQUFPLENBQUUsUUFBUSxDQUFDLENBQUNPLFFBQVEsQ0FBQ0QsS0FBSyxDQUFDLEVBQUUsQ0FBQTFCLGNBQUEsR0FBQW9CLENBQUEsU0FBQXBCLGNBQUEsR0FBQUksQ0FBQSxPQUNqRCxNQUFPLENBQ0xHLEtBQUssQ0FBRSxJQUFJLENBQUNBLEtBQUssQ0FBQyxDQUFDLENBQ25CcUIsYUFBYSxDQUFFLEVBQ2pCLENBQUMsQ0FDSCxDQUFDLE1BQ0Q7QUFBQTVCLGNBQUEsR0FBQUksQ0FBQSxPQUNBLE1BQU8sQ0FBQW9CLFNBQVMsQ0FDbEIsQ0FDRixDQUFDLEVBRUQsY0FBZSxDQUFBbEIsSUFBSSIsImlnbm9yZUxpc3QiOltdfQ==